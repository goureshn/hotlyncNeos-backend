<?php

namespace App\Http\Controllers\Frontend;

use App;
use App\Http\Controllers\Controller;
use App\Http\Requests;
use App\Models\Call\StaffExternal;
use App\Models\Common\CommonStatusPerUser;
use App\Models\Common\CommonUser;
use App\Models\Common\CommonStatusPerProperty;
use App\Models\Common\Property;
use App\Models\Common\PropertySetting;
use App\Models\Common\ReportHistory;
use App\Models\Common\CronLogs;
use App\Models\Common\ScheduleReportSetting;
use App\Models\Service\CompensationTemplate;
use App\Models\Service\ComplaintSublist;
use App\Models\Eng\EngRepairStaff;
use App\Models\Eng\WorkOrder;
use App\Models\Eng\EngRepairRequest;

use App\Exports\CommonExport;
use PhpOffice\PhpSpreadsheet\Worksheet\Drawing;
use PhpOffice\PhpSpreadsheet\Spreadsheet;

use App\Modules\Functions;
use Curl;
use DateTime;
use DB;
use Excel;
use Illuminate\Http\Request;
use Lava;
use Maatwebsite\Excel\Classes\PHPExcel;
use Mail;
use PDF;
use PHPExcel_Chart;
use PHPExcel_Chart_DataSeries;
use PHPExcel_Chart_DataSeriesValues;
use PHPExcel_Chart_Layout;
use PHPExcel_Chart_PlotArea;
use PHPExcel_Chart_Title;
use PHPExcel_IOFactory;
use PHPExcel_Worksheet_Drawing;
use PHPExcel_Worksheet_MemoryDrawing;
use Redis;
use Response;

// use Charts;

define("RINGING", 'Ringing');
define("ABANDONED", 'Abandoned');
define("ANSWERED", 'Answered');
define("CALLBACK", 'Callback');
define("FOLLOWUP", 'Modify');
define("HOLD", 'Hold');
define("MISSED", 'Missed');

define("F_INTERACTION", 'Guest Interaction');
define("F_COURTESY", 'Courtesy Calls');
define("F_INSPECTION", 'Room Inspection');
define("F_ATTENTION", 'In-House Special Attention');
define("F_ESCORTED", 'Escorted to Room');

define("C_PENDINGG", 'Pending');
define("C_RESOLVEDD", 'Resolved');
define("C_REJECTEDD", 'Rejected');
define("C_INPROGG", 'In-Progress');
define("C_REOPENN", 'Re-Opened');
define("C_CLOSEDD", 'Closed');
define("C_AWAITT", 'Awaiting Approval');
define("C_UNRESOLVEDD", 'Unresolved');
define("C_AWAITT2", 'Awaiting Approval 2');
define("C_AWAITT3", 'Awaiting Approval 3');

define("ONLINE", 'Online');
define("AVAILABLE", 'Available');
define("NOTAVAILABLE", 'Not Available');
define("BUSY", 'Busy');
define("ONBREAK", 'On Break');
define("IDLE", 'Idle');
define("WRAPUP", 'Wrapup');
define("OUTGOING", 'Outgoing');
define("LOGOUT", 'Log out');
define("AWAY", 'Away');

class ReportController extends Controller
{
	public function getReportDescription($property_id, $building_id, $call_types, $call_sort, &$ret,
										 $department, $room, $extension, $destination, $access_code, $called_no)
	{
		if( count($call_types) > 0 ) {
			$label = 'Call Type - ';
			for($i = 0; $i < count($call_types); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $call_types[$i];
			}
			$ret['call_type'] = $label;
		} else {
            $ret['call_type'] = '';
        }

		if(count($department) >0 ) {
			$label = '';
			for($i = 0; $i < count($department); $i++)
			{
				if( $i > 0 ) {
                    $label = $label . ', ';
                }
				$label = $label . $department[$i];
			}
			$ret['department'] = $label;
		}else {
            $ret['department'] = 'All';
        }

		if(count($room) >0 ) {
			$label = '';
			for($i = 0; $i < count($room); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $room[$i];
			}
			$ret['room'] = $label;
		}else
			$ret['room'] = 'All';

		if(count($extension) >0 ) {
			$label = '';
			for($i = 0; $i < count($extension); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $extension[$i];
			}
			$ret['extension'] = $label;
		}else
			$ret['extension'] = 'All';

		if(count($called_no) >0 ) {
			$label = '';
			for($i = 0; $i < count($called_no); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $called_no[$i];
			}
			$ret['called_no'] = $label;
		}else
			$ret['called_no'] = 'All';

		if(count($access_code) >0 ) {
			$label = '';
			for($i = 0; $i < count($access_code); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $access_code[$i];
			}
			$ret['access_code'] = $label;
		}else
			$ret['access_code'] = 'All';

		if(count($destination) >0 ) {
			$label = '';
			for($i = 0; $i < count($destination); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $destination[$i];
			}
			$ret['destination'] = $label;
		}else
			$ret['destination'] = 'All';

		$extension_type_string = '';
		if( count($call_sort) > 0 ) {
			for($i = 0; $i < count($call_sort); $i++)
			{
				$extension_type_string = $extension_type_string.','.$call_sort[$i];
			}
			$extension_type_string = substr($extension_type_string, 1,strlen($extension_type_string));
		}

		$ret['call_sort'] = $call_sort;
//		$ret['extenstion_type'] = $call_sort;
		$ret['extenstion_type'] = $extension_type_string;

		$property = DB::table('common_property')
				->where('id', $property_id)
				->first();
		$ret['property'] = $property;
/*
		if( $building_id > 0 )
		{
			$building = DB::table('common_building')
					->where('id', $building_id)
					->first();
			$ret['building'] = $building->name;
		}
		else
		{
			$ret['building'] = 'All';
		}
*/
		if(count($building_id) >0 ) {
			$label = '';
			for($i = 0; $i < count($building_id); $i++)
			{

				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $building_id[$i];
			}
			$ret['building'] = $label;
		}else {
            $ret['building'] = 'All';
        }

	}

	public function getGuestcallSummaryData($query, &$ret, &$by_build_data, &$total_value, &$by_building_room_department_data)
	{
		$by_building_query = clone $query;
        //extension report by
		$guest_call_by_extension = clone $by_building_query;
		$guest_call_by_extension_data = $guest_call_by_extension
			->select(DB::raw("'Calls' as name,
                        sum(gc.call_type = 'International') as International,
                        sum(gc.call_type = 'Mobile')  as Mobile,
                        sum(gc.call_type = 'Local') as Local,
                        sum(gc.call_type = 'National') as National,
                        sum(gc.call_type = 'Internal') as Internal,
                        sum(gc.call_type = 'Received') as Incoming,										
                        count(*) as Grand,

                'Duration' as name1,
                        SEC_TO_TIME(ROUND(sum((gc.call_type = 'International') * gc.duration))) as International1,
                        SEC_TO_TIME(ROUND(sum((gc.call_type = 'Mobile') * gc.duration))) as Mobile1,
                        SEC_TO_TIME(ROUND(sum((gc.call_type = 'Local') * gc.duration))) as Local1,
                        SEC_TO_TIME(ROUND(sum((gc.call_type = 'National') * gc.duration))) as National1,
                        SEC_TO_TIME(ROUND(sum((gc.call_type = 'Internal') * gc.duration))) as Internal1,
                        SEC_TO_TIME(ROUND(sum((gc.call_type = 'Received') * gc.duration))) as Incoming1,	
                        SEC_TO_TIME(ROUND(sum(gc.duration))) as Grand1,

                'Charges(AED)' as name,
                        round(sum((gc.call_type = 'International') * gc.total_charges),2) as International2,
                        round(sum((gc.call_type = 'Mobile') * gc.total_charges),2) as Mobile2,
                        round(sum((gc.call_type = 'Local') * gc.total_charges),2) as Local2,
                        round(sum((gc.call_type = 'National') * gc.total_charges),2) as National2,
                        round(sum((gc.call_type = 'Internal') * gc.total_charges),2) as Internal2,
                        round(sum((gc.call_type = 'Received') * gc.total_charges),2) as Incoming2,
                        round(sum(gc.total_charges),2) as Grand2,

                        round(sum((gc.call_type = 'Toll Free') * gc.total_charges),2) as Toll2,
                        round(sum(gc.carrier_charges),2) as Total_Carrier2,
                        round(sum(gc.hotel_charges),2) as Total_Hotel2

                        "))
			->first();
		// //extension report by
		// $duration_query =  clone $query;
		// $guest_duration_by_extension_data = $duration_query
		// 	->select(DB::raw("'Duration' as name,
		// 								SEC_TO_TIME(ROUND(sum((gc.call_type = 'International') * gc.duration))) as International,
		// 								SEC_TO_TIME(ROUND(sum((gc.call_type = 'Mobile') * gc.duration))) as Mobile,
		// 								SEC_TO_TIME(ROUND(sum((gc.call_type = 'Local') * gc.duration))) as Local,
		// 								SEC_TO_TIME(ROUND(sum((gc.call_type = 'National') * gc.duration))) as National,
		// 								SEC_TO_TIME(ROUND(sum((gc.call_type = 'Internal') * gc.duration))) as Internal,
		// 								SEC_TO_TIME(ROUND(sum((gc.call_type = 'Received') * gc.duration))) as Incoming,
		// 								SEC_TO_TIME(ROUND(sum(gc.duration))) as Grand
		// 								"))
		// 	->first();
		// //extension report by
		// $charge_query =  clone $query;
		// $guest_charges_by_extension_data = $charge_query
		// 	->select(DB::raw("'Charges(AED)' as name,
		// 								round(sum((gc.call_type = 'International') * gc.total_charges),2) as International,
		// 								round(sum((gc.call_type = 'Mobile') * gc.total_charges),2) as Mobile,
		// 								round(sum((gc.call_type = 'Local') * gc.total_charges),2) as Local,
		// 								round(sum((gc.call_type = 'National') * gc.total_charges),2) as National,
		// 								round(sum((gc.call_type = 'Internal') * gc.total_charges),2) as Internal,
		// 								round(sum((gc.call_type = 'Received') * gc.total_charges),2) as Incoming,
		// 								round(sum(gc.total_charges),2) as Grand
		// 								"))
		// 	->first();

		$ret['guest_extension_call'] = $guest_call_by_extension_data;
		// $ret['guest_duraion_call'] = $guest_duration_by_extension_data ;
		// $ret['guest_charge_call'] = $guest_charges_by_extension_data ;

		$guest_duration_by_extension_data = array(
					'International' => $guest_call_by_extension_data->International1,
					'Mobile' => $guest_call_by_extension_data->Mobile1,
					'Local' => $guest_call_by_extension_data->Local1,
					'National' => $guest_call_by_extension_data->National1,
					'Internal' => $guest_call_by_extension_data->Internal1,
					'Incoming' => $guest_call_by_extension_data->Incoming1,
					'Grand' => $guest_call_by_extension_data->Grand1,
					);

		$ret['guest_duraion_call'] = (object)$guest_duration_by_extension_data;

		$guest_charges_by_extension_data = [
					'International' => $guest_call_by_extension_data->International2,
					'Mobile' => $guest_call_by_extension_data->Mobile2,
					'Local' => $guest_call_by_extension_data->Local2,
					'National' => $guest_call_by_extension_data->National2,
					'Internal' => $guest_call_by_extension_data->Internal2,
					'Incoming' => $guest_call_by_extension_data->Incoming2,
					'Grand' => $guest_call_by_extension_data->Grand2,
					];
		$ret['guest_charge_call'] = (object)$guest_charges_by_extension_data;

		// $total_guest_query = clone $query;

		// $total_guest_call = $total_guest_query
		// 		->select(DB::raw("sum((gc.call_type = 'International') * gc.total_charges) as International,
		// 								sum((gc.call_type = 'Mobile') * gc.total_charges) as Mobile,
		// 								sum((gc.call_type = 'Local') * gc.total_charges) as Local,
		// 								sum((gc.call_type = 'National') * gc.total_charges) as National,
		// 								sum((gc.call_type = 'Toll Free') * gc.total_charges) as Toll,
		// 								sum(gc.carrier_charges) as Total_Carrier,
		// 								sum(gc.hotel_charges) as Total_Hotel,
		// 								sum(gc.total_charges) as Total
		// 								"))
		// 		->first();

		// $ret['guest_total_value'] = $total_guest_call;

		$total_guest_call = [
					'International' => $guest_call_by_extension_data->International2,
					'Mobile' => $guest_call_by_extension_data->Mobile2,
					'Local' => $guest_call_by_extension_data->Local2,
					'National' => $guest_call_by_extension_data->National2,
					'Internal' => $guest_call_by_extension_data->Internal2,
					'Incoming' => $guest_call_by_extension_data->Incoming2,
					'Toll' => $guest_call_by_extension_data->Toll2,
					'Total_Carrier' => $guest_call_by_extension_data->Total_Carrier2,
					'Total_Hotel' => $guest_call_by_extension_data->Total_Hotel2,
					'Total' => $guest_call_by_extension_data->Grand2,
					];

		$ret['guest_total_value'] = (object)$total_guest_call;

		//extension listreport by
		$extension_list_query =  clone $query;
		$guest_list_by_extension = $extension_list_query->groupBy('gc.extension_id')
			->select(DB::raw(" ge.extension as extension, ge.description as description, 'Guest' as department,
										sum(gc.call_type = 'International') as International_count,
										round(sum((gc.call_type = 'International') * gc.total_charges),2) as International,
										sum(gc.call_type = 'Mobile') as Mobile_count,
										round(sum((gc.call_type = 'Mobile') * gc.total_charges),2) as Mobile,
										sum(gc.call_type = 'Local') as Local_count,
										round(sum((gc.call_type = 'Local') * gc.total_charges),2) as Local,
										sum(gc.call_type = 'National') as National_count,																				
										round(sum((gc.call_type = 'National') * gc.total_charges),2) as National,
										sum(gc.call_type = 'Internal') as Internal_count,
										round(sum((gc.call_type = 'Internal') * gc.total_charges),2) as Internal,
										sum(gc.call_type = 'Received') as Incoming_count,
										round(sum((gc.call_type = 'Received') * gc.total_charges),2) as Incoming,
										count(*) as Grand_count,										
										round(sum(gc.total_charges),2) as Grand									
										"))
			->get();

		$ret['guest_extension_list'] = $guest_list_by_extension ;

		$guest_call_by_building_data = $by_building_query->groupBy('cf.bldg_id')
				->select(DB::raw("cb.name,
										sum((gc.call_type = 'International') * gc.total_charges) as International,
										sum((gc.call_type = 'Mobile') * gc.total_charges) as Mobile,
										sum((gc.call_type = 'Local') * gc.total_charges) as Local,
										sum((gc.call_type = 'National') * gc.total_charges) as National,
										sum((gc.call_type = 'Toll Free') * gc.total_charges) as Toll,
										sum(gc.carrier_charges) as Total_Carrier,
										sum(gc.hotel_charges) as Total_Hotel,
										sum(gc.total_charges) as Total
										"))
				->get();

		$guest_call_by_building_room_query = clone $query;
		$result = $guest_call_by_building_room_query
				->orderBy('cf.bldg_id')
				->orderBy('gc.room_id')
				->orderBy('gc.call_date','asc')
				->orderBy('gc.start_time','asc')
				->select(DB::raw("gc.*, cg.guest_name, cr.room, cb.name, cd.country"))
				->get();

		foreach($result as $row) {
			$building = $row->name;
			$room = $row->room;

            $by_building_room_department_data[$building]['guest'][$room]['detail'][] = $row;
		}

		$guest_call_summary_by_building_room_query = clone $query;
		$result = $guest_call_summary_by_building_room_query
				->groupBy('cf.bldg_id')
				->groupBy('gc.room_id')
				->select(DB::raw("cr.room, cb.name, sum(gc.carrier_charges) as carrier_charges,
									sum(gc.hotel_charges) as hotel_charges,
									sum(gc.total_charges) as total_charges
									"))
				->get();

		foreach($result as $row) {
			$building = $row->name;
			$room = $row->room;
			if( empty($by_building_room_department_data[$building]) ) {
				$by_building_room_department_data[$building] = [];
				$by_building_room_department_data[$building]['guest'] = [];

			}
			$by_building_room_department_data[$building]['guest'][$room]['summary'] = $row;
		}

		foreach($guest_call_by_building_data as $row) {
			if(empty($by_build_data[$row->name])) {
				$by_build_data[$row->name] = [];
				$by_build_data[$row->name]['name'] = $row->name;
				$by_build_data[$row->name]['International'] = 0;
				$by_build_data[$row->name]['Mobile'] = 0;
				$by_build_data[$row->name]['Local'] = 0;
				$by_build_data[$row->name]['National'] = 0;
				$by_build_data[$row->name]['Toll'] = 0;
				$by_build_data[$row->name]['Total_Carrier'] = 0;
				$by_build_data[$row->name]['Total'] = 0;
				$by_build_data[$row->name]['Profit'] = 0;
			}

			$by_build_data[$row->name]['International'] += $row->International;
			$by_build_data[$row->name]['Mobile'] += $row->Mobile;
			$by_build_data[$row->name]['Local'] += $row->Local;
			$by_build_data[$row->name]['National'] += $row->National;
			$by_build_data[$row->name]['Toll'] += $row->Toll;
			$by_build_data[$row->name]['Total_Carrier'] += $row->Total_Carrier;
			$by_build_data[$row->name]['Total'] += $row->Total;
			$by_build_data[$row->name]['Profit'] += ($row->Total - $row->Total_Carrier);

			$total_value['International'] += $row->International;
			$total_value['Mobile'] += $row->Mobile;
			$total_value['Local'] += $row->Local;
			$total_value['National'] += $row->National;
			$total_value['Toll'] += $row->Toll;
			$total_value['Total_Carrier'] += $row->Total_Carrier;
			$total_value['Total'] += $row->Total;
			$total_value['Profit'] += ($row->Total - $row->Total_Carrier);
		}

		$ret['guest_by_build_data'] = $guest_call_by_building_data;
	}

	public function getGuestcallSummaryReceiveGuestDetail($query, $orderby, $sort, $report_by, &$ret ) {

		//extension listreport by
		$extension_list_query =  clone $query;
		$guest_list_by_extension = $extension_list_query->groupBy('ge.id')
			->select(DB::raw(" ge.extension as extension,
										count(*) as Receive_count,										
										round(sum(gc.total_charges),2) as Receive								
										"))
			->get();

		$ret['guest_guest_extension_receive_list'] = $guest_list_by_extension ;
	}

	public function getGuestcallSummaryReceiveAdminDetail($query, $orderby, $sort, $report_by, &$ret ) {
		//extension listreport by
		$extension_list_query =  clone $query;
		$guest_list_by_extension = $extension_list_query->groupBy('ge.id')
			->select(DB::raw(" ge.extension as extension,
										count(*) as Receive_count,										
										round(sum(gc.carrier_charges),2) as Receive								
										"))
			->get();

		$ret['guest_admin_extension_receive_list'] = $guest_list_by_extension ;
	}

	public function getAdmincallSummaryReceivedDetail($query, $orderby, $sort, $report_by, &$ret ) {
		//extension listreport by
		$extension_list_query =  clone $query;
		$guest_list_by_extension = $extension_list_query->groupBy('se.id')
			->select(DB::raw(" se.extension as extension,
										count(*) as Receive_count,										
										round(sum(ac.carrier_charges),2) as Receive								
										"))
			->get();

		$ret['admin_admin_extension_receive_list'] = $guest_list_by_extension ;
	}

	public function getAdmincallSummaryReceivedGuestDetail($query, $orderby, $sort, $report_by, &$ret ) {
		//extension listreport by
		$extension_list_query =  clone $query;
		$guest_list_by_extension = $extension_list_query->groupBy('se.id')
			->select(DB::raw(" se.extension as extension,
										count(*) as Receive_count,										
										round(sum(ac.total_charges),2) as Receive								
										"))
			->get();

		$ret['admin_guest_extension_receive_list'] = $guest_list_by_extension ;
	}

	public function getAdmincallSummaryData($query, &$ret, &$by_build_data, &$total_value, &$by_building_room_department_data){
		$by_building_query = clone $query;
		//extension report by
		$guest_call_by_extension = clone $by_building_query;
		$guest_call_by_extension_data = $guest_call_by_extension
			->select(DB::raw("'Calls' as name,
                            sum(ac.call_type = 'International') as International,
                            sum(ac.call_type = 'Mobile')  as Mobile,
                            sum(ac.call_type = 'Local') as Local,
                            sum(ac.call_type = 'National') as National,
                            sum(ac.call_type = 'Internal') as Internal,
                            sum(ac.call_type = 'Received') as Incoming,										
                            count(*) as Grand,

                'Duration' as name1,
                            SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as International1,
                            SEC_TO_TIME(ROUND(sum((ac.call_type = 'Mobile') * ac.duration))) as Mobile1,
                            SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as Local1,
                            SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as National1,
                            SEC_TO_TIME(ROUND(sum((ac.call_type = 'Internal') * ac.duration))) as Internal1,
                            SEC_TO_TIME(ROUND(sum((ac.call_type = 'Received') * ac.duration))) as Incoming1,				
                            SEC_TO_TIME(ROUND(sum(ac.duration))) as Grand1,

                'Charges(AED)' as name,
                            round(sum((ac.call_type = 'International') * ac.carrier_charges),2) as International2,
                            round(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as Mobile2,
                            round(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as Local2,
                            round(sum((ac.call_type = 'National') * ac.carrier_charges),2) as National2,
                            round(sum((ac.call_type = 'Internal') * ac.carrier_charges),2) as Internal2,
                            round(sum((ac.call_type = 'Received') * ac.carrier_charges),2) as Incoming2,
                            round(sum((ac.call_type = 'Toll Free') * ac.carrier_charges),2) as Toll2,
                            round(sum(ac.carrier_charges),2) as Grand2
                            "))
			->first();

		// //extension report by
		// $duration_query =  clone $query;
		// $guest_duration_by_extension_data = $duration_query
		// 	->select(DB::raw("'Duration' as name,
		// 								SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as International,
		// 								SEC_TO_TIME(ROUND(sum((ac.call_type = 'Mobile') * ac.duration))) as Mobile,
		// 								SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as Local,
		// 								SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as National,
		// 								SEC_TO_TIME(ROUND(sum((ac.call_type = 'Internal') * ac.duration))) as Internal,
		// 								SEC_TO_TIME(ROUND(sum((ac.call_type = 'Received') * ac.duration))) as Incoming,
		// 								SEC_TO_TIME(ROUND(sum(ac.duration))) as Grand
		// 								"))
		// 	->first();
		// //extension report by
		// $charge_query =  clone $query;
		// $guest_charges_by_extension_data = $charge_query
		// 	->select(DB::raw("'Charges(AED)' as name,
		// 								round(sum((ac.call_type = 'International') * ac.carrier_charges),2) as International,
		// 								round(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as Mobile,
		// 								round(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as Local,
		// 								round(sum((ac.call_type = 'National') * ac.carrier_charges),2) as National,
		// 								round(sum((ac.call_type = 'Internal') * ac.carrier_charges),2) as Internal,
		// 								round(sum((ac.call_type = 'Received') * ac.carrier_charges),2) as Incoming,
		// 								round(sum(ac.carrier_charges),2) as Grand
		// 								"))
		// 	->first();
		//extension listreport by
		$ret['guest_extension_call'] = $guest_call_by_extension_data;

		$guest_duration_by_extension_data = [
					'International' => $guest_call_by_extension_data->International1,
					'Mobile' => $guest_call_by_extension_data->Mobile1,
					'Local' => $guest_call_by_extension_data->Local1,
					'National' => $guest_call_by_extension_data->National1,
					'Internal' => $guest_call_by_extension_data->Internal1,
					'Incoming' => $guest_call_by_extension_data->Incoming1,
					'Grand' => $guest_call_by_extension_data->Grand1,
					];

		$ret['guest_duraion_call'] = (object)$guest_duration_by_extension_data;

		$guest_charges_by_extension_data = [
					'International' => $guest_call_by_extension_data->International2,
					'Mobile' => $guest_call_by_extension_data->Mobile2,
					'Local' => $guest_call_by_extension_data->Local2,
					'National' => $guest_call_by_extension_data->National2,
					'Internal' => $guest_call_by_extension_data->Internal2,
					'Incoming' => $guest_call_by_extension_data->Incoming2,
					'Grand' => $guest_call_by_extension_data->Grand2,
					];
		$ret['guest_charge_call'] = (object)$guest_charges_by_extension_data;

		$total_admin_call = [
					'International' => $guest_call_by_extension_data->International2,
					'Mobile' => $guest_call_by_extension_data->Mobile2,
					'Local' => $guest_call_by_extension_data->Local2,
					'National' => $guest_call_by_extension_data->National2,
					'Internal' => $guest_call_by_extension_data->Internal2,
					'Incoming' => $guest_call_by_extension_data->Incoming2,
					'Toll' => $guest_call_by_extension_data->Toll2,
					'Total_Carrier' => $guest_call_by_extension_data->Grand2,
					];

		$ret['admin_total_value'] = (object)$total_admin_call;

		$extension_list_query =  clone $query;
		$guest_list_by_extension = $extension_list_query->groupBy('ac.extension_id')
			->select(DB::raw(" se.extension as extension, se.description as description, dept.department, 
										sum(ac.call_type = 'International') as International_count,
										round(sum((ac.call_type = 'International') * ac.carrier_charges),2) as International,
										sum(ac.call_type = 'Mobile') as Mobile_count,
										round(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as Mobile,
										sum(ac.call_type = 'Local') as Local_count,
										round(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as Local,
										sum(ac.call_type = 'National') as National_count,																				
										round(sum((ac.call_type = 'National') * ac.carrier_charges),2) as National,
										sum(ac.call_type = 'Internal') as Internal_count,
										round(sum((ac.call_type = 'Internal') * ac.carrier_charges),2) as Internal,
										sum(ac.call_type = 'Received') as Incoming_count,
										round(sum((ac.call_type = 'Received') * ac.carrier_charges),2) as Incoming,
										count(*) as Grand_count,										
										round(sum(ac.carrier_charges),2) as Grand									
										"))
			->get();

		$ret['guest_extension_list'] = $guest_list_by_extension ;

		$admin_call_by_building_data = $by_building_query->groupBy('cs.building_id')
				->select(DB::raw("cb.name,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Toll,
										sum(ac.carrier_charges) as Total_Carrier
										"))
				->get();

		$admin_call_by_building_dept_section_data = [];
		$admin_call_by_building_dept_data = [];
		$admin_call_by_building_dept_summary_data = [];

		$by_building_dept_query = clone $query;


		$by_building_dept_result = $by_building_dept_query
				->groupBy('cs.building_id')
				->groupBy('cs.dept_id')
				->select(DB::raw("cb.name, dept.department,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Toll,
										sum(ac.carrier_charges) as Total_Carrier
										"))
				->get();

		foreach($by_building_dept_result as $row) {
			$building = $row->name;
            $admin_call_by_building_dept_section_data[$building]['department'][] = $row;
		}

		$by_building_dept = clone $query;
		$by_building_dept_summary = $by_building_dept
				->groupBy('cs.building_id')
				->groupBy('cs.dept_id')
				->select(DB::raw("cb.name,cs.building_id, dept.department,count(distinct(se.extension)) as extension_count,
					count(*) as total_calls,SEC_TO_TIME(ROUND(sum(ac.duration))) as duration_total,round(sum(ac.carrier_charges),2) as cost,
					round(sum(ac.carrier_charges),2)  as percent"))
				->get();


	/*	foreach ($by_building_dept_total as $data){
			$build = $row->name;


			if( empty($admin_call_by_building_dept_total[$build]) ) {
				$admin_call_by_building_dept_total[$build] = [];
				$admin_call_by_building_dept_total[$build]['total'] = [];
			}

	$admin_call_by_building_dept_total[$build]['total'][] = $row;
		}

*/
		$build_tot = clone $query;
		$build_total =  $build_tot
						->groupBy('cs.building_id')
						->select(DB::raw('cb.name , round(sum(ac.carrier_charges),2) as grand, SEC_TO_TIME(ROUND(sum(ac.duration))) as duration'))
						->get();
		foreach($build_total as $row1) {
            foreach($by_building_dept_summary as $row) {
                $build = $row->name;
            //	$by_building_dept = clone $query;
            //	$by_building_query = clone $by_building_dept;
            //	$by_building_dept_total = $by_building_query
            //			//->groupBy('cs.building_id')
            //			->select(DB::raw('cb.name , round(sum(ac.carrier_charges),2) as grand, SEC_TO_TIME(ROUND(sum(ac.duration))) as duration'))
            //			->where('cs.building_id',$row->building_id)
            //			->first();

                if( empty($admin_call_by_building_dept_summary_data[$build]) ) {
                    $admin_call_by_building_dept_summary_data[$build] = [];
                    $admin_call_by_building_dept_summary_data[$build]['department'] = [];
                }
                if ($row1->name == $build){
                    $admin_call_by_building_dept_summary_data[$build]['total'] = $row1->grand;
                    $admin_call_by_building_dept_summary_data[$build]['duration'] = $row1->duration;
                    $admin_call_by_building_dept_summary_data[$build]['department'][] = $row;
                }

            }
		}

		//$ret['by_building_dept_total'] = $admin_call_by_building_dept_total;
		//$ret['by_building_dept_total'] = $by_building_dept_total->grand;
		//$ret['by_building_dept_duration'] = $by_building_dept_total->duration;


		$by_building_section_query = clone $query;

		$result = $by_building_section_query
				->groupBy('cs.building_id')
				->groupBy('cs.id')
				->select(DB::raw("cb.name,dept.department, cs.section,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Toll,
										sum(ac.carrier_charges) as Total_Carrier
										"))
				->get();

/*
		foreach($result as $row)
		{
			$building = $row->name;
			if( empty($admin_call_by_building_dept_section_data[$building]) ) {
				$admin_call_by_building_dept_section_data[$building] = [];
			}

			if( empty($admin_call_by_building_dept_section_data[$building]['section']) ) {
				$admin_call_by_building_dept_section_data[$building]['section'] = [];
			}
            $admin_call_by_building_dept_section_data[$building]['section'][] = $row;
		}
*/
		foreach($result as $row) {
			$building = $row->name;
			$department = $row->department;

            $admin_call_by_building_dept_section_data[$building]['depart'][$department]['section'][] = $row;
		}

		$ret['admin_by_build_data'] = $admin_call_by_building_data;
		$ret['admin_by_build_dept_summary_data'] = $admin_call_by_building_dept_summary_data;
		$ret['admin_by_build_dept_section_data'] = $admin_call_by_building_dept_section_data;
		//$ret['admin_by_build_dept_data'] = $admin_call_by_building_dept_data;

		$admin_call_by_building_department_query = clone $query;
		$result = $admin_call_by_building_department_query
				->orderBy('cs.building_id')
				->orderBy('cs.dept_id')
				->select(DB::raw('ac.*, cb.name, se.extension, cd.country, cd.code, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename,se.description, dept.department'))
				->get();

		foreach($result as $row) {
			$building = $row->name;
			$department = $row->department;

            $by_building_room_department_data[$building]['admin'][$department]['detail'][] = $row;
		}

//		$admin_call_summary_by_building_department_section_query = clone $query;
//		$result = $admin_call_summary_by_building_department_section_query
//				->groupBy('cs.building_id')
//				->groupBy('cs.dept_id')
//				->groupBy('cs.id')
//				->select(DB::raw("dept.department, cb.name, cs.section,
//								sum((ac.call_type = 'International') * ac.carrier_charges) as International,
//								sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
//								sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
//								sum((ac.call_type = 'National') * ac.carrier_charges) as National,
//								sum((ac.call_type = 'Internal') * ac.carrier_charges) as Internal,
//								sum((ac.call_type = 'Received') * ac.carrier_charges) as Received,
//								sum(ac.carrier_charges) as Total
//									"))
//				->get();
//
//		foreach($result as $row)
//		{
//			$building = $row->name;
//			$department = $row->department;
//			if( empty($by_building_room_department_data[$building]) ) {
//				$by_building_room_department_data[$building] = [];
//				$by_building_room_department_data[$building]['admin'] = [];
//			}
//			if( empty($by_building_room_department_data[$building]['admin'][$department]) ) {
//				$by_building_room_department_data[$building]['admin'][$department] = [];
//			}
//			if( empty($by_building_room_department_data[$building]['admin'][$department]['section']) ) {
//				$by_building_room_department_data[$building]['admin'][$department]['section'] = [];
//			}
//          $by_building_room_department_data[$building]['admin'][$department]['section'][] = $row;
//		}


		// $admin_call_summary_by_building_department_query = clone $query;
		// $result = $admin_call_summary_by_building_department_query
		// 		->groupBy('cs.building_id')
		// 		->groupBy('cs.dept_id')
		// 		->select(DB::raw("dept.department, cb.name, sum(ac.carrier_charges) as carrier_charges
		// 							"))
		// 		->get();

		foreach($by_building_dept_result as $row) {
			$building = $row->name;
			$department = $row->department;
			if( empty($by_building_room_department_data[$building]) ) {
				$by_building_room_department_data[$building] = [];
				$by_building_room_department_data[$building]['admin'] = [];

			}

			$row->carrier_charges = $row->Total_Carrier;

			$by_building_room_department_data[$building]['admin'][$department]['summary'] = $row;
		}

		foreach($admin_call_by_building_data as $row) {
			if(empty($by_build_data[$row->name])) {
				$by_build_data[$row->name] = [];
				$by_build_data[$row->name]['name'] = $row->name;
				$by_build_data[$row->name]['International'] = 0;
				$by_build_data[$row->name]['Mobile'] = 0;
				$by_build_data[$row->name]['Local'] = 0;
				$by_build_data[$row->name]['National'] = 0;
				$by_build_data[$row->name]['Toll'] = 0;
				$by_build_data[$row->name]['Total_Carrier'] = 0;
				$by_build_data[$row->name]['Total'] = 0;
				$by_build_data[$row->name]['Profit'] = 0;
			}

			$by_build_data[$row->name]['International'] += $row->International;
			$by_build_data[$row->name]['Mobile'] += $row->Mobile;
			$by_build_data[$row->name]['Local'] += $row->Local;
			$by_build_data[$row->name]['National'] += $row->National;
			$by_build_data[$row->name]['Toll'] += $row->Toll;
			$by_build_data[$row->name]['Total_Carrier'] += $row->Total_Carrier;
			$by_build_data[$row->name]['Total'] += $row->Total_Carrier;

			$total_value['International'] += $row->International;
			$total_value['Mobile'] += $row->Mobile;
			$total_value['Local'] += $row->Local;
			$total_value['National'] += $row->National;
			$total_value['Toll'] += $row->Toll;
			$total_value['Total_Carrier'] += $row->Total_Carrier;
			$total_value['Total'] += $row->Total_Carrier;
		}
	}

	public function getBusinessCentrecallSummaryData($query, &$ret, &$by_build_data, &$total_value, &$by_building_room_department_data)
	{
		$by_building_query = clone $query;
		//extension report by
		$business_centre_call_by_extension = clone $by_building_query;
		$business_centre_call_by_extension_data = $business_centre_call_by_extension
			->select(DB::raw("'Calls' as name,
                            sum(cc.call_type = 'International') as International,
                            sum(cc.call_type = 'Mobile')  as Mobile,
                            sum(cc.call_type = 'Local') as Local,
                            sum(cc.call_type = 'National') as National,
                            sum(cc.call_type = 'Internal') as Internal,
                            sum(cc.call_type = 'Received') as Incoming,										
                            count(*) as Grand,

                'Duration' as name1,
                            SEC_TO_TIME(ROUND(sum((cc.call_type = 'International') * cc.duration))) as International1,
                            SEC_TO_TIME(ROUND(sum((cc.call_type = 'Mobile') * cc.duration))) as Mobile1,
                            SEC_TO_TIME(ROUND(sum((cc.call_type = 'Local') * cc.duration))) as Local1,
                            SEC_TO_TIME(ROUND(sum((cc.call_type = 'National') * cc.duration))) as National1,
                            SEC_TO_TIME(ROUND(sum((cc.call_type = 'Internal') * cc.duration))) as Internal1,
                            SEC_TO_TIME(ROUND(sum((cc.call_type = 'Received') * cc.duration))) as Incoming1,
                            SEC_TO_TIME(ROUND(sum(cc.duration))) as Grand1,

                'Charges(AED)' as name,
                            round(sum((cc.call_type = 'International') * cc.carrier_charges),2) as International2,
                            round(sum((cc.call_type = 'Mobile') * cc.carrier_charges),2) as Mobile2,
                            round(sum((cc.call_type = 'Local') * cc.carrier_charges),2) as Local2,
                            round(sum((cc.call_type = 'National') * cc.carrier_charges),2) as National2,
                            round(sum((cc.call_type = 'Internal') * cc.carrier_charges),2) as Internal2,
                            round(sum((cc.call_type = 'Received') * cc.carrier_charges),2) as Incoming2,
                            round(sum((cc.call_type = 'Toll Free') * cc.carrier_charges),2) as Toll2,
                            round(sum(cc.carrier_charges),2) as Grand2,
                            sum(cc.hotel_charges) as Total_Hotel2,
                            sum(cc.total_charges) as Total2	
                            "))
			->first();
		//extension report by
		// $duration_query =  clone $query;
		// $business_centre_duration_by_extension_data = $duration_query
		// 	->select(DB::raw("'Duration' as name,
		// 								SEC_TO_TIME(ROUND(sum((cc.call_type = 'International') * cc.duration))) as International,
		// 								SEC_TO_TIME(ROUND(sum((cc.call_type = 'Mobile') * cc.duration))) as Mobile,
		// 								SEC_TO_TIME(ROUND(sum((cc.call_type = 'Local') * cc.duration))) as Local,
		// 								SEC_TO_TIME(ROUND(sum((cc.call_type = 'National') * cc.duration))) as National,
		// 								SEC_TO_TIME(ROUND(sum((cc.call_type = 'Internal') * cc.duration))) as Internal,
		// 								SEC_TO_TIME(ROUND(sum((cc.call_type = 'Received') * cc.duration))) as Incoming,
		// 								SEC_TO_TIME(ROUND(sum(cc.duration))) as Grand
		// 								"))
		// 	->first();
		// //extension report by
		// $charge_query =  clone $query;
		// $business_centre_charges_by_extension_data = $charge_query
		// 	->select(DB::raw("'Charges(AED)' as name,
		// 								round(sum((cc.call_type = 'International') * cc.carrier_charges),2) as International,
		// 								round(sum((cc.call_type = 'Mobile') * cc.carrier_charges),2) as Mobile,
		// 								round(sum((cc.call_type = 'Local') * cc.carrier_charges),2) as Local,
		// 								round(sum((cc.call_type = 'National') * cc.carrier_charges),2) as National,
		// 								round(sum((cc.call_type = 'Internal') * cc.carrier_charges),2) as Internal,
		// 								round(sum((cc.call_type = 'Received') * cc.carrier_charges),2) as Incoming,
		// 								round(sum(cc.carrier_charges),2) as Grand
		// 								"))
		// 	->first();
		//extension listreport by

		$ret['business_centre_extension_call'] = $business_centre_call_by_extension_data;
		// $ret['business_centre_duraion_call'] = $business_centre_duration_by_extension_data ;
		// $ret['business_centre_charge_call'] = $business_centre_charges_by_extension_data ;

		$business_centre_duration_by_extension_data = [
					'International' => $business_centre_call_by_extension_data->International1,
					'Mobile' => $business_centre_call_by_extension_data->Mobile1,
					'Local' => $business_centre_call_by_extension_data->Local1,
					'National' => $business_centre_call_by_extension_data->National1,
					'Internal' => $business_centre_call_by_extension_data->Internal1,
					'Incoming' => $business_centre_call_by_extension_data->Incoming1,
					'Grand' => $business_centre_call_by_extension_data->Grand1
					];

		$ret['business_centre_duraion_call'] = (object)$business_centre_duration_by_extension_data;

		$business_centre_charges_by_extension_data = [
					'International' => $business_centre_call_by_extension_data->International2,
					'Mobile' => $business_centre_call_by_extension_data->Mobile2,
					'Local' => $business_centre_call_by_extension_data->Local2,
					'National' => $business_centre_call_by_extension_data->National2,
					'Internal' => $business_centre_call_by_extension_data->Internal2,
					'Incoming' => $business_centre_call_by_extension_data->Incoming2,
					'Grand' => $business_centre_call_by_extension_data->Grand2
					];
		$ret['business_centre_charge_call'] = (object)$business_centre_charges_by_extension_data;

		$total_business_centre_call = [
					'International' => $business_centre_call_by_extension_data->International2,
					'Mobile' => $business_centre_call_by_extension_data->Mobile2,
					'Local' => $business_centre_call_by_extension_data->Local2,
					'National' => $business_centre_call_by_extension_data->National2,
					'Internal' => $business_centre_call_by_extension_data->Internal2,
					'Incoming' => $business_centre_call_by_extension_data->Incoming2,
					'Toll' => $business_centre_call_by_extension_data->Toll2,
					'Total_Carrier' => $business_centre_call_by_extension_data->Grand2,
					'Total_Hotel' => $business_centre_call_by_extension_data->Total_Hotel2,
					'Total' => $business_centre_call_by_extension_data->Total2,
					];

		$ret['business_centre_total_value'] = (object)$total_business_centre_call;

		$extension_list_query =  clone $query;
		$business_centre_list_by_extension = $extension_list_query->groupBy('cc.extension_id')
			->select(DB::raw(" se.extension as extension,
                sum(cc.call_type = 'International') as International_count,
                round(sum((cc.call_type = 'International') * cc.carrier_charges),2) as International,
                sum(cc.call_type = 'Mobile') as Mobile_count,
                round(sum((cc.call_type = 'Mobile') * cc.carrier_charges),2) as Mobile,
                sum(cc.call_type = 'Local') as Local_count,
                round(sum((cc.call_type = 'Local') * cc.carrier_charges),2) as Local,
                sum(cc.call_type = 'National') as National_count,																				
                round(sum((cc.call_type = 'National') * cc.carrier_charges),2) as National,
                sum(cc.call_type = 'Internal') as Internal_count,
                round(sum((cc.call_type = 'Internal') * cc.carrier_charges),2) as Internal,
                sum(cc.call_type = 'Received') as Incoming_count,
                round(sum((cc.call_type = 'Received') * cc.carrier_charges),2) as Incoming,
                count(*) as Grand_count,										
                round(sum(cc.carrier_charges),2) as Grand									
                "))
			->get();

		$ret['business_centre_extension_list'] = $business_centre_list_by_extension ;

		$business_centre_call_by_building_data = $by_building_query->groupBy('cs.building_id')
			->select(DB::raw("cb.name,
                sum((cc.call_type = 'International') * cc.carrier_charges) as International,
                sum((cc.call_type = 'Mobile') * cc.carrier_charges) as Mobile,
                sum((cc.call_type = 'Local') * cc.carrier_charges) as Local,
                sum((cc.call_type = 'National') * cc.carrier_charges) as National,
                sum((cc.call_type = 'Toll Free') * cc.carrier_charges) as Toll,
                sum(cc.carrier_charges) as Total_Carrier,
                sum(cc.hotel_charges) as Total_Hotel,
                sum(cc.total_charges) as Total										
                "))
			->get();

		$business_centre_call_by_building_dept_section_data = [];

		$by_building_dept_query = clone $query;

		$by_building_dept_result = $by_building_dept_query
			->groupBy('cs.building_id')
			->groupBy('cs.dept_id')
			->select(DB::raw("cb.name, dept.department,
                sum((cc.call_type = 'International') * cc.carrier_charges) as International,
                sum((cc.call_type = 'Mobile') * cc.carrier_charges) as Mobile,
                sum((cc.call_type = 'Local') * cc.carrier_charges) as Local,
                sum((cc.call_type = 'National') * cc.carrier_charges) as National,
                sum((cc.call_type = 'Toll Free') * cc.carrier_charges) as Toll,											
                sum(cc.carrier_charges) as Total_Carrier,
                sum(cc.hotel_charges) as Total_Hotel,
                sum(cc.total_charges) as Total
                "))
			->get();

		foreach($by_building_dept_result as $row)
		{
			$building = $row->name;
            $business_centre_call_by_building_dept_section_data[$building]['department'][] = $row;
		}

		$by_building_section_query = clone $query;

		$result = $by_building_section_query
			->groupBy('cs.building_id')
			->groupBy('cs.id')
			->select(DB::raw("cb.name, cs.section,
                    sum((cc.call_type = 'International') * cc.carrier_charges) as International,
                    sum((cc.call_type = 'Mobile') * cc.carrier_charges) as Mobile,
                    sum((cc.call_type = 'Local') * cc.carrier_charges) as Local,
                    sum((cc.call_type = 'National') * cc.carrier_charges) as National,
                    sum((cc.call_type = 'Toll Free') * cc.carrier_charges) as Toll,											
                    sum(cc.carrier_charges) as Total_Carrier,
                    sum(cc.hotel_charges) as Total_Hotel,
                    sum(cc.total_charges) as Total
                    "))
			->get();

		foreach($result as $row)
		{
			$building = $row->name;
            $business_centre_call_by_building_dept_section_data[$building]['section'][] = $row;
		}

		$ret['business_centre_by_build_data'] = $business_centre_call_by_building_data;
		$ret['business_centre_by_build_dept_section_data'] = $business_centre_call_by_building_dept_section_data;


		$business_centre_call_by_building_department_query = clone $query;
		$result = $business_centre_call_by_building_department_query
			->orderBy('cs.building_id')
			->orderBy('cs.dept_id')
			->select(DB::raw('cc.*, cb.name, se.extension, cd.country, cd.code, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, dept.department'))
			->get();

		foreach($result as $row) {
			$building = $row->name;
			$department = $row->department;

            $by_building_room_department_data[$building]['business_centre'][$department]['detail'][] = $row;
		}

		foreach($by_building_dept_result as $row) {
			$building = $row->name;
			$department = $row->department;
			$row->carrier_charges = $row->Total_Carrier;
			$row->hotel_charges = $row->Total_Hotel;
			$row->total_charges = $row->Total;

			if( empty($by_building_room_department_data[$building]) ) {
				$by_building_room_department_data[$building] = [];
				$by_building_room_department_data[$building]['business_centre'] = [];

			}
			$by_building_room_department_data[$building]['business_centre'][$department]['summary'] = $row;
		}

		foreach($business_centre_call_by_building_data as $row) {
			if(empty($by_build_data[$row->name]))
			{
				$by_build_data[$row->name] = [];
				$by_build_data[$row->name]['name'] = $row->name;
				$by_build_data[$row->name]['International'] = 0;
				$by_build_data[$row->name]['Mobile'] = 0;
				$by_build_data[$row->name]['National'] = 0;
				$by_build_data[$row->name]['Toll'] = 0;
				$by_build_data[$row->name]['Local'] = 0;
				$by_build_data[$row->name]['Total_Carrier'] = 0;
				$by_build_data[$row->name]['Total'] = 0;
				$by_build_data[$row->name]['Profit'] = 0;
			}

			$by_build_data[$row->name]['International'] += $row->International;
			$by_build_data[$row->name]['Mobile'] += $row->Mobile;
			$by_build_data[$row->name]['Local'] += $row->Local;
			$by_build_data[$row->name]['National'] += $row->National;
			$by_build_data[$row->name]['Toll'] += $row->Toll;
			$by_build_data[$row->name]['Total_Carrier'] += $row->Total_Carrier;
			$by_build_data[$row->name]['Total'] += $row->Total;
			$by_build_data[$row->name]['Profit'] += ($row->Total - $row->Total_Carrier);

            $total_value['International'] += $row->International;
			$total_value['Mobile'] += $row->Mobile;
			$total_value['Local'] += $row->Local;
			$total_value['National'] += $row->National;
			$total_value['Toll'] += $row->Toll;
			$total_value['Total_Carrier'] += $row->Total_Carrier;
			$total_value['Total'] += $row->Total;
			$total_value['Profit'] += ($row->Total - $row->Total_Carrier);
		}
	}

	public function getBuildingCallDateSummary($guest_query, $admin_query, $business_centre_query, &$ret) {
		$summary_by_building_calldate_data = [];
		if( !empty($guest_query) ) {
			$result = $guest_query
					->groupBy('building_id')
					->groupBy('call_date')
					->select(DB::raw("cb.name, cf.bldg_id as building_id, gc.call_date,
										sum((gc.call_type = 'International') * gc.total_charges) as International,
										sum((gc.call_type = 'Mobile') * gc.total_charges) as Mobile,
										sum((gc.call_type = 'Local') * gc.total_charges) as Local,
										sum((gc.call_type = 'National') * gc.total_charges) as National,
										sum(gc.carrier_charges) as Total_Carrier,
										sum(gc.hotel_charges) as Total_Hotel,
										sum(gc.total_charges) as Total
										"))
					->get();

			foreach($result as $row) {
				$building = $row->name;
                $summary_by_building_calldate_data[$building]['guest'][] = $row;
			}
		}

		if( !empty($business_centre_query) ) {
			$result = $business_centre_query
				->groupBy('cs.building_id')
				->groupBy('cc.call_date')
				->select(DB::raw("cb.name, cc.call_date,
										sum((cc.call_type = 'International') * cc.carrier_charges) as International,
										sum((cc.call_type = 'Mobile') * cc.carrier_charges) as Mobile,
										sum((cc.call_type = 'Local') * cc.carrier_charges) as Local,
										sum((cc.call_type = 'National') * cc.carrier_charges) as National,
										sum(cc.carrier_charges) as Total_Carrier,
										sum(cc.hotel_charges) as Total_Hotel,
										sum(cc.total_charges) as Total
												"))
				->get();

			foreach($result as $row) {
				$building = $row->name;
                $summary_by_building_calldate_data[$building]['business_centre'][] = $row;
			}
		}

		if( !empty($admin_query) ) {
			$result = $admin_query
					->groupBy('cs.building_id')
					->groupBy('ac.call_date')
					->select(DB::raw("cb.name, ac.call_date,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum(ac.carrier_charges) as Total_Carrier
												"))
					->get();

			foreach($result as $row) {
				$building = $row->name;
                $summary_by_building_calldate_data[$building]['admin'][] = $row;
			}
		}

		$ret['summary_by_building_calldate_data'] = $summary_by_building_calldate_data;
	}

	public function getClassifyCallDate($query, &$ret,$currency) {
		$calldate_data = [];
		if( !empty($query) ) {
			$datelist_query = clone $query;
			$datelist = $datelist_query
				->groupBy('ac.call_date')
				->select(DB::raw("ac.*"))
				->get();
			$count = 0 ;
			foreach ($datelist as $row) {
				$calldate_data[$count] = clone $row;
				$date = $row->call_date;
				$calldate_query = clone $query;
				$calldate = $calldate_query
					->where('ac.call_date', $date)
					->orderby('ac.start_time')
					->select(DB::raw("se.extension, CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
							ac.call_date as calldate,ac.start_time as calltime,SEC_TO_TIME(ROUND(ac.duration)) as duration,
							ac.called_no  as dialednumber, cd.country as destination, ac.carrier_charges as callcost,
							ac.approval as status, ac.comment"))
					->get();
				$calldate_data[$count]->date = $date;
				$calldate_data[$count]->calldate = $calldate;
				$calltotal_query = clone $query;
				$calltotal = $calltotal_query
					->where('ac.call_date', $date)
					->select(DB::raw("count(*) as calltotal, round(sum(ac.carrier_charges),2) as callcost"))
					->first();
				$calldate_data[$count]->calltotal = $calltotal;
				$calls_query = clone $query;
				$calls = $calls_query
					->where('ac.call_date', $date)
					->select(DB::raw("'Calls' as calls, 
					 		sum(ac.call_type = 'International') as international,
					 		sum(ac.call_type = 'Local') as local,
					 		sum(ac.call_type = 'National') as national,
					 		count(*) as total"))
					->first();
				$calldate_data[$count]->calls = $calls;
				$duration_query = clone $query;
				$duration = $duration_query
					->where('ac.call_date', $date)
					->select(DB::raw("'Duration' as duration, 
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as international,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as local,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as national,
					 		SEC_TO_TIME(ROUND(sum(ac.duration))) as total"))
					->first();
				$calldate_data[$count]->duration = $duration;
				$cost_query = clone $query;
				$callcost = $cost_query
					->where('ac.call_date', $date)
					->select(DB::raw("'Call Cost ($currency)' as callcost, 
					 		ROUND(sum((ac.call_type = 'International') * ac.carrier_charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.carrier_charges),2) as national,
					 		ROUND(sum(ac.carrier_charges),2) as total"))
					->first();
				$calldate_data[$count]->callcost = $callcost;
				$count++;
			}
		}
		$ret['detailed'] = $calldate_data;
	}

	public function getClassifyCallStatusLandLine($dapart_query,&$by_dept_data, &$total_value,&$ret, $report_type) {

        $deptlist_query = clone $dapart_query;
        $departlist = $deptlist_query
            ->groupBy('dept.id')

            ->select(DB::raw("'Total' as totalname, dept.id as depart_id, dept.department as depart_name,
                        sum(ac.approval = 'Approved') as approvedcount,
                        ROUND(sum((ac.approval = 'Approved') * ac.carrier_charges),2) as approvedcharge,
                        sum(ac.approval = 'Rejected') as unapprovedcount,
                        ROUND(sum((ac.approval = 'Rejected') * ac.carrier_charges),2) as unapprovedcharge,
                        sum(ac.approval = 'Waiting For Approval')+sum(ac.approval = 'Returned') as awaitingcount,
                        ROUND((sum((ac.approval = 'Waiting For Approval') * ac.carrier_charges)+sum((ac.approval = 'Returned') * ac.carrier_charges)),2) as awaitingcharge,
                        sum(ac.classify = 'Unclassified') as unmarkedcount,
                        ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unmarkedcharge,
                        count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcharge"))
                        ->get();

        foreach($departlist as $row) {
            if(empty($by_dept_data[$row->depart_name])) {
                $by_dept_data[$row->depart_name] = [];
                $by_dept_data[$row->depart_name]['name'] = $row->depart_name;
                $by_dept_data[$row->depart_name]['unmarkedcount'] = 0;
                $by_dept_data[$row->depart_name]['unmarkedcharge'] = 0;
                $by_dept_data[$row->depart_name]['approvedcount'] = 0;
                $by_dept_data[$row->depart_name]['approvedcharge'] = 0;
                $by_dept_data[$row->depart_name]['unapprovedcount'] = 0;
                $by_dept_data[$row->depart_name]['unapprovedcharge'] = 0;
                $by_dept_data[$row->depart_name]['awaitingcount'] = 0;
                $by_dept_data[$row->depart_name]['awaitingcharge'] = 0;
            }

            $by_dept_data[$row->depart_name]['unmarkedcount'] += $row->unmarkedcount;
            $by_dept_data[$row->depart_name]['unmarkedcharge'] += $row->unmarkedcharge;

            $by_dept_data[$row->depart_name]['approvedcount'] += $row->approvedcount;
            $by_dept_data[$row->depart_name]['approvedcharge'] += $row->approvedcharge;

            $by_dept_data[$row->depart_name]['unapprovedcount'] += $row->unapprovedcount;
            $by_dept_data[$row->depart_name]['unapprovedcharge'] += $row->unapprovedcharge;

            $by_dept_data[$row->depart_name]['awaitingcount'] += $row->awaitingcount;
            $by_dept_data[$row->depart_name]['awaitingcharge'] += $row->awaitingcharge;

            $total_value['unmarkedcount'] += $row->unmarkedcount;
            $total_value['unmarkedcharge'] += $row->unmarkedcharge;
            $total_value['approvedcount'] += $row->approvedcount;
            $total_value['approvedcharge'] += $row->approvedcharge;
            $total_value['unapprovedcount'] += $row->unapprovedcount;
            $total_value['unapprovedcharge'] += $row->unapprovedcount;
            $total_value['awaitingcount'] += $row->awaitingcount;
            $total_value['awaitingcharge'] += $row->awaitingcharge;
        }
        //echo json_encode($summary_data);
	}

	public function getClassifyCostLandLine($dapart_query,&$by_dept_data,&$ret, $report_type) {

		$deptlist_query = clone $dapart_query;
		$departlist = $deptlist_query
			->groupBy('dept.id')
			->groupBy('month')
			->select(DB::raw("MONTH(ac.call_date) as month, dept.id as depart_id, dept.department as depart_name,
			ROUND(sum((ac.classify = 'Personal') * ac.carrier_charges),2) as personal,
			ROUND(sum((ac.classify = 'Business') * ac.carrier_charges),2) as business,ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unclassify,
			count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcost"))

			->get();

		foreach($departlist as $row) {

		    if(empty($by_dept_data[$row->month][$row->depart_name])) {
                $by_dept_data[$row->month][$row->depart_name] = [];
                $by_dept_data[$row->month][$row->depart_name]['name'] = $row->depart_name;
                $by_dept_data[$row->month][$row->depart_name]['month'] = $row->month;
                $by_dept_data[$row->month][$row->depart_name]['personal'] = 0;
                $by_dept_data[$row->month][$row->depart_name]['business'] = 0;
                $by_dept_data[$row->month][$row->depart_name]['unclassified'] = 0;
		    }

			$by_dept_data[$row->month][$row->depart_name]['personal'] += $row->personal;
			$by_dept_data[$row->month][$row->depart_name]['business'] += $row->business;
			$by_dept_data[$row->month][$row->depart_name]['unclassified'] += $row->unclassify;
		}
		//echo json_encode($by_dept_data);
	}

	public function getClassifyCallStatusMobile($mobile_query,&$by_dept_data,&$total_value, &$ret, $report_type) {

        $destlist_query = clone $mobile_query;
        $destlist = $destlist_query
            ->groupBy('dept.id')
            ->select(DB::raw("'Total' as totalname, dept.id as depart_id, dept.department as depart_name,
                        sum(ac.approval = 'Approved') as approvedcount,
                        ROUND(sum((ac.approval = 'Approved') * ac.charges),2) as approvedcharge,
                        sum(ac.approval = 'Rejected') as unapprovedcount,
                        ROUND(sum((ac.approval = 'Rejected') * ac.charges),2) as unapprovedcharge,
                        sum(ac.approval = 'Waiting For Approval')+sum(ac.approval = 'Returned') as awaitingcount,
                        ROUND((sum((ac.approval = 'Waiting For Approval') * ac.charges)+sum((ac.approval = 'Returned') * ac.charges)),2) as awaitingcharge,
                        sum(ac.classify = 'Unclassified') as unmarkedcount,
                        ROUND(sum((ac.classify = 'Unclassified') * ac.charges),2) as unmarkedcharge,
                        count(*) as totalcount,	ROUND(sum(ac.charges),2) as totalcharge"))
            ->get();

        foreach($destlist as $row) {
            if(empty($by_dept_data[$row->depart_name])) {
                $by_dept_data[$row->depart_name] = [];
                $by_dept_data[$row->depart_name]['name'] = $row->depart_name;
                $by_dept_data[$row->depart_name]['unmarkedcount'] = 0;
                $by_dept_data[$row->depart_name]['unmarkedcharge'] = 0;
                $by_dept_data[$row->depart_name]['approvedcount'] = 0;
                $by_dept_data[$row->depart_name]['approvedcharge'] = 0;
                $by_dept_data[$row->depart_name]['unapprovedcount'] = 0;
                $by_dept_data[$row->depart_name]['unapprovedcharge'] = 0;
                $by_dept_data[$row->depart_name]['awaitingcount'] = 0;
                $by_dept_data[$row->depart_name]['awaitingcharge'] = 0;

            }

            $by_dept_data[$row->depart_name]['unmarkedcount'] += $row->unmarkedcount;
            $by_dept_data[$row->depart_name]['unmarkedcharge'] += $row->unmarkedcharge;

            $by_dept_data[$row->depart_name]['approvedcount'] += $row->approvedcount;
            $by_dept_data[$row->depart_name]['approvedcharge'] += $row->approvedcharge;

            $by_dept_data[$row->depart_name]['unapprovedcount'] += $row->unapprovedcount;
            $by_dept_data[$row->depart_name]['unapprovedcharge'] += $row->unapprovedcharge;

            $by_dept_data[$row->depart_name]['awaitingcount'] += $row->awaitingcount;
            $by_dept_data[$row->depart_name]['awaitingcharge'] += $row->awaitingcharge;

            $total_value['unmarkedcount'] += $row->unmarkedcount;
            $total_value['unmarkedcharge'] += $row->unmarkedcharge;
            $total_value['approvedcount'] += $row->approvedcount;
            $total_value['approvedcharge'] += $row->approvedcharge;
            $total_value['unapprovedcount'] += $row->unapprovedcount;
            $total_value['unapprovedcharge'] += $row->unapprovedcount;
            $total_value['awaitingcount'] += $row->awaitingcount;
            $total_value['awaitingcharge'] += $row->awaitingcharge;
        }
        //echo json_encode($summary_data);
	}

	public function getClassifyCostMobile($mobile_query,&$by_dept_data, &$ret, $report_type) {
		$summary_data = [];

        $destlist_query = clone $mobile_query;
        $destlist = $destlist_query
            ->groupBy('dept.id')
            ->groupBy('month')
            ->select(DB::raw("MONTH(ac.date) as month, dept.id as depart_id, dept.department as depart_name,
                        ROUND(sum((ac.classify = 'Personal') * ac.charges),2) as personal,
                        ROUND(sum((ac.classify = 'Business') * ac.charges),2) as business,ROUND(sum((ac.classify = 'Unclassified') * ac.charges),2) as unclassify,
                        count(*) as totalcount,	ROUND(sum(ac.charges),2) as totalcost"))
            ->get();

		foreach($destlist as $row) {
		    if(empty($by_dept_data[$row->month][$row->depart_name])) {
                $by_dept_data[$row->month][$row->depart_name] = [];
                $by_dept_data[$row->month][$row->depart_name]['name'] = $row->depart_name;
                $by_dept_data[$row->month][$row->depart_name]['month'] = $row->month;
                $by_dept_data[$row->month][$row->depart_name]['personal'] = 0;
                $by_dept_data[$row->month][$row->depart_name]['business'] = 0;
                $by_dept_data[$row->month][$row->depart_name]['unclassified'] = 0;
            }

            $by_dept_data[$row->month][$row->depart_name]['personal'] += $row->personal;
            $by_dept_data[$row->month][$row->depart_name]['business'] += $row->business;
            $by_dept_data[$row->month][$row->depart_name]['unclassified'] += $row->unclassify;
		}
		//echo json_encode($by_dept_data);
	}

	public function getClassifyDepart($query, &$ret, $report_type,$currency) {
		$depart_data = [];
		if($report_type == 'Summary') {
			$datelist_query = clone $query;
			$departlist = $datelist_query
				->groupBy('dept.id')
				->groupBy('se.extension')
				->groupBy('cs.id')
				->select(DB::raw("'Total' as totalname, dept.id as depart_id, dept.department as depart_name,
							se.extension as extension, CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,sum(ac.approval = 'Approved') as approvedcount,
							ROUND(sum((ac.approval = 'Approved') * ac.carrier_charges),2) as approvedcharge,
							sum(ac.approval = 'Rejected') as unapprovedcount,
							ROUND(sum((ac.approval = 'Rejected') * ac.carrier_charges),2) as unapprovedcharge,
							sum(ac.approval = 'Waiting For Approval')+sum(ac.approval = 'Returned') as awaitingcount,
							ROUND((sum((ac.approval = 'Waiting For Approval') * ac.carrier_charges)+sum((ac.approval = 'Returned') * ac.carrier_charges)),2) as awaitingcharge,
							sum(ac.classify = 'Unclassified') as unmarkedcount,
							ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unmarkedcharge,
							count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcharge"))
				//->distinct()
							->get();
			$ret['summary'] = $departlist;
			//echo json_encode($departlist);
		}

		if($report_type == 'Detailed') {
			if (!empty($query)) {
				$datelist_query = clone $query;
				$departlist = $datelist_query
					->groupBy('dept.id')
					->select(DB::raw("dept.id as depart_id, dept.department as depart_name,
							ROUND(sum((ac.call_type = 'International') * ac.carrier_charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as mobile,
					 		ROUND(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.carrier_charges),2) as national,
					 		ROUND(sum(ac.carrier_charges),2) as total"))
					->get();
				$sectionlist_query = clone $query;
				$sectionlist = $sectionlist_query
					->groupBy('dept.id')
					->groupBy('cs.id')
					->select(DB::raw("dept.id as depart_id, dept.department as depart_name,cs.id as section_id , cs.section, 
							ROUND(sum((ac.call_type = 'International') * ac.carrier_charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as mobile,
					 		ROUND(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.carrier_charges),2) as national,
					 		ROUND(sum(ac.carrier_charges),2) as totalcharge ,count(*) as totalcount"))
					->get();
				$extensionlist_query = clone $query;
				$extensionlist = $extensionlist_query
					->groupBy('dept.id')
					->groupBy('cs.id')
					->groupBy('ac.extension_id')
					->groupBy('ac.call_date')
					->groupby('ac.start_time')
					->select(DB::raw("dept.id as depart_id, dept.department as depart_name,
							cs.id as section_id , cs.section, se.id as extension_id, se.extension,
							CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
							ac.call_date, ac.start_time as calltime, SEC_TO_TIME(ROUND(ac.duration)) as duration,
							ac.called_no  as dialednumber,cd.country as destination,ac.carrier_charges as callcost,
							ac.classify,ac.approval as status, ac.comment"))
					->get();
				$department_dept_section_extension = [];
				foreach($departlist as $row) {
					$department = $row->depart_name;
					if( empty($department_dept_section_extension[$department]) ) {
						$department_dept_section_extension[$department] = [];
					}

					$department_dept_section_extension[$department]['summary'] = $row;
					$department_dept_section_extension[$department]['detail'] = [];
				}

				foreach($sectionlist as $row) {
					$department = $row->depart_name;
					$section = $row->section;
					if( empty($department_dept_section_extension[$department]) ) {
						$department_dept_section_extension[$department] = [];
					}
					if( empty($department_dept_section_extension[$department]['detail'][$section]) ) {
						$department_dept_section_extension[$department]['detail'][$section] = [];
					}
					$department_dept_section_extension[$department]['detail'][$section]['summary'] = $row;
					$department_dept_section_extension[$department]['detail'][$section]['detail'] =  [];
				}
				$count = 0 ;
				foreach($extensionlist as $row) {
					$department = $row->depart_name;
					$section = $row->section;
					$extension = $row->extension;
					if( empty($department_dept_section_extension[$department]) ) {
						$department_dept_section_extension[$department] = [];
					}
					if( empty($department_dept_section_extension[$department]['detail'][$section]) ) {
						$department_dept_section_extension[$department]['detail'][$section] = [];
					}
					if( empty($department_dept_section_extension[$department]['detail'][$section]['detail'][$extension]) ) {
						//$department_dept_section_extension[$department]['detail'][$section]['detail'][$extension] = [];
						$department_dept_section_extension[$department]['detail'][$section]['detail'][$count] = [];
					}
					//$department_dept_section_extension[$department]['detail'][$section]['detail'][$extension]['detail'] = $row;
					$department_dept_section_extension[$department]['detail'][$section]['detail'][$count]['detail'] = $row;
					$count++;
				}
			}
			$ret['department_dept_section_extension'] = $department_dept_section_extension;
			//echo json_encode($ret['detailed_dept_sction']);


			$calls_query = clone $query;
			$calls = $calls_query
				->select(DB::raw("'Calls' as calls, 
					 		sum(ac.call_type = 'International') as international,
					 		sum(ac.call_type = 'Local') as local,
					 		sum(ac.call_type = 'National') as national,
					 		sum(ac.call_type = 'Mobile') as mobile,
					 		count(*) as total"))
				->first();
			$ret['department_dept_section_extension_all_calls'] = $calls;
			$duration_query = clone $query;
			$duration = $duration_query
				->select(DB::raw("'Duration' as duration, 
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as international,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as local,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as national,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Mobile') * ac.duration))) as mobile,
					 		SEC_TO_TIME(ROUND(sum(ac.duration))) as total"))
				->first();
			$ret['department_dept_section_extension_all_duration'] = $duration;
			$cost_query = clone $query;
			$callcost = $cost_query
				->select(DB::raw("'Call Cost ($currency)' as callcost, 
					 		ROUND(sum((ac.call_type = 'International') * ac.carrier_charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.carrier_charges),2) as national,
					 		ROUND(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as mobile,
					 		ROUND(sum(ac.carrier_charges),2) as total"))
				->first();
			$ret['department_dept_section_extension_all_callcost'] = $callcost;
		}
	}

	public function getClassifyDestination($query, &$ret, $report_type, $currency) {
		$destination_data = [];
		if($report_type == 'Summary') {
			$destlist_query = clone $query;
			$destlist = $destlist_query
				->groupBy('ac.destination_id')
				->select(DB::raw("'Total' as totalname, dept.id as depart_id, dept.department as depart_name, cd.id as dest_id, cd.country as dest_name,
							se.extension as extension, sum(ac.approval = 'Approved') as approvedcount,
							ROUND(sum((ac.approval = 'Approved') * ac.carrier_charges),2) as approvedcharge,
							sum(ac.approval = 'Rejected') as unapprovedcount,
							ROUND(sum((ac.approval = 'Rejected') * ac.carrier_charges),2) as unapprovedcharge,
							sum(ac.approval = 'Waiting For Approval')+sum(ac.approval = 'Returned') as awaitingcount,
							ROUND((sum((ac.approval = 'Waiting For Approval') * ac.carrier_charges)+sum((ac.approval = 'Returned') * ac.carrier_charges)),2) as awaitingcharge,
							sum(ac.classify = 'Unclassified') as unmarkedcount,
							ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unmarkedcharge,
							count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcharge"))
				->get();
			$ret['summary'] = $destlist;
		}
		if($report_type == 'Detailed') {
			if (!empty($query)) {
				$destlist_query = clone $query;
				$destlist = $destlist_query
					->groupBy('ac.destination_id')
					->groupBy('ac.extension_id')
					->groupBy('ac.call_date')
					->groupby('ac.start_time')
					->select(DB::raw("cd.id as dest_id, cd.country as dest_name,
							 se.id as extension_id, se.extension,
							 CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
							 ac.call_date, ac.start_time as calltime,
							 SEC_TO_TIME(ROUND(ac.duration)) as duration,
							 ac.called_no  as dialednumber,
							 ac.carrier_charges as callcost,
							 ac.approval as status, ac.comment"))
					->get();

				$desttotal_query = clone $query;
				$desttotallist = $desttotal_query
					->groupBy('ac.destination_id')
					->select(DB::raw("cd.id as dest_id, cd.country as dest_name,
								ROUND(sum(ac.carrier_charges),2) as totalcharge ,
								count(*) as totalcount"))
					->get();

				$destination_extension = [];
				$i=0;
				foreach($destlist as $row)
				{
					$destination = $row->dest_name;
					if( empty($destination_extension[$destination]) ) {
						$destination_extension[$destination] = [];
					}

					$destination_extension[$destination]['name'] = $destination;
					if(empty($destination_extension[$destination]['detail'])) {
						$destination_extension[$destination]['detail'] = [];
					}
					$destination_extension[$destination]['detail'][$i] = $row;
					$i++;
				}

				foreach($desttotallist as $row)
				{
					$destination = $row->dest_name;
					if( empty($destination_extension[$destination]) ) {
						$destination_extension[$destination] = [];
					}
					$destination_extension[$destination]['total'] = $row;
				}

			}
			$ret['destination_extension'] = $destination_extension;
			//echo json_encode($ret['detailed_dept_sction']);

			$calls_query = clone $query;
			$calls = $calls_query
				->select(DB::raw("'Calls' as calls, 
					 		sum(ac.call_type = 'International') as international,
					 		sum(ac.call_type = 'Local') as local,
					 		sum(ac.call_type = 'National') as national,
					 		sum(ac.call_type = 'Mobile') as mobile,
					 		count(*) as total"))
				->first();
			$ret['destination_extension_all_calls'] = $calls;
			$duration_query = clone $query;
			$duration = $duration_query
				->select(DB::raw("'Duration' as duration, 
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as international,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as local,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as national,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Mobile') * ac.duration))) as mobile,
					 		SEC_TO_TIME(ROUND(sum(ac.duration))) as total"))
				->first();
			$ret['destination_extension_all_duration'] = $duration;
			$cost_query = clone $query;
			$callcost = $cost_query
				->select(DB::raw("'Call Cost ($currency)' as callcost, 
					 		ROUND(sum((ac.call_type = 'International') * ac.carrier_charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.carrier_charges),2) as national,
					 		ROUND(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as mobile,
					 		ROUND(sum(ac.carrier_charges),2) as total"))
				->first();
			$ret['destination_extension_all_callcost'] = $callcost;
		}
	}

	public function getClassifyExtensionCompare($query, &$ret, $report_type) {
		$destlist_query = clone $query;
        $datalist = $destlist_query
            ->groupBy('ac.extension_id')
            //->orderBy('se.extension','asc')
            ->groupBy('month')
            ->select(DB::raw("MONTH(ac.call_date) as month,CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,dept.department,
                        se.extension as extension,ROUND(sum((ac.classify = 'Personal') * ac.carrier_charges),2) as personal,
                        ROUND(sum((ac.classify = 'Business') * ac.carrier_charges),2) as business,ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unclassify,
                        count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcost"))

            ->get();

        $destination_extension = [];
            foreach($datalist as $row)
            {
                $key = $row->month;

                $destination_extension[$key]['name'] = $key;
                $destination_extension[$key]['detail'][] = $row;
            }
            $ret['summary'] = $destination_extension;
	}

	public function getClassifyExtension($query, &$ret, $report_type,$currency) {
		$destination_data = [];
		if($report_type == 'Summary') {
			$destlist_query = clone $query;
			$destlist = $destlist_query
				->groupBy('ac.extension_id')
				->groupBy('ac.call_date')
				->select(DB::raw("'Total' as totalname, dept.id as depart_id, dept.department as depart_name, cd.id as dest_id, cd.country as dest_name, ac.call_date as call_date,
							se.extension as extension, sum(ac.approval = 'Approved') as approvedcount,
							ROUND(sum((ac.approval = 'Approved') * ac.carrier_charges),2) as approvedcharge,
							sum(ac.approval = 'Rejected') as unapprovedcount,
							ROUND(sum((ac.approval = 'Rejected') * ac.carrier_charges),2) as unapprovedcharge,
							sum(ac.approval = 'Waiting For Approval')+sum(ac.approval = 'Returned') as awaitingcount,
							ROUND((sum((ac.approval = 'Waiting For Approval') * ac.carrier_charges)+sum((ac.approval = 'Returned') * ac.carrier_charges)),2) as awaitingcharge,
							sum(ac.classify = 'Unclassified') as unmarkedcount,
							ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unmarkedcharge,
							count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcharge"))
				->get();
			$ret['summary'] = $destlist;
		}
		if($report_type == 'Detailed') {
			if (!empty($query)) {
				$datalist_query = clone $query;
				$datalist = $datalist_query
					->groupBy('ac.extension_id')
					->groupBy('ac.user_id')
					->groupBy('ac.call_date')
					->groupby('ac.start_time')
					->select(DB::raw("cd.id as dest_id, cd.country as dest_name,
							 se.id as extension_id, se.extension,
							 CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
							 ac.call_date, ac.start_time as calltime,
							 ac.call_type,
							 SEC_TO_TIME(ROUND(ac.duration)) as duration,
							 ac.called_no  as dialednumber,
							 ac.carrier_charges as callcost,
							 ac.approval as status, ac.comment"))
					->get();

				$total_query = clone $query;
				$totallist = $total_query
					->groupBy('ac.extension_id')
					->groupBy('ac.user_id')
					->select(DB::raw("cd.id as dest_id, cd.country as dest_name, se.extension,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
								ROUND(sum(ac.carrier_charges),2) as totalcharge ,
								count(*) as totalcount"))
					->get();

				$destination_extension = [];
				foreach($datalist as $row)
				{
					$key = 'Ext:'.$row->extension.'  User :'.$row->user;

					$destination_extension[$key]['name'] = $key;
					$destination_extension[$key]['detail'][] = $row;
				}

				foreach($totallist as $row)
				{
					$key = 'Ext:'.$row->extension.'  User :'.$row->user;
					if( empty($destination_extension[$key]) ) {
						$destination_extension[$key] = [];
					}
					$destination_extension[$key]['total'] = $row;
				}

			}
			$ret['extension'] = $destination_extension;
			//echo json_encode($ret['detailed_dept_sction']);

			$calls_query = clone $query;
			$calls = $calls_query
				->select(DB::raw("'Calls' as calls, 
					 		sum(ac.call_type = 'International') as international,
					 		sum(ac.call_type = 'Local') as local,
					 		sum(ac.call_type = 'National') as national,
					 		sum(ac.call_type = 'Mobile') as mobile,
					 		sum(ac.call_type = 'Internal') as internal,
					 		count(*) as total"))
				->first();
			$ret['extension_all_calls'] = $calls;
			$duration_query = clone $query;
			$duration = $duration_query
				->select(DB::raw("'Duration' as duration, 
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as international,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as local,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as national,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Mobile') * ac.duration))) as mobile,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Internal') * ac.duration))) as internal,
					 		SEC_TO_TIME(ROUND(sum(ac.duration))) as total"))
				->first();
			$ret['extension_all_duration'] = $duration;
			$cost_query = clone $query;
			$callcost = $cost_query
				->select(DB::raw("'Call Cost ($currency)' as callcost, 
					 		ROUND(sum((ac.call_type = 'International') * ac.carrier_charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.carrier_charges),2) as national,
					 		ROUND(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as mobile,
					 		ROUND(sum((ac.call_type = 'Internal') * ac.carrier_charges),2) as internal,
					 		ROUND(sum(ac.carrier_charges),2) as total"))
				->first();
			$ret['extension_all_callcost'] = $callcost;
		}
	}

	public function getClassifyMobileCompare($query, &$ret, $report_type,$filterby) {
		$destination_mobile = [];
		$destlist_query = clone $query;
		$datalist = $destlist_query
				->groupBy('ac.call_from')
				->groupBy('month')
				->select(DB::raw("MONTH(ac.date) as month,CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,dept.department,
							ac.call_from as extension, ROUND(sum((ac.classify = 'Personal') * ac.charges),2) as personal,
							ROUND(sum((ac.classify = 'Business') * ac.charges),2) as business,ROUND(sum((ac.classify = 'Unclassified') * ac.charges),2) as unclassify,
							count(*) as totalcount,	ROUND(sum(ac.charges),2) as totalcost"))

				->get();

        foreach($datalist as $row) {
            $key = $row->month;
            $department = $row->department;

            $destination_mobile[$key]['detail'][$department]['mobile'][] = $row;
        }

		if ($filterby == 'Mobile'){
			$ret['summary'] = $destination_mobile;
		}else{
			$ret['sum'] = $destination_mobile;
		}
	}

	public function getClassifyMobile($query, &$ret, $report_type, $group_by,$currency) {
		$destination_data = [];
		if($report_type == 'Summary') {
			$destlist_query = clone $query;
			$destlist = $destlist_query
				->groupBy('dept.id')
				->groupBy('ac.call_from')
				//->groupBy('cs.id')
				//->groupBy('ac.date')
				->select(DB::raw("'Total' as totalname, dept.id as depart_id, dept.department as depart_name, cd.id as dest_id, cd.country as dest_name, ac.date as call_date,
							ac.call_from as call_from, CONCAT_WS(\" \", cu.first_name, cu.last_name) as user, sum(ac.classify = 'Personal') as personalcount,
							ROUND(sum((ac.classify = 'Personal') * ac.charges),2) as personalcharge,
							sum(ac.approval = 'Approved') as approvedcount,
							ROUND(sum((ac.approval = 'Approved') * ac.charges),2) as approvedcharge,
							sum(ac.approval = 'Rejected') as unapprovedcount,
							ROUND(sum((ac.approval = 'Rejected') * ac.charges),2) as unapprovedcharge,
							sum(ac.approval = 'Waiting For Approval')+sum(ac.approval = 'Returned') as awaitingcount,
							ROUND((sum((ac.approval = 'Waiting For Approval') * ac.charges)+sum((ac.approval = 'Returned') * ac.charges)),2) as awaitingcharge,
							sum(ac.classify = 'Unclassified') as unmarkedcount,
							ROUND(sum((ac.classify = 'Unclassified') * ac.charges),2) as unmarkedcharge,
							count(*) as totalcount,	ROUND(sum(ac.charges),2) as totalcharge"))
				->get();
			//$ret['summary'] = $destlist;
			$destination_mobile = [];
			foreach($destlist as $row)
				{
					$key = 'Department :'.$row->depart_name;

					$destination_mobile[$key]['name'] = $key;
					$destination_mobile[$key]['detail'][] = $row;
				}

				$ret['mobile'] = $destination_mobile;
		}

		if($report_type == 'Detailed') {
			if (!empty($query)) {
				$datalist_query = clone $query;
				$datalist = $datalist_query
					//->groupBy('ac.call_from')
					//->groupBy('ac.user_id')
					//->groupBy('ac.date')
					//->groupby('ac.time')
					->select(DB::raw("cd.id as dest_id, cd.country as dest_name,
							 ac.call_from as extension_id, ac.call_from,
							 dept.id as depart_id, dept.department,
							 CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
							 ac.classify,
							 ac.date, ac.time as calltime,
							 ac.call_type,
							 SEC_TO_TIME(ROUND(ac.duration)) as duration,
							 ac.call_to  as dialednumber,
							 ac.charges as callcost,
							 ac.approval as status, ac.comment"))
					->get();

				$ret['group_by_mobile_call'] = $group_by;

				$destination_extension = [];
				foreach($datalist as $row) {
/*
					$key = 'Mobile:'.$row->call_from.'  User :'.$row->user;
					if( empty($destination_extension[$key]) ) {
						$destination_extension[$key] = [];
					}

					$destination_extension[$key]['name'] = $key;
					if(empty($destination_extension[$key]['detail'])) {
						$destination_extension[$key]['detail'] = [];
					}
					$destination_extension[$key]['detail'][] = $row;
	*/
                    $group_key = $row->date;


                    if($group_by == 'Date'){
                        $group_key = $row->date;
                    }
                    else if($group_by == 'User'){
                        $group_key = $row->user.' - '.$row->call_from;
                    }
                    else {
                        $group_key = $row->department;
                    }

                    $destination_extension[$group_key][] = $row;
                }
			}
			$ret['extension'] = $destination_extension;
			//echo json_encode($group_by);
			$calls_query = clone $query;
			$calls = $calls_query
				->select(DB::raw("'Calls' as calls, 
					 		sum(ac.call_type = 'International') as international,
					 		sum(ac.call_type = 'Local') as local,
					 		sum(ac.call_type = 'National') as national,
					 		sum(ac.call_type = 'Mobile') as mobile,
					 		sum(ac.call_type = 'Internal') as internal,
					 		count(*) as total"))
				->first();
			$ret['extension_all_calls'] = $calls;
			$duration_query = clone $query;
			$duration = $duration_query
				->select(DB::raw("'Duration' as duration, 
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as international,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as local,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as national,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Mobile') * ac.duration))) as mobile,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Internal') * ac.duration))) as internal,
					 		SEC_TO_TIME(ROUND(sum(ac.duration))) as total"))
				->first();
			$ret['extension_all_duration'] = $duration;
			$cost_query = clone $query;
			$callcost = $cost_query
				->select(DB::raw("'Call Cost ($currency)' as callcost, 
					 		ROUND(sum((ac.call_type = 'International') * ac.charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Local') * ac.charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.charges),2) as national,
					 		ROUND(sum((ac.call_type = 'Mobile') * ac.charges),2) as mobile,
					 		ROUND(sum((ac.call_type = 'Internal') * ac.charges),2) as internal,
					 		ROUND(sum(ac.charges),2) as total"))
				->first();
			$ret['extension_all_callcost'] = $callcost;
		}
	}

	public function getClassifyUser($query, &$ret, $report_type,$currency) {
		$destination_data = [];
		if($report_type == 'Summary') {
			$destlist_query = clone $query;
			$destlist = $destlist_query
				->groupBy('ac.destination_id')
				->select(DB::raw("'Total' as totalname, dept.id as depart_id, dept.department as depart_name, cd.id as dest_id, cd.country as dest_name,
							se.extension as extension, sum(ac.approval = 'Approved') as approvedcount,
							ROUND(sum((ac.approval = 'Approved') * ac.carrier_charges),2) as approvedcharge,
							sum(ac.approval = 'Rejected') as unapprovedcount,
							ROUND(sum((ac.approval = 'Rejected') * ac.carrier_charges),2) as unapprovedcharge,
							sum(ac.approval = 'Waiting For Approval')+sum(ac.approval = 'Returned') as awaitingcount,
							ROUND((sum((ac.approval = 'Waiting For Approval') * ac.carrier_charges)+sum((ac.approval = 'Returned') * ac.carrier_charges)),2) as awaitingcharge,
							sum(ac.classify = 'Unclassified') as unmarkedcount,
							ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unmarkedcharge,
							count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcharge"))
				->get();
			$ret['summary'] = $destlist;
		}
		if($report_type == 'Detailed') {
			if (!empty($query)) {
				$datalist_query = clone $query;
				$datalist = $datalist_query
					->groupBy('ac.user_id')
					->groupBy('ac.extension_id')
					->groupBy('ac.call_date')
					->groupby('ac.start_time')
					->select(DB::raw("cd.id as dest_id, cd.country as dest_name,
							 se.id as extension_id, se.extension,
							 CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
							 ac.call_date, ac.start_time as calltime,
							 ac.call_type,
							 SEC_TO_TIME(ROUND(ac.duration)) as duration,
							 ac.called_no  as dialednumber,
							 ac.carrier_charges as callcost,
							 ac.approval as status, ac.comment"))
					->get();

				$total_query = clone $query;
				$totallist = $total_query
					->groupBy('ac.user_id')
					->select(DB::raw("cd.id as dest_id, cd.country as dest_name, se.extension,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
								ROUND(sum(ac.carrier_charges),2) as totalcharge ,
								count(*) as totalcount"))
					->get();

				$destination_extension = [];
				foreach($datalist as $row) {
					$key = 'User :'.$row->user;

					$destination_extension[$key]['name'] = $key;
					$destination_extension[$key]['detail'][] = $row;
				}

				foreach($totallist as $row) {
					$key = 'User :'.$row->user;
					if( empty($destination_extension[$key]) ) {
						$destination_extension[$key] = [];
					}
					$destination_extension[$key]['total'] = $row;
				}

			}
			$ret['user'] = $destination_extension;
			//echo json_encode($ret['detailed_dept_sction']);

			$calls_query = clone $query;
			$calls = $calls_query
				->select(DB::raw("'Calls' as calls, 
					 		sum(ac.call_type = 'International') as international,
					 		sum(ac.call_type = 'Local') as local,
					 		sum(ac.call_type = 'National') as national,
					 		sum(ac.call_type = 'Mobile') as mobile,
					 		sum(ac.call_type = 'Internal') as internal,
					 		count(*) as total"))
				->first();
			$ret['extension_all_calls'] = $calls;
			$duration_query = clone $query;
			$duration = $duration_query
				->select(DB::raw("'Duration' as duration, 
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'International') * ac.duration))) as international,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Local') * ac.duration))) as local,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'National') * ac.duration))) as national,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Mobile') * ac.duration))) as mobile,
					 		SEC_TO_TIME(ROUND(sum((ac.call_type = 'Internal') * ac.duration))) as internal,
					 		SEC_TO_TIME(ROUND(sum(ac.duration))) as total"))
				->first();
			$ret['extension_all_duration'] = $duration;
			$cost_query = clone $query;
			$callcost = $cost_query
				->select(DB::raw("'Call Cost ($currency)' as callcost, 
					 		ROUND(sum((ac.call_type = 'International') * ac.carrier_charges),2) as international,
					 		ROUND(sum((ac.call_type = 'Local') * ac.carrier_charges),2) as local,
					 		ROUND(sum((ac.call_type = 'National') * ac.carrier_charges),2) as national,
					 		ROUND(sum((ac.call_type = 'Mobile') * ac.carrier_charges),2) as mobile,
					 		ROUND(sum((ac.call_type = 'Internal') * ac.carrier_charges),2) as internal,
					 		ROUND(sum(ac.carrier_charges),2) as total"))
				->first();
			$ret['extension_all_callcost'] = $callcost;
		}
	}

	public function getGuestcallDetail($query, $orderby, $sort, $report_by, &$ret ) {
		$data_query = clone $query;

		$data_list = $data_query
				->orderBy($orderby, $sort)
				->orderBy('gc.start_time','asc')
//				->select(DB::raw('gc.*, cr.room, ge.extension, ge.primary_extn, cd.country, cd.code, cc.charge as carrier_rate, hc.charge as hotel_rate, tax.value as tax_rate'))
				->select(DB::raw('gc.*, cb.name as building, cr.room, ge.extension, ge.primary_extn, cd.country, cg.guest_name'))
//					->limit(100)
				->get();

		$guest_call_list = [];

		$ret['report_by_guest_call'] = $report_by;
		foreach ($data_list as $row) {
			$group_key = $row->call_date;
			$building = $row->building;
			switch ($report_by) {
				case 'Call Date':
					$group_key = $row->call_date;
					break;
				case 'Room':
					$group_key = $row->room;
					break;
				case 'Extension':
					$group_key = $row->extension;
					break;
				case 'Destination':
					$group_key = $row->country;
					break;
				case 'Called Number':
					$group_key = $row->called_no;
					break;
				default:
					$group_key = $row->call_date;
					$ret['report_by_guest_call'] = 'Call Date';
					break;
			}

		//	$guest_call_list[$group_key][] = $row;

			//$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
            $guest_call_list[$building]['guest'][$group_key]['detail'][] = $row;
		}

		$ret['guest_call_list'] = $guest_call_list;
		$ret['guest_plain_csv'] = $data_list;
	}

	public function getGuestcallReceiveGuestDetail($query, $orderby, $sort, $report_by, &$ret ) {
		$data_query = clone $query;

		$data_list = $data_query
				->orderBy($orderby, $sort)
				->orderBy('gc.start_time', 'asc')
//				->select(DB::raw('gc.*, cr.room, ge.extension, ge.primary_extn, cd.country, cd.code, cc.charge as carrier_rate, hc.charge as hotel_rate, tax.value as tax_rate'))
				->select(DB::raw('gc.*,cb.name as building, cre.room,gex.extension as guest_ext, ge.extension, ge.primary_extn, cd.country, cg.guest_name'))
//					->limit(100)
				->get();

		$guest_call_list = $ret['guest_call_list'];

		foreach ($data_list as $row) {
			// add receive call
			$building = $row->building;
			$row->call_type  = 'Received_I';
			if( $report_by == 'Extension' ) {
				$group_key = $row->extension;
                /*	if (isset($guest_call_list[$group_key])) {
                    } else {
                        $guest_call_list[$group_key] = [];
                    }

                    $row->extension = '' . $row->from_ext;
                    $row->room = '' . $row->from_room;

                    $guest_call_list[$group_key][] = $row;
                */

                if( empty($guest_call_list[$building]) ) {
                    $guest_call_list[$building] = [];
                    $guest_call_list[$building]['guest'] = [];

                }

                if( empty($guest_call_list[$building]['guest'][$group_key]) ) {
                    $guest_call_list[$building]['guest'][$group_key] = [];
                    $guest_call_list[$building]['guest'][$group_key]['detail'] = [];
                }
                $row->extension = '' . $row->guest_ext;
                $row->room = '' . $row->room;
                //$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
                $guest_call_list[$building]['guest'][$group_key]['detail'][] = $row;
			}

			if( $report_by == 'Room' ) {
				$group_key = $row->room;
                /*	if (isset($guest_call_list[$group_key])) {
                        } else {
                            $guest_call_list[$group_key] = [];
                        }

                        $row->extension = '' . $row->from_ext;

                        $guest_call_list[$group_key][] = $row;
                */

//                if( empty($guest_call_list[$building]) ) {
//                    $guest_call_list[$building] = [];
//                    $guest_call_list[$building]['guest'] = [];
//
//                }
//
//                if( empty($guest_call_list[$building]['guest'][$group_key]) ) {
//                    $guest_call_list[$building]['guest'][$group_key] = [];
//                    $guest_call_list[$building]['guest'][$group_key]['detail'] = [];
//                }
                $row->extension = '' . $row->guest_ext;
                //$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
                $guest_call_list[$building]['guest'][$group_key]['detail'][] = $row;
			}
		}

		$ret['guest_call_list'] = $guest_call_list;
	}

	public function getGuestcallReceiveAdminDetail($query, $orderby, $sort, $report_by, &$ret ) {
		$data_query = clone $query;

		$data_list = $data_query
				->orderBy($orderby, $sort)
				->orderBy('gc.start_time', 'asc')
//				->select(DB::raw('gc.*, cr.room, ge.extension, ge.primary_extn, cd.country, cd.code, cc.charge as carrier_rate, hc.charge as hotel_rate, tax.value as tax_rate'))
				->select(DB::raw('gc.*,cb.name as building, cre.room,cge.extension as admin_ext, ge.extension, ge.primary_extn, cd.country'))
//					->limit(100)
				->get();

		$guest_call_list = $ret['guest_call_list'];

		foreach ($data_list as $row) {
			// add receive call
			$building = $row->building;
			$row->call_type  = 'Received_I';
			$row->guest_name  = '';
			$row->hotel_charges  = 0;
			$row->tax  = 0;
			$row->total_charges  = 0;
			if( $report_by == 'Extension' ) {
				$group_key = $row->extension;
                /*	if (isset($guest_call_list[$group_key])) {
                    } else {
                        $guest_call_list[$group_key] = [];
                    }

                    $row->extension = '' . $row->from_ext;
                    $row->room = '' . $row->from_room;

                    $guest_call_list[$group_key][] = $row;
                */

//                if( empty($guest_call_list[$building]) ) {
//                    $guest_call_list[$building] = [];
//                    $guest_call_list[$building]['guest'] = [];
//
//                }
//
//                if( empty($guest_call_list[$building]['guest'][$group_key]) ) {
//                    $guest_call_list[$building]['guest'][$group_key] = [];
//                    $guest_call_list[$building]['guest'][$group_key]['detail'] = [];
//                }
                $row->extension = '' . $row->admin_ext;
                $row->room = '';
			//$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
                $guest_call_list[$building]['guest'][$group_key]['detail'][] = $row;
			}

			if( $report_by == 'Room' ) {
				$group_key = $row->room;
                /*	if (isset($guest_call_list[$group_key])) {
                        } else {
                            $guest_call_list[$group_key] = [];
                        }

                        $row->extension = '' . $row->from_ext;

                        $guest_call_list[$group_key][] = $row;
                */

                $row->extension = '' . $row->admin_ext;
                //$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
                $guest_call_list[$building]['guest'][$group_key]['detail'][] = $row;
			}
		}

		$ret['guest_call_list'] = $guest_call_list;
	}

	public function getAdmincallDetail($query, $orderby, $sort, $report_by, &$ret, $property_id, $department_tags ){
		$data_query = clone $query;

		$data_list = $data_query
				->orderBy($orderby, $sort)
//					->limit(100)
//				->select(DB::raw('ac.*, se.extension, cd.country, cd.code, cc.charge as carrier_rate, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, dept.department'))
				->select(DB::raw('ac.*, cb.name as building,se.extension, cd.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, se.description, dept.department'))
				->get();

		// in detail report by department, all department need to listed even if therr is no call and total is 0,
		$admin_call_list = [];

		$ret['report_by_admin_call'] = $report_by;
/*		if($report_by == "Department") {
			$department_list = DB::table('common_department as cd')
				->where('cd.property_id', $property_id);
				if (count($department_tags) > 0)
					$department_list->whereIn('cd.department', $department_tags);
			$department_list = $department_list
				->orderBy("cd.department")
				->select(DB::raw('cd.department'))
				->get();


			foreach ($department_list as $row) {
				$group_key = $row->department;
				if (isset($admin_call_list[$group_key])) {
				} else {
					$admin_call_list[$group_key] = [];
				}
			}
		}
*/
		foreach ($data_list as $row) {
			$group_key = $row->call_date;
			$building = $row->building;
			switch($report_by)
			{
				case 'Call Date':
					$group_key = $row->call_date;
					break;
				case 'Department':
					$group_key = $row->department;
					break;
				case 'Extension':
					$group_key = $row->extension;
					break;
				case 'Destination':
					$group_key = $row->country;
					break;
				case 'Access Code':
					$group_key = $row->access_code;
					break;
				case 'Called Number':
					$group_key = $row->called_no;
					break;
				default:
					$group_key = $row->extension;
					$ret['report_by_admin_call'] = 'Extension';
					break;
			}

		//	$admin_call_list[$group_key][] = $row;

			//$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
            $admin_call_list[$building]['admin'][$group_key]['detail'][] = $row;
		}

		$ret['admin_call_list'] = $admin_call_list;
		$ret['admin_plain_csv'] = $data_list;
	}

	public function getAuditUsers($query, $report_by, &$ret ) {
		$data_query = clone $query;

		if($report_by == 'Department') {
			$data_list = $data_query
				->groupBy('cu.dept_id')
				->groupBy('cu.id');
		}
		if($report_by == 'Job Role') {
			$data_list = $data_query
				->groupBy('cu.job_role_id')
				->groupBy('cu.id');
		}
		if($report_by == 'Permission') {
			$data_list = $data_query
				->groupBy('cg.id')
				->groupBy('cu.id');
		}
		$data_list = $data_list
				->select(DB::raw('cu.*, cr.job_role, dept.department, cg.id, cg.name as permission'))
				->get();

		$list = [];
		$i = 0;
		foreach ($data_list as $row) {
			if($report_by == 'Department' )
			    $key = $row->department;
			if($report_by == 'Job Role')
			    $key = $row->job_role;
			if($report_by == 'Permission')
			    $key = $row->permission;

			if($report_by == 'Department')
			    $list[$key]['title'] = 'Department : '.$key;
			if($report_by == 'Job Role')
			    $list[$key]['title'] = 'Job Role : '.$key;

			if($report_by == 'Permission')
			    $list[$key]['title'] = 'Permission : '.$key;
			if(empty($list[$key]['detail']))
			    $list[$key]['detail'] = [];
			if($row->lock == 'Yes' )
			    $row->lock = 'Inactive';
			if($row->lock == 'No' )
			    $row->lock = 'Active';
			$list[$key]['detail'][] = $row ;
		}

		$ret['data_list'] = $list;
	}

	public function getAuditRoom($query, $report_by, &$ret ) {
		$data_query = clone $query;

		if($report_by == 'Building') {
			$data_list = $data_query
				->groupBy('cb.id')
				->groupBy('cf.id')
				->groupBy('cr.room');
		}
		if($report_by == 'Room Type') {
			$data_list = $data_query
				->groupBy('ct.id')
				->groupBy('cb.id')
				->groupBy('cf.id')
				->groupBy('cr.room');
		}

		$data_list = $data_list
			->select(DB::raw('cb.name as building, cf.floor, ct.type as room_type, cr.room'))
			->get();

		$list = [];
		foreach ($data_list as $row) {
			if($report_by == 'Building' )
			    $key = $row->building;
			if($report_by == 'Room Type')
			    $key = $row->room_type;

			if($report_by == 'Building')
			    $list[$key]['title'] = 'Building : '.$key;
			if($report_by == 'Room Type')
			    $list[$key]['title'] = 'Room Type : '.$key;

			if(empty($list[$key]['detail']))
			    $list[$key]['detail'] = [];
			$list[$key]['detail'][] = $row ;

		}

		$ret['data_list'] = $list;
	}

	public function getAdmincallReceivedDetail($query, $orderby, $sort, $report_by, &$ret ) {
		$data_query = clone $query;

		$data_list = $data_query
				->orderBy($orderby, $sort)
				->orderBy('ac.start_time', 'asc')
				->select(DB::raw('ac.*, cb.name as building, cse.extension as admin_ext,se.extension, cd.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, se.description, dept.department'))
				->get();

		$admin_call_list = $ret['admin_call_list'];

		foreach ($data_list as $row) {

			$building = $row->building;
			$group_key = $row->extension;
			$row->call_type = 'Received_I';

            /*	if (isset($admin_call_list[$group_key])) {
                } else {
                    $admin_call_list[$group_key] = [];
                }

                $row->extension = '' . $row->from_ext;

                $admin_call_list[$group_key][] = $row;
            */

            $row->extension = '' . $row->admin_ext;
            //$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
            $admin_call_list[$building]['admin'][$group_key]['detail'][] = $row;
		}

		$ret['admin_call_list'] = $admin_call_list;
	}

	public function getAdmincallReceivedGuestDetail($query, $orderby, $sort, $report_by, &$ret ) {
		$data_query = clone $query;

		$data_list = $data_query
				->orderBy($orderby, $sort)
				->orderBy('ac.start_time', 'asc')
				->select(DB::raw('ac.*, cb.name as building, cse.extension as admin_ext,se.extension, cd.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, se.description, dept.department'))
				->get();

		$admin_call_list = $ret['admin_call_list'];

		foreach ($data_list as $row) {

			$building = $row->building;
			$group_key = $row->extension;
			$row->call_type = 'Received_I';

            /*	if (isset($admin_call_list[$group_key])) {
                } else {
                    $admin_call_list[$group_key] = [];
                }

                $row->extension = '' . $row->from_ext;

                $admin_call_list[$group_key][] = $row;
            */

//            if( empty($admin_call_list[$building]) ) {
//                $admin_call_list[$building] = [];
//                $admin_call_list[$building]['admin'] = [];
//
//            }
//
//            if( empty($admin_call_list[$building]['admin'][$group_key]) ) {
//                $admin_call_list[$building]['admin'][$group_key] = [];
//                $admin_call_list[$building]['admin'][$group_key]['detail'] = [];
//            }
            $row->extension = '' . $row->admin_ext;
            //$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
            $admin_call_list[$building]['admin'][$group_key]['detail'][] = $row;
		}

		$ret['admin_call_list'] = $admin_call_list;
	}

	public function getBusinessCentrecallDetail($query, $orderby, $sort, $report_by, &$ret ) {
		$data_query = clone $query;

		$data_list = $data_query
			->orderBy($orderby, $sort)
//					->limit(100)
//				->select(DB::raw('ac.*, se.extension, cd.country, cd.code, cc.charge as carrier_rate, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, dept.department'))
			->select(DB::raw('cc.*,cb.name as building, se.extension, cd.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, dept.department'))
			->get();

		$business_centre_call_list = [];

		$ret['report_by_business_centre_call'] = $report_by;
		foreach ($data_list as $row) {
			$group_key = $row->call_date;
			$building = $row->building;
			switch($report_by)
			{
				case 'Call Date':
					$group_key = $row->call_date;
					break;
				case 'Department':
					$group_key = $row->department;
					break;
				case 'Extension':
					$group_key = $row->extension;
					break;
				case 'Destination':
					$group_key = $row->country;
					break;
				default:
					$group_key = $row->extension;
					$ret['report_by_business_centre_call'] = 'Extension';
					break;
			}

            //$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
            $business_centre_call_list[$building]['business'][$group_key]['detail'][] = $row;
		}

		$ret['business_centre_call_list'] = $business_centre_call_list;
	}

	public function getBusinessCentrecallReceivedDetail($query, $orderby, $sort, $report_by, &$ret ) {
		$data_query = clone $query;

		$data_list = $data_query
				->orderBy($orderby, $sort)
				->select(DB::raw('cc.*, cb.name as building, se.extension, cd.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, dept.department'))
				->get();

		$business_centre_call_list = $ret['business_centre_call_list'];

		foreach ($data_list as $row) {
			$building = $row->building;
			$group_key = $row->extension;

            /*	if (isset($business_centre_call_list[$group_key])) {
                } else {
                    $business_centre_call_list[$group_key] = [];
                }

                $row->extension = '' . $row->from_ext;

                $business_centre_call_list[$group_key][] = $row;
            */

            $row->extension = '' . $row->from_ext;
            //$admin_call_list[$building]['admin'][$group_key]['detail'] = $row;
            $business_centre_call_list[$building]['business'][$group_key]['detail'][] = $row;
		}

		$ret['business_centre_call_list'] = $business_centre_call_list;
	}
	/**/

    public function generateReport(Request $request) {
        date_default_timezone_set(config('app.timezone'));
        $cur_time = date('Y-m-d H:i:s');
        $cur_date = date('Y-m-d');

        $id = $request->get('id',0);
        $data = DB::table('common_schedule_report_setting as re')
            ->where('re.id', $id)
            ->select(DB::raw("re.*"))
            ->first();

        $setting_data = clone $data;
        $frequency = $data->frequency;
        $schedule_name = $data->name;
        $recipient = $data->recipient;
        $format = $data->format;
        $attached = $data->attach_flag;
        $datastr = $data->filter;

		$data_start_time = $data->start_time;
		$data_end_time = $data->end_time;

        $datastr = json_decode($datastr, true);

        $report = [];
        $data_type = $data->report_type;

        $check_flag = CronLogs::checkDuplicates($cur_time,json_encode($data));

        $previous_week = strtotime("-1 week +1 day");
        $start_week = strtotime("last sunday midnight",$previous_week);
        $end_week = strtotime("1 week", $start_week);

        $start_week = date("Y-m-d 00:00:00", $start_week);
        $end_week = date("Y-m-d 00:00:00", $end_week);

        if ($frequency === 'Daily') {
            $start_time = date('Y-m-d H:i:s', strtotime("-1 days", strtotime($cur_time)));
            $end_time = date('Y-m-d H:i:s', strtotime($cur_time));
			//$start_time = date('Y-m-d H:i:s', strtotime("-2 days ". $data_start_time));
            //$end_time = date('Y-m-d H:i:s', strtotime("-1 days ". $data_end_time));

        }

		if ($frequency === 'Hourly') {
        //    $start_time = date('Y-m-d 00:00:00', strtotime("-1 hour", strtotime($cur_time)));
		//	$start_time = '2021-10-11 11:20:00';
			$start_time = date("Y-m-d H:i:s", strtotime("-1 hours"));
        //    $end_time = date('Y-m-d 00:00:00', strtotime($cur_time));
			$end_time = $cur_time;
        }

        if ($frequency === 'Weekly') {
            $start_time = $start_week;
            $end_time = $end_week;
        }
        if ($frequency === 'Monthly') {
            $start_time = date('Y-m-01 00:00:00', strtotime($cur_time));
            $end_time = date('Y-m-d 00:00:00', strtotime($cur_time));
        }

        if( $frequency == 'Custom Days' ) {
            if( $data->date != $cur_date )
                return;

            $start_time = date('Y-m-d 00:00:00', strtotime("-$data->interval $data->freq_unit", strtotime($cur_time)));
            $end_time = date('Y-m-d 00:00:00', strtotime($cur_time));

            $next_date = date('Y-m-d', strtotime("$data->interval $data->freq_unit", strtotime($cur_time)));
            DB::table('common_schedule_report_setting')
                ->where('id', $id)
                ->update(['date' => $next_date]);
        }

        if($check_flag==true) {
            $data = [];
            if($data_type == 'callaccount') {
                $report['report_type'] = $datastr['report_type'];
                $report['call_sort'] = json_decode($datastr['call_sort']);
                //if (empty($report['call_sort'])) $report['call_sort'] = 'All';
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Call Date';

                //$start_time = $datastr['start_time'];

                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;

                //$report['end_time'] = $datastr['end_time'];
                if( isset($datastr['call_type']) )
                    $report['call_type'] = $datastr['call_type'];
                else
                    $report['call_type'] = '[]';
                $report['call_types'] = json_decode($report['call_type']);

                if( isset($datastr['department_tags']) )
                    $report['department_tag'] = $datastr['department_tags'];
                else
                    $report['department_tag'] = '[]';
                $report['department_tags'] = json_decode($report['department_tag']);

                if( isset($datastr['room_tags']) )
                    $report['room_tag'] = $datastr['room_tags'];
                else
                    $report['room_tag'] = '[]';
                $report['room_tags'] = json_decode($report['room_tag']);

                if( isset($datastr['extension_tags']) )
                    $report['extension_tag'] = $datastr['extension_tags'];
                else
                    $report['extension_tag'] = '[]';
                $report['extension_tags'] = json_decode($report['extension_tag']);

                if( isset($datastr['building_id']) )
                    $report['building_tag'] = $datastr['building_id'];
                else
                    $report['building_tag'] = '[]';
                $report['building_tags'] = json_decode($report['building_tag']);

                if( isset($datastr['accesscode_tags']) )
                    $report['accesscode_tag'] = $datastr['accesscode_tags'];
                else
                    $report['accesscode_tag'] = '[]';
                $report['accesscode_tags'] = json_decode($report['accesscode_tag']);

                if( isset($datastr['calledno_tags']) )
                    $report['calledno_tag'] = $datastr['calledno_tags'];
                else
                    $report['calledno_tag'] = '[]';
                $report['calledno_tags'] = json_decode($report['calledno_tag']);

                if( isset($datastr['destination_tags']) )
                    $report['destination_tag'] = $datastr['destination_tags'];
                else
                    $report['destination_tag'] = '[]';
                $report['destination_tags'] = json_decode($report['destination_tag']);

                if( isset($datastr['section_tags']) )
                    $report['section_tag'] = $datastr['section_tags'];
                else
                    $report['section_tag'] = '[]';
                $report['section_tags'] = json_decode($report['section_tag']);

                if( isset($datastr['call_duration']) )
                    $report['call_duration'] = $datastr['call_duration'];
                else
                    $report['call_duration'] = 0;

                $report['call_duration_time'] = isset($datastr['call_duration_time']) ? $datastr['call_duration_time'] : 0;

                $report['orderby'] = 'call_date';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];
                if (empty($report['property_id'])) $report['property_id'] = '6';
                //$report['building_id'] = $datastr['building_id'];
                //if (empty($report['building_id'])) $report['building_id'] = '0';
                $report['callcharge'] = $datastr['callcharge'];
                if (empty($report['callcharge'])) $report['callcharge'] = 'false';

                $report['transfer'] = $datastr['transfer'];
                if (empty($report['transfer'])) $report['transfer'] = 'false';

            //    $data = $this->makeCallaccountReportData($report);

				if ($report['report_by'] == 'Hour Status'){
					$data =  $this->makeCallaccountReportDataforHour($report);
				}
				else if ($report['report_by'] == 'Frequency'){
					$data =  $this->makeCallaccountReportDataforFrequency($report);
				}
				else{
					$data =  $this->makeCallaccountReportData($report);
				}
            }

            //---call center report -----------
            if($data_type == 'callcenter') {
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Agent';
                $report['report_type'] = $datastr['report_type'];
                //$report['call_sort'] = $datastr['call_sort'];
                if (empty($report['call_sort'])) $report['call_sort'] = 'All';
                //$start_time = $datastr['start_time'];
                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;
                //$report['end_time'] = $datastr['end_time'];

                if( isset($datastr['agent_tags']) )
                    $report['agent_tag'] = $datastr['agent_tags'];
                else
                    $report['agent_tag'] = '[]';
                $report['agent_tags'] = json_decode($report['agent_tag']);

                $report['orderby'] = 'call_date';
                $report['property_id'] = $datastr['property_id'];

                if( isset($datastr['agent_tags']) )
                    $report['agent_tag'] = $datastr['agent_tags'];
                else
                    $report['agent_tag'] = '[]';

                if( isset( $datastr['caller_id']))
                    $report['caller_id'] = $datastr['caller_id'];
                else
                    $report['caller_id'] = 0;

                if( isset($datastr['origin_tags']) )
                    $report['origin_tag'] = $datastr['origin_tags'];
                else
                    $report['origin_tag'] = '[]';
                $report['origin_tags'] = json_decode($report['origin_tag']);

                if( isset($datastr['call_type_ids']) )
                    $report['call_type_id'] = $datastr['call_type_ids'];
                else
                    $report['call_type_id'] = '[]';
				$report['call_type_ids'] = json_decode($report['call_type_id']);

				if( isset($datastr['type_ids']) )
					$report['type_id'] = $datastr['type_ids'];
				else
					$report['type_id'] = '[]';
				$report['type_ids'] = json_decode($report['type_id']);

                if( isset($datastr['call_type_auto_ids']) )
                    $report['call_type_auto_id'] = $datastr['call_type_auto_ids'];
                else
                    $report['call_type_auto_id'] = '[]';
                $report['call_type_auto_ids'] = json_decode($report['call_type_auto_id']);

                if( isset($datastr['channel_type_ids']) )
                    $report['channel_type_id'] = $datastr['channel_type_ids'];
                else
                    $report['channel_type_id'] = '[]';
				$report['channel_type_ids'] = json_decode($report['channel_type_id']);

				if( isset($datastr['skill_group_ids']) )
                    $report['skill_group_id'] = $datastr['skill_group_ids'];
                else
                    $report['skill_group_id'] = '[]';
                $report['skill_group_ids'] = json_decode($report['skill_group_id']);

                if( isset($datastr['follow_up']) )
                    $report['follow_up'] = $datastr['follow_up'];
                else
                    $report['follow_up'] = 1;

                if( isset($datastr['status']) )
                    $report['status'] = $datastr['status'];
                else
                    $report['status'] = '[]';

                //$report['status'] = $datastr['status'];
                $report['call_time_start'] = $datastr['call_time_start'];
                $report['call_time_end'] = $datastr['call_time_end'];
                $report['call_duration'] = $datastr['call_duration'];

                if(isset($datastr['call_duration_time']))
                    $report['call_duration_time'] = $datastr['call_duration_time'];
                else
                    $report['call_duration_time'] = 0;

                $report['call_in_queue'] = $datastr['time_in_queue'];
                if(isset($datastr['time_in_queue_time']))
                    $report['call_in_queue_time'] = $datastr['time_in_queue_time'];
                else
                    $report['call_in_queue_time'] = 0;

                if( isset($datastr['chart_graph_flag']) )
                    $report['chart_graph_flag'] = $datastr['chart_graph_flag'];
                else
                    $report['chart_graph_flag'] = 'false';

                $data = $this->makeCallcenterReportData($report);
            }

            if($data_type == 'callclassify') {
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Call Date';
                $report['report_type'] = $datastr['report_type'];
                //$start_time = $datastr['start_time'];
                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;
                //$report['end_time'] = $datastr['end_time'];
                $report['call_sort'] = json_decode($request->get('call_sort', '[]'));

                $report['group_by'] = $datastr['group_by'];
                if(empty($report['group_by'])) $report['group_by'] = 'Date';

                $report['call_type'] = $datastr['call_type'];
                if (empty($report['call_type'])) $report['call_type'] = '[]';
                $report['call_types'] = json_decode($report['call_type']);

                $report['classify'] = $datastr['classify'];

                $report['approval'] = $datastr['approval'];
                if(empty($report['approval'])) $report['approval'] = '[]';
                $report['approvals'] = json_decode($report['approval']);

                $report['filter_by'] = $datastr['filter_by'];
                if(empty($report['filter_by'])) $report['filter_by'] = '[]';
                $report['filterby'] = json_decode($report['filter_by']);

                $report['section_tag'] = $datastr['section_tags'];
                if(empty($report['section_tag'])) $report['section_tag'] = '[]';
                $report['section_tags'] = json_decode($report['section_tag']);

                $report['department_tag'] = $datastr['department_tags'];
                if (empty($report['department_tag'])) $report['department_tag'] = '[]';
                $report['department_tags'] = json_decode($report['department_tag']);

                $report['staff_tag'] = $datastr['staff_tags'];
                if (empty($report['staff_tag'])) $report['staff_tag'] = '[]';
                $report['staff_tags'] = json_decode($report['staff_tag']);

                $report['user_id'] = $datastr['user_id'];
                if(empty($report['user_id'])) $report['user_id'] = '[]';
                $report['user_ids'] = json_decode($report['user_id']);

                $report['callcharge'] = $datastr['callcharge'];
                if (empty($report['callcharge'])) $report['callcharge'] = 'false';

                $report['orderby'] = 'call_date';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];

                if ($report['report_by'] == 'Comparison'){
                    $data = $this->makeCallclassifyReportDataComparison($report);
                }else if ($report['report_by'] == 'Cost Comparison'){
                    $data = $this->makeCallclassifyReportDataCostComparison($report);
                }else if ($report['report_by'] == 'Call Status'){
                    $data = $this->makeCallclassifyReportDataCallStatus($report);
                } else{
                    $data =  $this->makeCallclassifyReportData($report);
                }
                //$data = $this->makeCallclassifyReportData($report);
            }

            if($data_type == 'guestservice') {
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Date';

                $report['chart_graph_flag'] = $datastr['chart_graph_flag'];
                if (empty($report['chart_graph_flag'])) $report['chart_graph_flag'] = 'false';

                $report['report_type'] = $datastr['report_type'];

                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;

                if( isset($datastr['department_tags']) )
                    $report['department_tag'] = $datastr['department_tags'];
                else
                    $report['department_tag'] = '[]';
                $report['department_tags'] = json_decode($report['department_tag']);

                if( isset($datastr['department_function_tags']) )
                    $report['department_function_tag'] = $datastr['department_function_tags'];
                else
                    $report['department_function_tag'] = '[]';
                $report['department_function_tags'] = json_decode($report['department_function_tag']);

                if( isset($datastr['item_tags']) )
                    $report['item_tag'] = $datastr['item_tags'];
                else
                    $report['item_tag'] = '[]';
                $report['item_tags'] = json_decode($report['item_tag']);

                if( isset($datastr['location_tags']) )
                    $report['location_tag'] = $datastr['location_tags'];
                else
                    $report['location_tag'] = '[]';
                $report['location_tags'] = json_decode($report['location_tag']);

                if( isset($datastr['status_tags']) )
                    $report['status_tag'] = $datastr['status_tags'];
                else
                    $report['status_tag'] = '[]';
                $report['status_tags'] = json_decode($report['status_tag']);

                if( isset($datastr['floor_tags']) )
                    $report['floor_tag'] = $datastr['floor_tags'];
                else
                    $report['floor_tag'] = '[]';
                $report['floor_tags'] = json_decode($report['floor_tag']);

                if( isset($datastr['build_tags']) )
                    $report['build_tag'] = $datastr['build_tags'];
                else
                    $report['build_tag'] = '[]';
                $report['build_tags'] = json_decode($report['build_tag']);

                if( isset($datastr['staff_tags']) )
                    $report['staff_tag'] = $datastr['staff_tags'];
                else
                    $report['staff_tag'] = '[]';
                $report['staff_tags'] = json_decode($report['staff_tag']);

                if( isset($datastr['category_tags']) )
                    $report['category_tag'] = $datastr['category_tags'];
                else
                    $report['category_tag'] = '[]';
                $report['category_tags'] = json_decode($report['category_tag']);

                if( isset($datastr['ticket_type_tags']) )
                    $report['ticket_type'] = $datastr['ticket_type_tags'];
                else
                    $report['ticket_type'] = '[]';
                $report['ticket_types'] = json_decode($report['ticket_type']);

                $report['orderby'] = 'start_date_time';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];

                $report['escalate_flag'] = $datastr['escalated_flag'];
                $report['filter_id'] = $datastr['id'];

                $data =  $this->makeGuestserviceReportData($report);
            }

            if($data_type == 'complaintreport') {
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Complaint';

                $report['group_by'] = $datastr['group_by'];
                if (empty($report['group_by'])) $report['group_by'] = 'Date';

                $report['report_type'] = $datastr['report_type'];
                $report['report_date'] = date('Y-m-d', strtotime('-1 days'));

                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;

                ////
                if (!isset($datastr['status_tags']))
                    $report['status_tag'] = '[]';
                else
                    $report['status_tag'] = $datastr['status_tags'];
                $report['status_tags'] = json_decode($report['status_tag']);

                if (!isset($datastr['sub_status_tags']))
                    $report['sub_status_tag'] = '[]';
                else
                    $report['sub_status_tag'] = $datastr['sub_status_tags'];
                $report['sub_status_tags'] = json_decode($report['sub_status_tag']);

                if (!isset($datastr['guest_type_tags']))
                    $report['guest_type_tag'] = '[]';
                else
                    $report['guest_type_tag'] = $datastr['guest_type_tags'];
                $report['guest_type_tags'] = json_decode($report['guest_type_tag']);

                if (!isset($datastr['property_tags']))
                    $report['property_tag'] = '[]';
                else
                    $report['property_tag'] = $datastr['property_tags'];
                $report['property_tags'] = json_decode($report['property_tag']);

                if (!isset($datastr['building_tags']))
                    $report['building_tag'] = '[]';
                else
                    $report['building_tag'] = $datastr['building_tags'];
                $report['building_tags'] = json_decode($report['building_tag']);

                if (!isset($datastr['location_tags']))
                    $report['location_tag'] = '[]';
                else
                    $report['location_tag'] = $datastr['location_tags'];
                $report['location_tags'] = json_decode($report['location_tag']);

                if (!isset($datastr['location_type_tags']))
                    $report['location_type_tag'] = '[]';
                else
                    $report['location_type_tag'] = $datastr['location_type_tags'];

                $report['location_type_tags'] = json_decode($report['location_type_tag']);

                if (!isset($datastr['department_tags']))
                    $report['department_tag'] = '[]';
                else
                    $report['department_tag'] = $datastr['department_tags'];
                $report['department_tags'] = json_decode($report['department_tag']);

                if (!isset($datastr['serverity_tags']))
                    $report['serverity_tag'] = '[]';
                else
                    $report['serverity_tag'] = $datastr['serverity_tags'];
                $report['serverity_tags'] = json_decode($report['serverity_tag']);

                if (!isset($datastr['main_category_tags']))
                    $report['main_category_tag'] = '[]';
                else
                    $report['main_category_tag'] = $datastr['main_category_tags'];
                $report['main_category_tags'] = json_decode($report['main_category_tag']);

                if (!isset($datastr['main_category_tags']))
                    $report['main_category_tag'] = '[]';
                else
                    $report['main_category_tag'] = $datastr['main_category_tags'];
                $report['main_category_tags'] = json_decode($report['main_category_tag']);

                if (!isset($datastr['category_tags']))
                    $report['category_tag'] = '[]';
                else
                    $report['category_tag'] = $datastr['category_tags'];
                $report['category_tags'] = json_decode($report['category_tag']);

                if (empty($datastr['sub_category_tags']))
                    $report['sub_category_tag'] = '[]';
                else
                    $report['sub_category_tag'] = $datastr['sub_category_tags'];
                $report['sub_category_tags'] = json_decode($report['sub_category_tag']);

                if (!isset($datastr['feedback_type_tags']))
                    $report['feedback_type_tag'] = '[]';
                else
                    $report['feedback_type_tag'] = $datastr['feedback_type_tags'];
                $report['feedback_type_tags'] = json_decode($report['feedback_type_tag']);

                if (!isset($datastr['feedback_source_tags']))
                    $report['feedback_source_tag'] = '[]';
                else
                    $report['feedback_source_tag'] = $datastr['feedback_source_tags'];
                $report['feedback_source_tags'] = json_decode($report['feedback_source_tag']);

                if (!isset($datastr['guest_name_tags']))
                    $report['guest_name_tag'] = '[]';
                else
                    $report['guest_name_tag'] = $datastr['guest_name_tags'];
                $report['guest_name_tags'] = json_decode($report['guest_name_tag']);

                if (!isset($datastr['guest_id_tags']))
                    $report['guest_id_tag'] = '[]';
                else
                    $report['guest_id_tag'] = $datastr['guest_id_tags'];
                $report['guest_id_tags'] = json_decode($report['guest_id_tag']);

                if (!isset($datastr['guest_email_tags']))
                    $report['guest_email_tag'] = '[]';
                else
                    $report['guest_email_tag'] = $datastr['guest_email_tags'];
                $report['guest_email_tags'] = json_decode($report['guest_email_tag']);

                if (!isset($datastr['guest_mobile_tags']))
                    $report['guest_mobile_tag'] = '[]';
                else
                    $report['guest_mobile_tag'] = $datastr['guest_mobile_tags'];
                $report['guest_mobile_tags'] = json_decode($report['guest_mobile_tag']);

                $report['orderby'] = 'created_at';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];
                $report['excel_type'] = $format;

                $data =  $this->makeComplaintreportReportData($report);
            }

            if($data_type == 'lnfreport') {

                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Complaint';

                $report['group_by'] = $datastr['group_by'];
                if (empty($report['group_by'])) $report['group_by'] = 'Date';

                $report['report_type'] = $datastr['report_type'];

                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;

                ////
                if (!isset($datastr['status_tags']))
                    $report['status_tag'] = '[]';
                else
                    $report['status_tag'] = $datastr['status_tags'];
                $report['status_tags'] = json_decode($report['status_tag']);

                if (!isset($datastr['guest_type_tags']))
                    $report['guest_type_tag'] = '[]';
                else
                    $report['guest_type_tag'] = $datastr['guest_type_tags'];
                $report['guest_type_tags'] = json_decode($report['guest_type_tag']);

                if (!isset($datastr['property_tags']))
                    $report['property_tag'] = '[]';
                else
                    $report['property_tag'] = $datastr['property_tags'];
                $report['property_tags'] = json_decode($report['property_tag']);

                if (!isset($datastr['location_tags']))
                    $report['location_tag'] = '[]';
                else
                    $report['location_tag'] = $datastr['location_tags'];
                $report['location_tags'] = json_decode($report['location_tag']);

                if (isset($datastr['department_tags']))
                    $report['department_tag'] = $datastr['department_tags'];
                else
                    $report['department_tag'] = '[]';
                $report['department_tags'] = json_decode($report['department_tag']);

                if (isset($datastr['serverity_tags']))
                    $report['serverity_tag'] = $datastr['serverity_tags'];
                else
                    $report['serverity_tag'] = '[]';
                $report['serverity_tags'] = json_decode($report['serverity_tag']);

                if (isset($datastr['main_category_tags']))
                    $report['main_category_tag'] = $datastr['main_category_tags'];
                else
                    $report['main_category_tag'] = '[]';
                $report['main_category_tags'] = json_decode($report['main_category_tag']);

                if (isset($datastr['category_tags']))
                    $report['category_tag'] = $datastr['category_tags'];
                else
                    $report['category_tag'] = '[]';
                $report['category_tags'] = json_decode($report['category_tag']);

                if (isset($datastr['sub_category_tags']))
                    $report['sub_category_tag'] = $datastr['sub_category_tags'];
                else
                    $report['sub_category_tag'] = '[]';

                $report['orderby'] = 'created_at';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];

                $data =  $this->makeComplaintreportReportData($report);
            }

            if($data_type == 'minibar') {
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Date';

                $report['report_type'] = $datastr['report_type'];

                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;

                if (!isset($datastr['room_tags'])) $report['room_tag'] = '[]';
                else $report['room_tag'] = $datastr['room_tags'];
                $report['room_tags'] = json_decode($report['room_tag']);

                if (!isset($datastr['staff_tags'])) $report['staff_tag'] = '[]';
                else $report['staff_tag'] = $datastr['staff_tags'];
                $report['staff_tags'] = json_decode($report['staff_tag']);

                if (!isset($datastr['item_tags'])) $report['item_tag'] = '[]';
                else $report['item_tag'] = $datastr['item_tags'];
				$report['item_tags'] = json_decode($report['item_tag']);

				if( isset($datastr['building_id']) )
                    $report['building_tag'] = $datastr['building_id'];
                else
                    $report['building_tag'] = '[]';
                $report['building_tags'] = json_decode($report['building_tag']);

                $report['orderby'] = 'created_at';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];
                $report['user_id'] = $request->get('user_id',0);

                $data = $this->makeMinibarReportData($report);
			}

			if($data_type == 'engineering') {
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Date';

                $report['report_type'] = $datastr['report_type'];

                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;

                if (!isset($datastr['status_tags'])) $report['status_tag'] = '[]';
                else $report['status_tag'] = $datastr['status_tags'];
                $report['status_tags'] = json_decode($report['status_tag']);

                if (!isset($datastr['staff_tags'])) $report['staff_tag'] = '[]';
                else $report['staff_tag'] = $datastr['staff_tags'];
                $report['staff_tags'] = json_decode($report['staff_tag']);

				if (!isset($datastr['wo_status_tags'])) $report['wo_status_tag'] = '[]';
                else $report['wo_status_tag'] = $datastr['wo_status_tags'];
                $report['wo_status_tags'] = json_decode($report['wo_status_tag']);

				if (!isset($datastr['location_tags'])) $report['location_tag'] = '[]';
                else $report['location_tag'] = $datastr['location_tags'];
                $report['location_tags'] = json_decode($report['location_tag']);

				if (!isset($datastr['category_tags'])) $report['category_tag'] = '[]';
                else $report['category_tag'] = $datastr['category_tags'];
                $report['category_tags'] = json_decode($report['category_tag']);

				if (!isset($datastr['equip_tags'])) $report['equip_tag'] = '[]';
                else $report['equip_tag'] = $datastr['equip_tags'];
                $report['equip_tags'] = json_decode($report['equip_tag']);

				if (!isset($datastr['equip_id_tags'])) $report['equip_id_tag'] = '[]';
                else $report['equip_id_tag'] = $datastr['equip_id_tags'];
                $report['equip_id_tags'] = json_decode($report['equip_id_tag']);

				$report['wo_flag'] = $datastr['wo_flag'];
                if (empty($report['wo_flag'])) $report['wo_flag'] = 'false';

                $report['orderby'] = 'created_at';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];
                $report['user_id'] = $request->get('user_id',0);

                $data = $this->makeEngineeringReportData($report);
            }

            if($data_type == 'hskpreport') {
                $report['report_by'] = $datastr['report_by'];
                if (empty($report['report_by'])) $report['report_by'] = 'Date';

                $report['report_type'] = $datastr['report_type'];

                $report['start_time'] = $start_time;
                $report['end_time'] = $end_time;


                if (!isset($datastr['room_tags'])) $report['room_tag'] = '[]';
                else $report['room_tag'] = $datastr['room_tags'];
                $report['room_tags'] = json_decode($report['room_tag']);

                if (!isset($datastr['staff_tags'])) $report['staff_tag'] = '[]';
                else $report['staff_tag'] = $datastr['staff_tags'];
                $report['staff_tags'] = json_decode($report['staff_tag']);

                if (!isset($datastr['status_tags'])) $report['status_tag'] = '[]';
                else $report['status_tag'] = $datastr['status_tags'];
                $report['status_tags'] = json_decode($report['status_tag']);

                $report['orderby'] = 'created_at';
                $report['sort'] = 'asc';
                $report['property_id'] = $datastr['property_id'];
                //$report['user_id'] = $request->get('user_id',0);

                $data = $this->makeHskpReportData($report);
            }

            if($data_type == 'audit') {
                $report['report_by'] = $datastr['report_by'];
                $report['report_type'] = $datastr['report_type'];
                if($report['report_type'] == 'Guest Rate Charges' ) $report['report_by'] = $report['report_type'];
                if($report['report_type'] == 'Extension' ) $report['report_by'] =  $report['report_type'];
                $report['property_id'] = $datastr['property_id'];
                $data = $this->makeAuditReportData($report);
            }

            //report font size
            $data['font-size']='7px';
            //-------------------------------------

            $filename = 'Detail_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i') . '_' . $id;
            $folder_path = public_path() . '/uploads/reports/';
            $path = $folder_path . $filename . '.html';

            //down file to destination path

            ob_start();

            if( $format == 'excel' )
                $format = config('app.report_file_type');

            if($data_type == 'callaccount') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.callaccount_pdf', compact('data'))->render();
                    //echo $content;
                }
                else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    if( $format == 'excel' )
                        $format = config('app.report_file_type');

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {
                        $excel->sheet('Call Charge Report', function($sheet) use ($data, $logo_path) {
                            $sheet->setOrientation('landscape');

                            $this->outputCallAccountLogo($sheet,$logo_path);

                            $this->outputCallAccountDescription($sheet, $data);

                            $row_num = 7;

							if ($data['report_by'] == 'Hour Status'){
								$row_num = $this->outputHourStatusReport($sheet, $row_num, $data);
								$row_num += 2;
							}elseif ($data['report_by'] == 'Frequency'){
								$row_num = $this->outputCallFrequencyReport($sheet, $row_num, $data);
								$row_num += 2;
							}
							
							else{

                            if ($data['report_by'] != 'Room')
                            {
                                $row_num = $this->outputGrantTotalReport($sheet, $row_num, $data);
                                $row_num += 2;
                            }

                            if (in_array('All' ,$data['call_sort']) || in_array( 'Guest Call' ,$data['call_sort']))
                            {
                                if ($data['report_by'] != 'Department')
                                {
                                    $row_num = $this->outputGrantTotalGuestReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                            }

                            if (in_array('All' ,$data['call_sort']) || in_array( 'Admin Call' ,$data['call_sort'])) {
                                if ($data['report_by'] != 'Room') {
                                    $row_num = $this->outputGrantTotalAdminReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }

                                if ($data['report_by'] == 'Property' || $data['report_by'] == 'Department') {
                                    $row_num = $this->outputGrantTotalAdminByBuildingDepartment($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                            }

                            if (in_array('All' ,$data['call_sort']) || in_array( 'Business Centre' ,$data['call_sort'])) {
                                if ($data['report_by'] != 'Room') {
                                    $row_num = $this->outputGrantTotalBusinessCentreReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }

                                if ($data['report_by'] == 'Property' || $data['report_by'] == 'Department') {
                                    $row_num = $this->outputGrantTotalBusinessCentreByBuildingDepartment($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                            }

                            if ($data['report_by'] == 'Call Date') {
                                $row_num = $this->outputGrantTotalAdminByBuildingCallDate($sheet, $row_num, $data);
                                $row_num += 2;
                            }

                            if( ($data['report_by'] == 'Extension' ) && ( $data['report_type'] == 'Summary' )) {
                                $row_num = $this->outputSummaryExtensionReport($sheet, $row_num, $data);
                            } else {

                                if( $data['report_by'] == 'Property' ) {
                                    if($data['report_type'] == 'Detailed') {
                                        $row_num = $this->outputDetailByBuildingRoomDepartment($sheet, $row_num, $data);
                                    }
                                } else {
                                    if (in_array('All' ,$data['call_sort']) || in_array( 'Guest Call' ,$data['call_sort'])
                                        && $data['report_type'] == 'Detailed'&& $data['report_by'] != 'Department' )
                                    {
                                        // Guest Calls
                                        $row_num = $this->outputGuestCallReport($sheet, $row_num, $data);
                                        $row_num += 2;
                                    }
                                    if (in_array('All' ,$data['call_sort']) || in_array( 'Business Centre' ,$data['call_sort'])
                                        && $data['report_type'] == 'Detailed'
                                        && $data['report_by'] != 'Room' )
                                    {
                                        // Admin Calls
                                        $row_num = $this->outputBusinessCentreCallReport($sheet, $row_num, $data);
                                    }

                                    if (in_array('All' ,$data['call_sort']) || in_array( 'Admin Call' ,$data['call_sort'])
                                        && $data['report_type'] == 'Detailed'
                                        && $data['report_by'] != 'Room' )
                                    {
                                        // Admin Calls
                                        $row_num = $this->outputAdminCallReport($sheet, $row_num, $data);
                                    }
                                }
                            }
						}
                        });
                    })->store($format, false, true);

                    $content_path = $content1['full'];
                }
            }

            if($data_type == 'callcenter')
            {
                if ($format == 'pdf') {
                    $content = view('frontend.report.callcenter_pdf', compact('data'))->render();
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {
                        $excel->sheet('Call Center Report', function($sheet) use ($data, $logo_path) {
                            $sheet->setOrientation('landscape');
                            $this->outputCallCenterLogo($sheet, $logo_path);
                            if(!empty($data['graph1']))
                                $this->outputCallCenterGraph($sheet, $data);

                            $this->outputCallCenterDescription($sheet, $data);

                            $row_num = 7;
                            ///////////
                            if($data['report_by'] == 'Agent' ) {
                                $row_num = $this->outputAgentCallcenterReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Call Status' ) {
                                $row_num = $this->outputCallStatusCallcenterReport($sheet, $row_num, $data);
                            }

                            if($data['report_by'] == 'Date') {
                                $row_num = $this->outputDateCallcenterReport($sheet, $row_num, $data);
                            }

                            if($data['report_by'] == 'Origin') {
                                $row_num = $this->outputOriginCallcenterReport($sheet, $row_num, $data);
                            }

                            if($data['report_by'] == 'Per Hour') {
                                $row_num = $this->outputPerHourCallcenterReport($sheet, $row_num, $data);

                            }
                            if($data['report_by'] == 'Call Type') {
                                $row_num = $this->outputCallTypeCallcenterReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Channel') {
                                $row_num = $this->outputChannelTypeCallcenterReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Agent Status') {
                                $row_num = $this->outputAgentStatusCallcenterReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Auto Attendant') {
                                $row_num = $this->outputAutoAttendantCallcenterReport($sheet, $row_num, $data);
                            }
                            ///////////
                            if ($data['report_by'] == 'Abandoned Summary') {
                                $row_num = $this->outputAbandonedCallcenterReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Agent Call Detailed') {
                                $row_num = $this->outputAgentCallDetailedReport($sheet, $row_num,$data) ;
                            }
                            if($data['report_by'] == 'Agent Activity') {
                                $row_num = $this->outputAgentActivityReport($sheet, $row_num,$data) ;
                            }
                            if($data['report_by'] == 'Call Type Summary by Agent') {
                                $row_num = $this->outputCallTypeSummaryByAgentReport($sheet, $row_num,$data);
                            }

                            if($data['report_by'] == 'Agent Activity Summary') {
                                $row_num = $this->outputAgentActivitySummaryReport($sheet, $row_num,$data);
                            }

                            if($data['report_by'] == 'Call Trafic Time Analysis') {
                                $row_num = $this->outputCallTimeTrafficReport($sheet, $row_num,$data) ;
                            }

                        });

                    })->store($format, false, true);
                    $content_path = $content1['full'];
                }
            }

            if($data_type == 'callclassify') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.callclassify_pdf', compact('data'))->render();
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {
                        $excel->sheet('Call Classify Report', function($sheet) use ($data,$logo_path) {
                            $sheet->setOrientation('landscape');
                            $this->outputCallclassifyLogo($sheet, $logo_path);
                            $this->outputCallclassifyDescription($sheet, $data);

                            $row_num = 7;
                            ///////////
                            if($data['report_by'] == 'Call Date' ) {
                                $row_num = $this->outputCallDateCallclassifyReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Department' ) {
                                $row_num = $this->outputDeaprtmentCallclassifyReport($sheet, $row_num, $data);
                            }

                            if($data['report_by'] == 'Destination') {
                                $row_num = $this->outputDestinationCallclassifyReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Extension') {
                                $row_num = $this->outputExtensionCallclassifyReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'User') {
                                $row_num = $this->outputUserCallclassifyReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Mobile') {
                                $row_num = $this->outputMobileCallclassifyReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Comparison') {
                                $row_num = $this->outputComparisonCallclassifyReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Call Status') {
                                $row_num = $this->outputCallStatusCallclassifyReport($sheet, $row_num, $data);
                            }
                            if($data['report_by'] == 'Cost Comaprison') {
                                $row_num = $this->outputCostCallclassifyReport($sheet, $row_num, $data);
                            }
                        });
                    })->store($format, false, true);

                    $content_path = $content1['full'];
                }
            }

            if($data_type == 'guestservice') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.guestservice', compact('data'))->render();
                    //	echo $content;
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {
                        $excel->sheet('Guest Service Report', function($sheet) use ($data,$logo_path) {
                            $sheet->setOrientation('landscape');

                            $this->outputCallAccountLogo($sheet,$logo_path);
                            $this->outputGuestServiceDescription($sheet, $data);

                            $row_num = 6;
                            if($data['report_by'] == 'Floor') {
                                $row_num = $this->outputGuestServiceFloorReport($sheet, $row_num, $data);
							}
							if($data['report_by'] == 'Complete Comments') {
								$row_num = $this->outputGuestServiceCompCommentsReport($sheet, $row_num, $data);
							}
                            if($data['report_type'] == 'Detailed' && $data['report_by'] != 'Floor' && $data['report_by'] != 'Complete Comments') {
                                $row_num = $this->outputGuestServiceDetailReport($sheet, $row_num, $data);
                            }

                            if($data['report_type'] == 'Summary' && $data['report_by'] != 'Floor' && $data['report_by'] != 'Complete Comments') {
                                $row_num = $this->outputGuestServiceSummaryReport($sheet, $row_num, $data);
                            }
                        });
                    })->store($format, false, true);
                    $content_path = $content1['full'];
                }
            }

            if($data_type == 'complaintreport') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.complaintreport', compact('data'))->render();
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $excel_instance = $this->getComplaintExcelInstance($property_id, $filename, $data, null);
                    $content1 = $excel_instance->store($format, false, true);

                    $content_path = $content1['full'];
                }
            }

            if($data_type == 'lnfreport') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.complaintreport', compact('data'))->render();
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {

                        $excel->sheet('Complaint Report', function($sheet) use ($data,$logo_path) {
                            $sheet->setOrientation('landscape');

                            $this->outputComplaintLogo($sheet,$logo_path);
                            $this->outputComplaintDescription($sheet, $data);

                            if($data['report_type'] == 'Frequency')
                            {
                                $row_num = 7;
                                $row_num = $this->outputComplaintFrequencyReport($sheet, $row_num, $data);
                            }
                            else if($data['report_type'] == 'Category')
                            {
                                $row_num = 7;
                                $row_num = $this->outputComplaintCategoryReport($sheet, $row_num, $data);
                            }
                            else {
                                $row_num = 1;
                                $row_num = $this->outputComplaintTitle($sheet, $data, $row_num);
                            }


                            if($data['report_by'] == 'Complaint' || $data['report_by'] == 'Sub-complaint' ) {
                                if( $data['report_type'] == 'Detailed' )
                                    $row_num = $this->outputComplaintDetailReport($sheet, $row_num, $data);
                                if( $data['report_type'] == 'Summary' )
                                    $row_num = $this->outputComplaintSummaryReport($sheet, $row_num, $data);
                                if( $data['report_type'] == 'Detailed' && $data['group_by'] == 'Category' )
                                    $row_num = $this->outputComplaintSummaryReport($sheet, $row_num, $data);
                            }
                            else
                            {
                                if( $data['report_type'] == 'Detailed' )
                                    $row_num = $this->outputCompensationDetailReport($sheet, $row_num, $data);
                                if( $data['report_type'] == 'Summary' )
                                    $row_num = $this->outputCompensationSummaryReport($sheet, $row_num, $data);
                            }
                        });

                    })->store($format, false, true);
                    $content_path = $content1['full'];
                }
            }

            if($data_type == 'minibar') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.minibar', compact('data'))->render();
                    //echo $content;
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {

                        $excel->sheet('Minibar Report', function($sheet) use ($data,$logo_path) {
                            $sheet->setOrientation('landscape');

                            $row_num = 8;
                            if(($data['report_type'] != 'Summary') || ($data['report_by'] != 'Service Item')){
                                $row_num = $this->outputMinibarDetailReport($sheet, $row_num, $data);
                            }

                            if(($data['report_type'] == 'Summary') && ($data['report_by'] == 'Service Item')) {
                                $row_num = $this->outputMinibarSummaryReport($sheet, $row_num, $data);
                                //$row_num = $this->outputMinibarDetailReport($sheet, $row_num, $data);
                            }

                            if($data['report_type'] == 'Stock') {
                                //$row_num = $this->outputMinibarSummaryReport($sheet, $row_num, $data);
                                //$row_num = $this->outputMinibarDetailReport($sheet, $row_num, $data);
                                $row_num = $this->outputMinibarStockReport($sheet, $row_num, $data);
                            }
                            /*
                                                        if($data['report_type'] == 'Summary') {
                                                            //$row_num = $this->outputMinibarSummaryReport($sheet, $row_num, $data);
                                                            $row_num = $this->outputMinibarDetailReport($sheet, $row_num, $data);
                                                        }

                            */
                        });

                    })->store($format, false, true);
                    $content_path = $content1['full'];
                }

			}

			if($data_type == 'engineering') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.engineering_pdf', compact('data'))->render();
                    //echo $content;
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {

                        $excel->sheet('Engineering Report', function($sheet) use ($data,$logo_path) {
							$sheet->setOrientation('landscape');

							$this->outputEngineeringLogo($sheet,$logo_path);
							$this->outputEngineeringDescription($sheet, $data);

                            $row_num = 8;
                            if(($data['report_by'] == 'Work Request')){
                                $row_num = $this->outputEngineeringWRReport($sheet, $row_num, $data);
                            }

							if(($data['report_by'] == 'Work Order')){
                                $row_num = $this->outputEngineeringWOReport($sheet, $row_num, $data);
                            }
                        });

                    })->store($format, false, true);
                    $content_path = $content1['full'];
                }
            }

            if($data_type == 'hskpreport') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.hskp_pdf', compact('data'))->render();
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    $content1 = Excel::create($filename, function($excel) use ($data, $logo_path) {

                        $excel->sheet('Housekeeping Report', function($sheet) use ($data,$logo_path) {
                            $sheet->setOrientation('landscape');

                            $this->outputComplaintLogo($sheet,$logo_path);
                            $this->outputHskpDescription($sheet, $data);

                            $row_num = 6;

                            $row_num = $this->outputHskpTitle($sheet, $data, $row_num);

                            if (($data['report_type'] == 'Detailed')&&( $data['report_by'] == 'Cleaning Status' ))
                            {
                                $row_num = $this->outputHskpStatusSummaryReport($sheet, $row_num, $data);
                                $row_num = $this->outputHskpStatusReport($sheet, $row_num, $data);
                            }

                            if( ($data['report_type'] == 'Detailed' ) && ( $data['report_by'] != 'Cleaning Status' ) && ($data['report_by'] != 'Roster Allocation') && ($data['report_by'] != 'Discrepancy'))
                            {
                                $row_num = $this->outputHskpDetailReport($sheet, $row_num, $data);
                            }

                            if (($data['report_type'] == 'Summary')&&( $data['report_by'] == 'Cleaning Status' ))
                            {
                                $row_num = $this->outputHskpStatusSummaryReport($sheet, $row_num, $data);

                            }

                            if(($data['report_type'] == 'Summary')&&( $data['report_by'] != 'Cleaning Status' ) && ($data['report_by'] != 'Roster Allocation') && ($data['report_by'] != 'Discrepancy'))
                            {
                                $row_num = $this->outputHskpSummaryReport($sheet, $row_num, $data);

                            }
                            if( $data['report_by'] == 'Roster Allocation' )
                            {
                                $row_num = $this->outputHskpRosterReport($sheet, $row_num, $data);
                            }
							if( $data['report_by'] == 'Discrepancy' )
							{
								$row_num = $this->outputHskpDiscrepancyReport($sheet, $row_num, $data);

							}

                        });

                    })->store($format, false, true);
                    $content_path = $content1['full'];
                }

            }

            if($data_type == 'audit') {
                if ($format == 'pdf') {
                    $content = view('frontend.report.audit_pdf', compact('data'))->render();
                } else {
                    $property_id = $request->get('property_id',4);

                    $property = DB::table('common_property')->where('id', $property_id)->first();
                    if (empty($property)) {
                        echo "Property does not exist";
                        return;
                    }
                    $logo_path = $property->logo_path;

                    if($report_type == 'Users') {
                        $content1 = Excel::create($filename, function ($excel) use ($data, $logo_path) {
                            $excel->sheet('Audit Report for Users', function ($sheet) use ($data, $logo_path) {
                                $sheet->setOrientation('landscape');

                                $this->outputAuditLogo($sheet, $logo_path);
                                $this->outputAuditDescription($sheet, $data);
                                $row_num = 5;

                                if ($data['report_by'] == 'Department') {
                                    $row_num = $this->outputAuditDepartmentReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                                if ($data['report_by'] == 'Job Role') {
                                    $row_num = $this->outputAuditJobRoleReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                                if ($data['report_by'] == 'Permission') {
                                    $row_num = $this->outputAuditPermissionReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                            });


                        })->store($format, false, true);
                        $content_path = $content1['full'];
                    } elseif ($report_type == 'Room') {
                        $content1 = Excel::create($filename, function ($excel) use ($data, $logo_path) {
                            $excel->sheet('Audit Report for Room', function ($sheet) use ($data, $logo_path) {
                                $sheet->setOrientation('landscape');

                                $this->outputAuditLogo($sheet, $logo_path);
                                $this->outputAuditDescription($sheet, $data);
                                $row_num = 5;

                                if ($data['report_by'] == 'Building') {
                                    $row_num = $this->outputAuditBuildingReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                                if ($data['report_by'] == 'Room Type') {
                                    $row_num = $this->outputAuditRoomTypeReport($sheet, $row_num, $data);
                                    $row_num += 2;
                                }
                            });

                        })->store($format, false, true);
                        $content_path = $content1['full'];
                    } elseif ($report_type == 'Guest Rate Charges') {
                        $content1 = Excel::create($filename, function ($excel) use ($data, $logo_path) {
                            $excel->sheet('Audit Report for Charges', function ($sheet) use ($data, $logo_path) {
                                $sheet->setOrientation('landscape');

                                $this->outputAuditLogo($sheet, $logo_path);
                                $this->outputAuditDescription($sheet, $data);
                                $row_num = 5;
                                $row_num = $this->outputAuditGuestRateChargeReport($sheet, $row_num, $data);
                                $row_num += 2;
                            });

                        })->store($format, false, true);
                        $content_path = $content1['full'];
                    } elseif ($report_type == 'Extension') {
                        $content1 = Excel::create($filename, function ($excel) use ($data, $logo_path) {
                            $excel->sheet('Audit Report for Extension', function ($sheet) use ($data, $logo_path) {
                                $sheet->setOrientation('landscape');

                                $this->outputAuditLogo($sheet, $logo_path);
                                $this->outputAuditDescription($sheet, $data);
                                $row_num = 5;
                                $row_num = $this->outputAuditExtensionReport($sheet, $row_num, $data);
                                $row_num += 2;
                            });

                        })->store($format, false, true);
                        $content_path = $content1['full'];
                    } elseif($report_type == 'Minibar') {
                        $content1 = Excel::create($filename, function ($excel) use ($data, $logo_path) {
                            $excel->sheet('Audit Report for Minibar', function ($sheet) use ($data, $logo_path) {
                                $sheet->setOrientation('landscape');

                                $this->outputAuditLogo($sheet, $logo_path);
                                $this->outputAuditDescription($sheet, $data);
                                $row_num = 5;
                                $row_num = $this->outputAuditMinibarReport($sheet, $row_num, $data);
                                $row_num += 2;
                            });
                        })->store($format, false, true);
                        $content_path = $content1['full'];
                    }
                }

            }

            $ip = DB::table('property_setting as ps')
                ->select(DB::raw('ps.value'))
                ->where('ps.settings_key', 'hotlync_host')
                ->first();

            $recipient_name = DB::table('common_users as cu')
                ->select(DB::raw('cu.first_name'))
                ->where('cu.email', $recipient)
                ->first();
            $multiple = explode(",",$recipient);

            $settings = PropertySetting::getReportSetting($report['property_id']);
            $property_id = $request->get('property_id',4);

            if ($format == 'pdf') {
                echo $content;
                $pdf_path = $folder_path . $filename . '.pdf';
                file_put_contents($path, ob_get_contents());

                ob_clean();

                $input = [];
                $input['ip'] = $ip->value;
                $input['host_url'] = $ip->value . 'uploads/reports/' .$filename.'.pdf' ;
                if (count($multiple) > 1) {
                    $input['name'] = '';
                } else {
					if (!empty($recipient_name)){
                    	$input['name'] = $recipient_name->first_name;
					}
					else{
						$input['name'] = '';
					}
                }
                $input['filename'] = $schedule_name;

                $request = [];
                if ($attached == 1) {
                    $request['filename'] = $filename . '.pdf';
                    $request['content'] = view('emails.schedule_report_attach', ['info' => $input])->render();
                } else{
                    $request['content'] = view('emails.schedule_report', ['info' => $input])->render();
                }

                //$request['path'] = $path;
                //$request['folder_path'] = $folder_path;
                $request['to'] = $recipient;
                //$request['subject'] = $settings['schedule_report_subject'];
                $request['subject'] = $schedule_name;
                $request['html'] = $settings['schedule_report_subject'];

                $smtp = Functions::getMailSetting($setting_data->property_id, '');
                $request['smtp'] = $smtp;

                $options = [];
                $options['html'] = $path;
                $options['pdf'] = $pdf_path;
                $options['attach_flag'] = $attached;
                //$options['paperSize'] = array('format' => 'A4', 'orientation' => 'landscape');
                $options['paperSize'] = ['format' => 'A4', 'orientation' => 'portrait'];
                $request['options'] = $options;

                $message = [];
                $message['type'] = 'report_pdf';
                $message['content'] = $request;
                Redis::publish('notify', json_encode($message));
                return Response::json($request);
            } else {
                $smtp = Functions::getMailSetting($setting_data->property_id, '');
                $input = [];
                $input['ip'] = $ip->value;
                if (count($multiple) > 1) {
                    $input['name'] = '';
                } else {
                    if (!empty($recipient_name)){
                    	$input['name'] = $recipient_name->first_name;
					}
					else{
						$input['name'] = '';
					}
                }
                $input['filename'] = $schedule_name;
                $input['host_url'] =  $ip->value .  'uploads/reports/' .$filename.'.xls' ;
                $message = [];

                if ($attached == 1)
                {
                    $message['attach'] = $content_path;
                    $message['content'] = view('emails.schedule_report_attach', ['info' => $input])->render();
                }
                else
                {
                    $message['content'] = view('emails.schedule_report', ['info' => $input])->render();
                }
                $message['type'] ='excel';
                $message['smtp'] = $smtp;
                $message['to'] = $recipient;
                $message['subject'] =  $schedule_name;

                Redis::publish('notify', json_encode($message));
                echo json_encode($message);
            }
        }

        //Redis::publish('notify', json_encode($message));
        //return Response::json($request);
        //return view('frontend.report.callaccount_pdf', compact('data'));
    }

	public function makeCallaccountReportDataforHour($report) {

		$report_type = $report['report_type'];
		$call_sort = $report['call_sort'];
		$report_by = $report['report_by'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$call_types = $report['call_types'];
		$department_tags = $report['department_tags'];
		$room_tags = $report['room_tags'];
		$extension_tags = $report['extension_tags'];
		$accesscode_tags = $report['accesscode_tags'];
		$destination_tags = $report['destination_tags'];
		$section_tags = $report['section_tags'];
		$calledno_tags = $report['calledno_tags'];
		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];
		$building_id = $report['building_tags'];
		$callcharge = $report['callcharge'];
		$transfer = $report['transfer'];
		$duration = $report['call_duration'];
		$duration_time = $report['call_duration_time'];

		if(in_array('All', $call_sort) || in_array('Admin Call', $call_sort))
		{
		$query = DB::table('call_admin_calls as ac')
				->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				->join('common_building as cb', 'ac.building_id', '=', 'cb.id')
				->join('common_department as dept', 'ac.dept_id', '=', 'dept.id');
			

			$query->where('ac.property_id', $property_id);

			$query_department = clone $query;

			if( count($building_id) > 0 )
				$query->whereIn('cb.name', $building_id);

			if (!empty($duration_time)){
				if ($duration == '='){
					$query->where('ac.duration','=',$duration_time*60);
				}
				elseif($duration == '>'){
					$query->where('ac.duration','>',$duration_time*60);
				}
				elseif($duration == '<'){
					$query->where('ac.duration','<',$duration_time*60);
				}
				elseif($duration == '>='){
					$query->where('ac.duration','>=',$duration_time*60);
				}
				else{
					$query->where('ac.duration','<=',$duration_time*60);
				}
			}

			if( count($call_types) > 0 )
				$query->whereIn('ac.call_type', $call_types);


			$time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
			$query->whereRaw($time_range);


			if( $callcharge == 'true' )
				$query->where('ac.carrier_charges', '>', 0);

			if (count($department_tags) > 0)
				$query->whereIn('dept.department', $department_tags);

			if (count($extension_tags) > 0)
				$query->whereIn('se.extension', $extension_tags);


	$data_query = clone $query;

	$data_list = $data_query
				->orderBy($orderby, $sort)
				->orderby('dept.department')
				->groupby('se.extension')
				->select(DB::raw("DATE(ac.call_date) as call_date,
					count(*) as total_calls,
					dept.department,
					se.extension,
					sum(ac.call_type != 'Missed' and ac.duration != 0) as tot_ans,
					sum(ac.call_type = 'Missed'  or ac.duration = 0 ) as tot_unans,
					
					sum(ac.call_type = 'Received' and LENGTH(ac.called_no) <= 4 and ac.duration = 0) as unanswered_int_incoming,
					sum(ac.call_type = 'Missed' and LENGTH(ac.called_no) <= 4) as unanswered_int1_outgoing,
					sum(ac.call_type = 'Internal' and ac.duration = 0) as unanswered_int2_outgoing,
					sum(ac.call_type = 'Received' and LENGTH(ac.called_no) > 4 and ac.duration = 0) as unanswered_ext_incoming,
					sum(ac.call_type = 'Missed' and LENGTH(ac.called_no) > 4) as unanswered_ext1_outgoing,
					sum(ac.call_type != 'Internal' and ac.call_type != 'Missed' and ac.call_type != 'Received' and  ac.duration = 0) as unanswered_ext2_outgoing,
					sum(ac.call_type = 'Internal'  and ac.duration != 0) as answered_int_outgoing,
					sum(ac.call_type = 'Received' and LENGTH(ac.called_no) <= 4  and ac.duration != 0) as answered_int_incoming,
					sum(ac.call_type = 'Received' and LENGTH(ac.called_no) > 4 and  ac.duration != 0) as answered_ext_incoming,
					sum(ac.call_type != 'Internal' and ac.call_type != 'Missed' and ac.call_type != 'Received'  and  ac.duration != 0) as answered_ext_outgoing,
					
					sum(time(ac.start_time) >= '00:00:00' and time(ac.start_time) < '07:00:00') as seven,
					sum(time(ac.start_time) >= '07:00:00' and time(ac.start_time) < '08:00:00') as eight,
					sum(time(ac.start_time) >= '08:00:00' and time(ac.start_time) < '09:00:00') as nine,
					sum(time(ac.start_time) >= '09:00:00' and time(ac.start_time) < '10:00:00') as ten,
					sum(time(ac.start_time) >= '10:00:00' and time(ac.start_time) < '11:00:00') as eleven,
					sum(time(ac.start_time) >= '11:00:00' and time(ac.start_time) < '12:00:00') as twelve,
					sum(time(ac.start_time) >= '12:00:00' and time(ac.start_time) < '13:00:00') as thirteen,
					sum(time(ac.start_time) >= '13:00:00' and time(ac.start_time) < '14:00:00') as fourteen,
					sum(time(ac.start_time) >= '14:00:00' and time(ac.start_time) < '15:00:00') as fifteen,
					sum(time(ac.start_time) >= '15:00:00' and time(ac.start_time) < '16:00:00') as sixteen,
					sum(time(ac.start_time) >= '16:00:00' and time(ac.start_time) < '17:00:00') as seventeen,
					sum(time(ac.start_time) >= '17:00:00' and time(ac.start_time) < '18:00:00') as eighteen,
					sum(time(ac.start_time) >= '18:00:00' and time(ac.start_time) < '19:00:00') as ninteen,
					sum(time(ac.start_time) >= '19:00:00' and time(ac.start_time) < '20:00:00') as twenty,
					sum(time(ac.start_time) >= '20:00:00' and time(ac.start_time) < '21:00:00') as twentyone,
					sum(time(ac.start_time) >= '21:00:00' and time(ac.start_time) < '22:00:00') as twentytwo,
					sum(time(ac.start_time) >= '22:00:00' and time(ac.start_time) < '23:00:00') as twentythree,
					sum(time(ac.start_time) >= '23:00:00' and time(ac.start_time) < '24:00:00') as twentyfour
					
					"))
				->get();

				$summarylist_admin = [];

				foreach ($data_list as $row) {
					$dept = $row->department;
					$ext = $row->extension;
/////////////////////////////////////
		//			Admin Incoming calls
					$query1 = DB::table('call_admin_calls as ac')
                        ->join('call_staff_extn as se', 'ac.called_no', '=', 'se.extension')
                        ->join('call_staff_extn as cse', 'ac.extension_id', '=', 'cse.id')
                        ->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                        ->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
                        ->join('common_department as dept', 'cs.dept_id', '=', 'dept.id');

                    $query1->where('dept.property_id', $property_id);
                    $query1->where('ac.called_no', $ext);

					if( count($building_id) > 0 )
                        $query1->whereIn('cb.name', $building_id);

                    if (!empty($duration_time)){
                        if ($duration == '='){
                            $query1->where('ac.duration','=',$duration_time*60);
                        }
                        elseif($duration == '>'){
                            $query1->where('ac.duration','>',$duration_time*60);
                        }
                        elseif($duration == '<'){
                            $query1->where('ac.duration','<',$duration_time*60);
                        }
                        elseif($duration == '>='){
                            $query1->where('ac.duration','>=',$duration_time*60);
                        }
                        else{
                            $query1->where('ac.duration','<=',$duration_time*60);
                        }
                    }

                    //	if( count($call_types) > 0 )
                    //		$query->whereIn('ac.call_type', $call_types);

                    $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
                    $query1->whereRaw($time_range);

                    if( $callcharge == 'true' )
                        $query1->where('ac.carrier_charges', '>', 0);

                    if (count($department_tags) > 0)
                        $query1->whereIn('dept.department', $department_tags);

                    if (count($extension_tags) > 0)
                        $query1->whereIn('se.extension', $extension_tags);

					$data_query1 = clone $query1;
					$data_list1 = $data_query1
						->orderBy($orderby, $sort)
					//	->orderby('dept.department')
						->groupby('se.extension')
						->select(DB::raw("DATE(ac.call_date) as call_date,
							count(*) as total_calls,
							dept.department,
							se.extension,
							sum(ac.duration != 0) as tot_ans,
							sum(ac.call_type = 'Missed'  or ac.duration = 0 ) as tot_unans,
							sum(ac.duration = 0) as unanswered_int_incoming,
							sum(ac.duration != 0) as answered_int_incoming,
							sum(time(ac.start_time) >= '00:00:00' and time(ac.start_time) < '07:00:00') as seven,
							sum(time(ac.start_time) >= '07:00:00' and time(ac.start_time) < '08:00:00') as eight,
							sum(time(ac.start_time) >= '08:00:00' and time(ac.start_time) < '09:00:00') as nine,
							sum(time(ac.start_time) >= '09:00:00' and time(ac.start_time) < '10:00:00') as ten,
							sum(time(ac.start_time) >= '10:00:00' and time(ac.start_time) < '11:00:00') as eleven,
							sum(time(ac.start_time) >= '11:00:00' and time(ac.start_time) < '12:00:00') as twelve,
							sum(time(ac.start_time) >= '12:00:00' and time(ac.start_time) < '13:00:00') as thirteen,
							sum(time(ac.start_time) >= '13:00:00' and time(ac.start_time) < '14:00:00') as fourteen,
							sum(time(ac.start_time) >= '14:00:00' and time(ac.start_time) < '15:00:00') as fifteen,
							sum(time(ac.start_time) >= '15:00:00' and time(ac.start_time) < '16:00:00') as sixteen,
							sum(time(ac.start_time) >= '16:00:00' and time(ac.start_time) < '17:00:00') as seventeen,
							sum(time(ac.start_time) >= '17:00:00' and time(ac.start_time) < '18:00:00') as eighteen,
							sum(time(ac.start_time) >= '18:00:00' and time(ac.start_time) < '19:00:00') as ninteen,
							sum(time(ac.start_time) >= '19:00:00' and time(ac.start_time) < '20:00:00') as twenty,
							sum(time(ac.start_time) >= '20:00:00' and time(ac.start_time) < '21:00:00') as twentyone,
							sum(time(ac.start_time) >= '21:00:00' and time(ac.start_time) < '22:00:00') as twentytwo,
							sum(time(ac.start_time) >= '22:00:00' and time(ac.start_time) < '23:00:00') as twentythree,
							sum(time(ac.start_time) >= '23:00:00' and time(ac.start_time) < '24:00:00') as twentyfour
							
							"))
						->first();
			//////
			// Guest incoming Calls

					$query2 = DB::table('call_guest_call as ac')
                        ->join('call_staff_extn as se', 'ac.called_no', '=', 'se.extension')
                        ->join('call_guest_extn as cse', 'ac.extension_id', '=', 'cse.id')
                        ->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                        ->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
                        ->join('common_department as dept', 'cs.dept_id', '=', 'dept.id');

                        $query2->where('dept.property_id', $property_id);
                        $query2->where('ac.called_no', $ext);



                        if( count($building_id) > 0 )
                        $query2->whereIn('cb.name', $building_id);

                    if (!empty($duration_time)){
                        if ($duration == '='){
                            $query2->where('ac.duration','=',$duration_time*60);
                        }
                        elseif($duration == '>'){
                            $query2->where('ac.duration','>',$duration_time*60);
                        }
                        elseif($duration == '<'){
                            $query2->where('ac.duration','<',$duration_time*60);
                        }
                        elseif($duration == '>='){
                            $query2->where('ac.duration','>=',$duration_time*60);
                        }
                        else{
                            $query2->where('ac.duration','<=',$duration_time*60);
                        }

                    }


                    //	if( count($call_types) > 0 )
                    //		$query1->whereIn('ac.call_type', $call_types);

                    $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
                    $query2->whereRaw($time_range);

                    if( $callcharge == 'true' )
                        $query2->where('ac.total_charges', '>', 0);

                    if (count($department_tags) > 0)
                        $query2->whereIn('dept.department', $department_tags);

                    if (count($extension_tags) > 0)
                        $query2->whereIn('se.extension', $extension_tags);

						$data_query2 = clone $query2;
						$data_list2 = $data_query2
							->orderBy($orderby, $sort)
						//	->orderby('dept.department')
							->groupby('se.extension')
							->select(DB::raw("DATE(ac.call_date) as call_date,
								count(*) as total_calls,
								dept.department,
								se.extension,
								sum(ac.duration != 0) as tot_ans,
								sum(ac.call_type = 'Missed'  or ac.duration = 0 ) as tot_unans,
								sum(ac.duration = 0) as unanswered_int_incoming,
								sum(ac.duration != 0) as answered_int_incoming,
								sum(time(ac.start_time) >= '00:00:00' and time(ac.start_time) < '07:00:00') as seven,
								sum(time(ac.start_time) >= '07:00:00' and time(ac.start_time) < '08:00:00') as eight,
								sum(time(ac.start_time) >= '08:00:00' and time(ac.start_time) < '09:00:00') as nine,
								sum(time(ac.start_time) >= '09:00:00' and time(ac.start_time) < '10:00:00') as ten,
								sum(time(ac.start_time) >= '10:00:00' and time(ac.start_time) < '11:00:00') as eleven,
								sum(time(ac.start_time) >= '11:00:00' and time(ac.start_time) < '12:00:00') as twelve,
								sum(time(ac.start_time) >= '12:00:00' and time(ac.start_time) < '13:00:00') as thirteen,
								sum(time(ac.start_time) >= '13:00:00' and time(ac.start_time) < '14:00:00') as fourteen,
								sum(time(ac.start_time) >= '14:00:00' and time(ac.start_time) < '15:00:00') as fifteen,
								sum(time(ac.start_time) >= '15:00:00' and time(ac.start_time) < '16:00:00') as sixteen,
								sum(time(ac.start_time) >= '16:00:00' and time(ac.start_time) < '17:00:00') as seventeen,
								sum(time(ac.start_time) >= '17:00:00' and time(ac.start_time) < '18:00:00') as eighteen,
								sum(time(ac.start_time) >= '18:00:00' and time(ac.start_time) < '19:00:00') as ninteen,
								sum(time(ac.start_time) >= '19:00:00' and time(ac.start_time) < '20:00:00') as twenty,
								sum(time(ac.start_time) >= '20:00:00' and time(ac.start_time) < '21:00:00') as twentyone,
								sum(time(ac.start_time) >= '21:00:00' and time(ac.start_time) < '22:00:00') as twentytwo,
								sum(time(ac.start_time) >= '22:00:00' and time(ac.start_time) < '23:00:00') as twentythree,
								sum(time(ac.start_time) >= '23:00:00' and time(ac.start_time) < '24:00:00') as twentyfour
								
								"))
							->first();


					////////

					if (empty($data_list1) && !empty($data_list2)){

						$row->total_calls = $row->total_calls + $data_list2->total_calls;
					$row->tot_ans = $row->tot_ans + $data_list2->tot_ans;
					$row->tot_unans = $row->tot_unans + $data_list2->tot_unans;
					$row->unanswered_int_incoming = $data_list2->unanswered_int_incoming;
					$row->answered_int_incoming = $data_list2->answered_int_incoming;
					$row->seven = $row->seven + $data_list2->seven;
					$row->eight = $row->eight + $data_list2->eight;
					$row->nine = $row->nine + $data_list2->nine;
					$row->ten = $row->ten + $data_list2->ten;
					$row->eleven = $row->eleven + $data_list2->eleven;
					$row->twelve = $row->twelve + $data_list2->twelve;
					$row->thirteen = $row->thirteen + $data_list2->thirteen;
					$row->fourteen = $row->fourteen + $data_list2->fourteen;
					$row->fifteen = $row->fifteen + $data_list2->fifteen;
					$row->sixteen = $row->sixteen + $data_list2->sixteen;
					$row->seventeen = $row->seventeen + $data_list2->seventeen;
					$row->eighteen = $row->eighteen + $data_list2->eighteen;
					$row->ninteen = $row->ninteen + $data_list2->ninteen;
					$row->twenty = $row->twenty + $data_list2->twenty;
					$row->twentyone = $row->twentyone + $data_list2->twentyone;
					$row->twentytwo = $row->twentytwo + $data_list2->twentytwo;
					$row->twentythree = $row->twentythree + $data_list2->twentythree;
					$row->twentyfour = $row->twentyfour + $data_list2->twentyfour;
						}

					elseif (empty($data_list2) && !empty($data_list1)){

					$row->total_calls = $row->total_calls + $data_list1->total_calls;
					$row->tot_ans = $row->tot_ans + $data_list1->tot_ans;
					$row->tot_unans = $row->tot_unans + $data_list1->tot_unans;
					$row->unanswered_int_incoming = $data_list1->unanswered_int_incoming;
					$row->answered_int_incoming = $data_list1->answered_int_incoming;
					$row->seven = $row->seven + $data_list1->seven;
					$row->eight = $row->eight + $data_list1->eight;
					$row->nine = $row->nine + $data_list1->nine;
					$row->ten = $row->ten + $data_list1->ten;
					$row->eleven = $row->eleven + $data_list1->eleven;
					$row->twelve = $row->twelve + $data_list1->twelve;
					$row->thirteen = $row->thirteen + $data_list1->thirteen;
					$row->fourteen = $row->fourteen + $data_list1->fourteen;
					$row->fifteen = $row->fifteen + $data_list1->fifteen;
					$row->sixteen = $row->sixteen + $data_list1->sixteen;
					$row->seventeen = $row->seventeen + $data_list1->seventeen;
					$row->eighteen = $row->eighteen + $data_list1->eighteen;
					$row->ninteen = $row->ninteen + $data_list1->ninteen;
					$row->twenty = $row->twenty + $data_list1->twenty;
					$row->twentyone = $row->twentyone + $data_list1->twentyone;
					$row->twentytwo = $row->twentytwo + $data_list1->twentytwo;
					$row->twentythree = $row->twentythree + $data_list1->twentythree;
					$row->twentyfour = $row->twentyfour + $data_list1->twentyfour;
					}

					else if(!empty($data_list1) && !empty($data_list2)){
					

					$row->total_calls = $row->total_calls + $data_list1->total_calls + $data_list2->total_calls;
					$row->tot_ans = $row->tot_ans + $data_list1->tot_ans + $data_list2->tot_ans;
					$row->tot_unans = $row->tot_unans + $data_list1->tot_unans + $data_list2->tot_unans;
					$row->unanswered_int_incoming = $data_list1->unanswered_int_incoming + $data_list2->unanswered_int_incoming;
					$row->answered_int_incoming = $data_list1->answered_int_incoming + $data_list2->answered_int_incoming;
					$row->seven = $row->seven + $data_list1->seven + $data_list2->seven;
					$row->eight = $row->eight + $data_list1->eight + $data_list2->eight;
					$row->nine = $row->nine + $data_list1->nine + $data_list2->nine;
					$row->ten = $row->ten + $data_list1->ten + $data_list2->ten;
					$row->eleven = $row->eleven + $data_list1->eleven + $data_list2->eleven;
					$row->twelve = $row->twelve + $data_list1->twelve + $data_list2->twelve;
					$row->thirteen = $row->thirteen + $data_list1->thirteen + $data_list2->thirteen;
					$row->fourteen = $row->fourteen + $data_list1->fourteen + $data_list2->fourteen;
					$row->fifteen = $row->fifteen + $data_list1->fifteen + $data_list2->fifteen;
					$row->sixteen = $row->sixteen + $data_list1->sixteen + $data_list2->sixteen;
					$row->seventeen = $row->seventeen + $data_list1->seventeen + $data_list2->seventeen;
					$row->eighteen = $row->eighteen + $data_list1->eighteen + $data_list2->eighteen;
					$row->ninteen = $row->ninteen + $data_list1->ninteen + $data_list2->ninteen;
					$row->twenty = $row->twenty + $data_list1->twenty + $data_list2->twenty;
					$row->twentyone = $row->twentyone + $data_list1->twentyone + $data_list2->twentyone;
					$row->twentytwo = $row->twentytwo + $data_list1->twentytwo + $data_list2->twentytwo;
					$row->twentythree = $row->twentythree + $data_list1->twentythree + $data_list2->twentythree;
					$row->twentyfour = $row->twentyfour + $data_list1->twentyfour + $data_list2->twentyfour;

					}
					else{

					$row->unanswered_int_incoming = 0;
					$row->answered_int_incoming = 0;

					}

////////////////////////////////////
					$summarylist_admin[$dept][] = $row;
				}
		
		$ret['summary'] = $summarylist_admin;


		}

		
		$currency = DB::table('property_setting as ps')
			->select(DB::raw('ps.value'))
			->where('ps.settings_key', 'currency')
			->first();

		$ret['currency'] = $currency->value;
		$ret['report_by'] = $report_by;
		$ret['period'] = date_format(new DateTime($start_time),"d-M-Y H:i").' to '.date_format(new DateTime($end_time),"d-M-Y H:i");
		$ret['report_type'] = $report_type;
		$ret['property'] = Property::find($report['property_id']);


		$this->getReportDescription($property_id, $building_id, $call_types, $call_sort, $ret,
			$department_tags, $room_tags, $extension_tags, $destination_tags, $accesscode_tags, $calledno_tags);

		return $ret;

	}


	public function makeCallaccountReportDataforFrequency($report) {

		$report_type = $report['report_type'];
		$call_sort = $report['call_sort'];
		$report_by = $report['report_by'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$call_types = $report['call_types'];
		$department_tags = $report['department_tags'];
		$room_tags = $report['room_tags'];
		$extension_tags = $report['extension_tags'];
		$accesscode_tags = $report['accesscode_tags'];
		$destination_tags = $report['destination_tags'];
		$section_tags = $report['section_tags'];
		$calledno_tags = $report['calledno_tags'];
		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];
		$building_id = $report['building_tags'];
		$callcharge = $report['callcharge'];
		$transfer = $report['transfer'];
		$duration = $report['call_duration'];
		$duration_time = $report['call_duration_time'];

		$summarylist_admin = [];
		if(in_array('All', $call_sort) || in_array('Admin Call', $call_sort))
		{
		$query = DB::table('call_admin_calls as ac')
				->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				
				->join('common_building as cb', 'ac.building_id', '=', 'cb.id');
				
		
			$query->where('ac.property_id', $property_id);
			$query->where('ac.call_type','!=', 'Received');

			$query_department = clone $query;

			if( count($building_id) > 0 )
				$query->whereIn('cb.name', $building_id);

			if (!empty($duration_time)){
				if ($duration == '='){
					$query->where('ac.duration','=',$duration_time*60);
				}
				elseif($duration == '>'){
					$query->where('ac.duration','>',$duration_time*60);
				}
				elseif($duration == '<'){
					$query->where('ac.duration','<',$duration_time*60);
				}
				elseif($duration == '>='){
					$query->where('ac.duration','>=',$duration_time*60);
				}
				else{
					$query->where('ac.duration','<=',$duration_time*60);
				}
			}

		
			$time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
			$query->whereRaw($time_range);


			if( $callcharge == 'true' )
				$query->where('ac.carrier_charges', '>', 0);

			if (count($extension_tags) > 0)
				$query->whereIn('se.extension', $extension_tags);

			if (count($calledno_tags) > 0)
					$query->whereIn('ac.called_no', $calledno_tags);

	$data_query = clone $query;

	
	$data_list = $data_query
			//	->orderBy('ac.called_no', 'desc')
			//	->orderBy('total_calls', 'desc')
				->groupBy('se.extension')
				->groupBy('ac.called_no')
				->select(DB::raw("
					se.extension,
					count(ac.id) as total_calls,
					ac.called_no as called_no,
					sum(ac.duration) as tot_dur,
					sum(ac.carrier_charges) as tot_chrg
				
					
					"))
				->get();

				

				foreach ($data_list as $row) {
					$ext = $row->extension;
					$summarylist_admin[$ext][] = $row;
				}
	
		}

		$ret['summary'] = $summarylist_admin;
		
		$currency = DB::table('property_setting as ps')
			->select(DB::raw('ps.value'))
			->where('ps.settings_key', 'currency')
			->first();

		$ret['currency'] = $currency->value;
		$ret['report_by'] = $report_by;
		$ret['period'] = date_format(new DateTime($start_time),"d-M-Y H:i").' to '.date_format(new DateTime($end_time),"d-M-Y H:i");
		$ret['report_type'] = $report_type;
		$ret['property'] = Property::find($report['property_id']);


		$this->getReportDescription($property_id, $building_id, $call_types, $call_sort, $ret,
			$department_tags, $room_tags, $extension_tags, $destination_tags, $accesscode_tags, $calledno_tags);

		return $ret;

	}
	

	public function makeCallaccountReportData($report) {

		$report_type = $report['report_type'];
		$call_sort = $report['call_sort'];
		$report_by = $report['report_by'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$call_types = $report['call_types'];
		$department_tags = $report['department_tags'];
		$room_tags = $report['room_tags'];
		$extension_tags = $report['extension_tags'];
		$accesscode_tags = $report['accesscode_tags'];
		$destination_tags = $report['destination_tags'];
		$section_tags = $report['section_tags'];
		$calledno_tags = $report['calledno_tags'];
		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];
		$building_id = $report['building_tags'];
		$callcharge = $report['callcharge'];
		$transfer = $report['transfer'];
		$duration = $report['call_duration'];
		$duration_time = $report['call_duration_time'];

		$ret = [];
		$ret['transfer']= $transfer;
		$total_value = [];
		$by_build_data = [];
		$by_building_room_department_data = [];
		$ret['guest_guest_extension_receive_list'] = [];
		$ret['guest_admin_extension_receive_list'] = [];
		$ret['admin_admin_extension_receive_list'] = [];
		$ret['admin_guest_extension_receive_list'] = [];

		$total_value['International'] = 0;
		$total_value['Mobile'] = 0;
		$total_value['International'] = 0;
		$total_value['Local'] = 0;
		$total_value['National'] = 0;
		$total_value['Toll'] = 0;
		$total_value['Total'] = 0.0;
		$total_value['Total_Carrier'] = 0;
		$total_value['Total_Hotel'] = 0;
		$total_value['Profit'] = 0;


		$guest_query = null;
//		if( $call_sort == 'All' || $call_sort == 'Guest Call' ) {

		if((in_array('All', $call_sort)|| in_array('Guest Call', $call_sort))&&($report_by != 'Access Code')) {
			$query = DB::table('call_guest_call as gc')
				->leftJoin('common_room as cr', 'gc.room_id', '=', 'cr.id')
				->leftJoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->leftJoin('call_guest_extn as ge', 'gc.extension_id', '=', 'ge.id')
				->leftJoin('call_destination as cd', 'gc.destination_id', '=', 'cd.id')
//					->leftJoin('call_guest_charge_map as gcm', 'gc.guest_charge_rate_id', '=', 'gcm.id')
//					->leftJoin('call_carrier_charges as cc', 'gcm.carrier_charges', '=', 'cc.id')
//					->leftJoin('call_hotel_charges as hc', 'gcm.hotel_charges', '=', 'hc.id')
//					->leftJoin('call_tax as tax', 'gcm.tax', '=', 'tax.id')
//				->leftJoin('common_guest as cg', 'gc.guest_id', '=', 'cg.guest_id')
				->leftJoin('common_guest as cg', function($join) {
					$join->on('gc.guest_id', '=', 'cg.guest_id');
					$join->on('cb.property_id', '=', 'cg.property_id');
				})
				->where('cb.property_id', $property_id);

			if( count($building_id) > 0 )
				$query->whereIn('cb.name', $building_id);

			if (!empty($duration_time)){
				if ($duration == '='){
					$query->where('gc.duration','=',$duration_time*60);
				}
				elseif($duration == '>'){
					$query->where('gc.duration','>',$duration_time*60);
				}
				elseif($duration == '<'){
					$query->where('gc.duration','<',$duration_time*60);
				}
				elseif($duration == '>='){
					$query->where('gc.duration','>=',$duration_time*60);
				}
				else{
					$query->where('gc.duration','<=',$duration_time*60);
				}
			}

			if (count($call_types) > 0)
				$query->whereIn('gc.call_type', $call_types);

//			if ($report_by == 'Call Date') {
			$time_range = sprintf("'%s' <= CONCAT_WS(\" \", gc.call_date, gc.start_time) AND CONCAT_WS(\" \", gc.call_date, gc.start_time) <= '%s'", $start_time, $end_time);
			$query->whereRaw($time_range);
//			}

			if( $callcharge == 'true' )
				$query->where('gc.total_charges', '>', 0);

			if (count($destination_tags) > 0)
				$query->whereIn('cd.country', $destination_tags);

			if (count($room_tags) > 0)
			{
				$query->whereIn('cr.room', $room_tags);
			}

			if (count($extension_tags) > 0)
			{
				$query->whereIn('ge.extension', $extension_tags);
			}

			if (count($calledno_tags) > 0)
			{
				$query->whereIn('gc.called_no', $calledno_tags);
			}

			$this->getGuestcallDetail($query, $orderby, $sort, $report_by, $ret);
			$this->getGuestcallSummaryData($query, $ret, $by_build_data, $total_value, $by_building_room_department_data);

			$guest_query = clone $query;

			// Receive calls
			if( $report_by == 'Extension' || $report_by == 'Room' )
			{
				if (empty($call_types) || in_array('Received_I', $call_types)){

					$admin_extensions = DB::table('call_guest_extn')
				 					->select(DB::raw("extension"))
									 ->get();

					$extensions = [];
					foreach($admin_extensions as $row)
					{
							$extensions[] = $row->extension;
					}
                    // Receive Guest calls
                    $query = DB::table('call_guest_call as gc')
                    //	->leftJoin('common_room as cr', 'gc.room_id', '=', 'cr.id')

                        ->leftJoin('call_guest_extn as ge', 'gc.called_no', '=', 'ge.extension')
                        ->leftJoin('common_room as cre', 'ge.room_id', '=', 'cre.id')
                        ->leftJoin('common_floor as cf', 'cre.flr_id', '=', 'cf.id')
                        ->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
                        ->leftJoin('call_guest_extn as gex', 'gc.extension_id', '=', 'gex.id')
                        ->leftJoin('call_destination as cd', 'gc.destination_id', '=', 'cd.id')
    //					->leftJoin('common_guest as cg', 'gc.guest_id', '=', 'cg.guest_id')
                        ->leftJoin('common_guest as cg', function($join) {
                            $join->on('gc.guest_id', '=', 'cg.guest_id');
                            $join->on('cb.property_id', '=', 'cg.property_id');
                        })
                        ->where('cb.property_id', $property_id);

                        $query->whereIn('gc.called_no', $extensions);

                    if( count($building_id) > 0 )
                        $query->whereIn('cb.name', $building_id);

                    if (!empty($duration_time)){
                        if ($duration == '='){
                            $query->where('gc.duration','=',$duration_time*60);
                        }
                        elseif($duration == '>'){
                            $query->where('gc.duration','>',$duration_time*60);
                        }
                        elseif($duration == '<'){
                            $query->where('gc.duration','<',$duration_time*60);
                        }
                        elseif($duration == '>='){
                            $query->where('gc.duration','>=',$duration_time*60);
                        }
                        else{
                            $query->where('gc.duration','<=',$duration_time*60);
                        }

                    }


                //	if (count($call_types) > 0)
                //		$query->whereIn('gc.call_type', $call_types);

                    $time_range = sprintf("'%s' <= CONCAT_WS(\" \", gc.call_date, gc.start_time) AND CONCAT_WS(\" \", gc.call_date, gc.start_time) <= '%s'", $start_time, $end_time);
                    $query->whereRaw($time_range);

                    if( $callcharge == 'true' )
                        $query->where('gc.total_charges', '>', 0);

                    if (count($destination_tags) > 0)
                        $query->whereIn('cd.country', $destination_tags);

                    if (count($room_tags) > 0)
                    {
                        $query->whereIn('cre.room', $room_tags);
                    }

                    if (count($extension_tags) > 0)
                    {
                        $query->whereIn('ge.extension', $extension_tags);
                    }

                    $this->getGuestcallReceiveGuestDetail($query, $orderby, $sort, $report_by, $ret);
                    $this->getGuestcallSummaryReceiveGuestDetail($query, $orderby, $sort, $report_by, $ret);


                    // Receive Admin calls
                    $query1 = DB::table('call_admin_calls as gc')
                        ->leftJoin('call_guest_extn as ge', 'gc.called_no', '=', 'ge.extension')
                        ->leftJoin('common_room as cre', 'ge.room_id', '=', 'cre.id')
                        ->leftJoin('common_floor as cf', 'cre.flr_id', '=', 'cf.id')
                        ->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
                        ->leftJoin('call_staff_extn as cge', 'gc.extension_id', '=', 'cge.id')
                        ->leftJoin('call_destination as cd', 'gc.destination_id', '=', 'cd.id')
                        ->where('cb.property_id', $property_id);

                        $query1->whereIn('gc.called_no', $extensions);

                    if( count($building_id) > 0 )
                        $query1->whereIn('cb.name', $building_id);

                    if (!empty($duration_time)){
                        if ($duration == '='){
                            $query1->where('gc.duration','=',$duration_time*60);
                        }
                        elseif($duration == '>'){
                            $query1->where('gc.duration','>',$duration_time*60);
                        }
                        elseif($duration == '<'){
                            $query1->where('gc.duration','<',$duration_time*60);
                        }
                        elseif($duration == '>='){
                            $query1->where('gc.duration','>=',$duration_time*60);
                        }
                        else{
                            $query1->where('gc.duration','<=',$duration_time*60);
                        }
                    }

                //	if (count($call_types) > 0)
                //		$query1->whereIn('gc.call_type', $call_types);

                    $time_range = sprintf("'%s' <= CONCAT_WS(\" \", gc.call_date, gc.start_time) AND CONCAT_WS(\" \", gc.call_date, gc.start_time) <= '%s'", $start_time, $end_time);
                    $query1->whereRaw($time_range);

                    if( $callcharge == 'true' )
                        $query1->where('gc.carrier_charges', '>', 0);

                    if (count($destination_tags) > 0)
                        $query1->whereIn('cd.country', $destination_tags);

                    if (count($room_tags) > 0)
                    {
                        $query1->whereIn('cre.room', $room_tags);
                    }

                    if (count($extension_tags) > 0)
                    {
                        $query1->whereIn('ge.extension', $extension_tags);
                    }

                    $this->getGuestcallReceiveAdminDetail($query1, $orderby, $sort, $report_by, $ret);
                    $this->getGuestcallSummaryReceiveAdminDetail($query1, $orderby, $sort, $report_by, $ret);
                }
			}
		}

		$admin_query = null;

//		if( $call_sort == 'All' || $call_sort == 'Admin Call' )
		if(in_array('All', $call_sort) || in_array('Admin Call', $call_sort))
		{
			// Admin Call
			$query = DB::table('call_admin_calls as ac')
				->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				->join('call_section as cs', 'ac.section_id', '=', 'cs.id')
				->join('common_building as cb', 'ac.building_id', '=', 'cb.id')
				->join('common_department as dept', 'ac.dept_id', '=', 'dept.id')
				->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
//					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
//					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
				->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');

			$query->where('ac.property_id', $property_id);

			$query_department = clone $query;

			if( count($building_id) > 0 )
				$query->whereIn('cb.name', $building_id);

			if (!empty($duration_time)){
				if ($duration == '='){
					$query->where('ac.duration','=',$duration_time*60);
				}
				elseif($duration == '>'){
					$query->where('ac.duration','>',$duration_time*60);
				}
				elseif($duration == '<'){
					$query->where('ac.duration','<',$duration_time*60);
				}
				elseif($duration == '>='){
					$query->where('ac.duration','>=',$duration_time*60);
				}
				else{
					$query->where('ac.duration','<=',$duration_time*60);
				}
			}

			if( count($call_types) > 0 )
				$query->whereIn('ac.call_type', $call_types);

//			if( $report_by == 'Call Date' ) {
			$time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
			$query->whereRaw($time_range);
//			}

			if( $callcharge == 'true' )
				$query->where('ac.carrier_charges', '>', 0);

			if (count($department_tags) > 0)
				$query->whereIn('dept.department', $department_tags);

			if (count($destination_tags) > 0)
				$query->whereIn('cd.country', $destination_tags);

			if (count($section_tags) > 0)
				$query->whereIn('cs.section', $section_tags);

			if (count($extension_tags) > 0)
				$query->whereIn('se.extension', $extension_tags);

			if (count($accesscode_tags) > 0)
					$query->whereIn('ac.access_code', $accesscode_tags);

			if (count($calledno_tags) > 0)
					$query->whereIn('ac.called_no', $calledno_tags);

			$this->getAdmincallDetail($query, $orderby, $sort, $report_by, $ret, $property_id, $department_tags);
			$this->getAdmincallSummaryData($query,$ret, $by_build_data, $total_value, $by_building_room_department_data);

			$admin_query = clone $query;

			if( $report_by == 'Access Code' ) {
				$query = DB::table('call_admin_calls as ac')
				->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				->join('call_section as cs', 'ac.section_id', '=', 'cs.id')
				->join('common_building as cb', 'ac.building_id', '=', 'cb.id')
				->join('common_department as dept', 'ac.dept_id', '=', 'dept.id')
				->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
//					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
//					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
				//->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');
				->leftJoin('common_users as cu', 'ac.access_code', '=', 'cu.access_code');

				$query->where('dept.property_id', $property_id)->whereRaw('ac.access_code != NULL or ac.access_code != 0');

				if( count($building_id) > 0 )
					$query->whereIn('cb.name', $building_id);

				if (!empty($duration_time)){
                    if ($duration == '='){
                        $query->where('ac.duration','=',$duration_time*60);
                    }
                    elseif($duration == '>'){
                        $query->where('ac.duration','>',$duration_time*60);
                    }
                    elseif($duration == '<'){
                        $query->where('ac.duration','<',$duration_time*60);
                    }
                    elseif($duration == '>='){
                        $query->where('ac.duration','>=',$duration_time*60);
                    }
                    else{
                        $query->where('ac.duration','<=',$duration_time*60);
                    }
                }

				if( count($call_types) > 0 )
					$query->whereIn('ac.call_type', $call_types);

				$time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
				$query->whereRaw($time_range);

				if( $callcharge == 'true' )
					$query->where('ac.carrier_charges', '>', 0);

				if (count($department_tags) > 0)
					$query->whereIn('dept.department', $department_tags);

				if (count($destination_tags) > 0)
					$query->whereIn('cd.country', $destination_tags);

				if (count($section_tags) > 0)
					$query->whereIn('cs.section', $section_tags);

				//if (count($extension_tags) > 0)
					//$query->whereIn('se.extension', $extension_tags);
				//$ac_code = 123;

				if (count($accesscode_tags) > 0)
					$query->whereIn('ac.access_code', $accesscode_tags);

				$this->getAdmincallDetail($query, $orderby, $sort, $report_by, $ret, $property_id, $department_tags);
				//$this->getAdmincallSummaryData($query, $ret, $by_build_data, $total_value, $by_building_room_department_data);
			}

			// Receive calls
			if( $report_by == 'Extension' ) {
				if (empty($call_types) || in_array('Received_I', $call_types)){

					$admin_extensions = DB::table('call_staff_extn')
				 					->select(DB::raw("extension"))
									 ->get();

					$extensions = [];
					foreach($admin_extensions as $row)
					{
							$extensions[] = $row->extension;
					}
                    //Admin Received Calls
                    $query = DB::table('call_admin_calls as ac')
                        ->join('call_staff_extn as se', 'ac.called_no', '=', 'se.extension')
                        ->join('call_staff_extn as cse', 'ac.extension_id', '=', 'cse.id')
                        ->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                        ->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
                        ->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
                        ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
                        ->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');

                    $query->where('dept.property_id', $property_id);
                    $query->whereIn('ac.called_no', $extensions);


                    if( count($building_id) > 0 )
                        $query->whereIn('cb.name', $building_id);

                    if (!empty($duration_time)){
                        if ($duration == '='){
                            $query->where('ac.duration','=',$duration_time*60);
                        }
                        elseif($duration == '>'){
                            $query->where('ac.duration','>',$duration_time*60);
                        }
                        elseif($duration == '<'){
                            $query->where('ac.duration','<',$duration_time*60);
                        }
                        elseif($duration == '>='){
                            $query->where('ac.duration','>=',$duration_time*60);
                        }
                        else{
                            $query->where('ac.duration','<=',$duration_time*60);
                        }
                    }

                    //	if( count($call_types) > 0 )
                    //		$query->whereIn('ac.call_type', $call_types);

                    $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
                    $query->whereRaw($time_range);

                    if( $callcharge == 'true' )
                        $query->where('ac.carrier_charges', '>', 0);

                    if (count($department_tags) > 0)
                        $query->whereIn('dept.department', $department_tags);

                    if (count($destination_tags) > 0)
                        $query->whereIn('cd.country', $destination_tags);

                    if (count($section_tags) > 0)
                        $query->whereIn('cs.section', $section_tags);

                    if (count($extension_tags) > 0)
                        $query->whereIn('se.extension', $extension_tags);

                    $this->getAdmincallReceivedDetail($query, $orderby, $sort, $report_by, $ret);
                    $this->getAdmincallSummaryReceivedDetail($query, $orderby, $sort, $report_by, $ret);

                    //Guest receive Calls
                    $query1 = DB::table('call_guest_call as ac')
                        ->join('call_staff_extn as se', 'ac.called_no', '=', 'se.extension')
                        ->join('call_guest_extn as cse', 'ac.extension_id', '=', 'cse.id')
                        ->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                        ->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
                        ->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')

                        ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
                        ->leftJoin('common_users as cu', 'se.user_id', '=', 'cu.id');

                        $query1->where('dept.property_id', $property_id);
                        $query1->whereIn('ac.called_no', $extensions);



                        if( count($building_id) > 0 )
                        $query1->whereIn('cb.name', $building_id);

                    if (!empty($duration_time)){
                        if ($duration == '='){
                            $query1->where('ac.duration','=',$duration_time*60);
                        }
                        elseif($duration == '>'){
                            $query1->where('ac.duration','>',$duration_time*60);
                        }
                        elseif($duration == '<'){
                            $query1->where('ac.duration','<',$duration_time*60);
                        }
                        elseif($duration == '>='){
                            $query1->where('ac.duration','>=',$duration_time*60);
                        }
                        else{
                            $query1->where('ac.duration','<=',$duration_time*60);
                        }

                    }


                    //	if( count($call_types) > 0 )
                    //		$query1->whereIn('ac.call_type', $call_types);

                    $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
                    $query1->whereRaw($time_range);

                    if( $callcharge == 'true' )
                        $query1->where('ac.total_charges', '>', 0);

                    if (count($department_tags) > 0)
                        $query1->whereIn('dept.department', $department_tags);

                    if (count($destination_tags) > 0)
                        $query1->whereIn('cd.country', $destination_tags);

                    if (count($section_tags) > 0)
                        $query1->whereIn('cs.section', $section_tags);

                    if (count($extension_tags) > 0)
                        $query1->whereIn('se.extension', $extension_tags);

                    $this->getAdmincallReceivedGuestDetail($query1, $orderby, $sort, $report_by, $ret);
                    $this->getAdmincallSummaryReceivedGuestDetail($query1, $orderby, $sort, $report_by, $ret);
                }
			}

		}
		$business_centre_query = null;
//		if( $call_sort == 'All' || $call_sort == 'Business Centre' )
		if((in_array('All', $call_sort) || in_array('Business Centre', $call_sort))&&($report_by != 'Access Code')) {
			// Admin Call
			$query = DB::table('call_bc_calls as cc')
				->join('call_staff_extn as se', 'cc.extension_id', '=', 'se.id')
				->join('call_section as cs', 'se.section_id', '=', 'cs.id')
				->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
				->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
				->leftJoin('call_destination as cd', 'cc.destination_id', '=', 'cd.id')
				->leftJoin('common_users as cu', 'cc.user_id', '=', 'cu.id');

			$query->where('dept.property_id', $property_id);

			if( count($building_id) > 0 )
				$query->whereIn('cb.name', $building_id);

				if (!empty($duration_time)){
					if ($duration == '='){
						$query->where('cc.duration','=',$duration_time*60);
					}
					elseif($duration == '>'){
						$query->where('cc.duration','>',$duration_time*60);
					}
					elseif($duration == '<'){
						$query->where('cc.duration','<',$duration_time*60);
					}
					elseif($duration == '>='){
						$query->where('cc.duration','>=',$duration_time*60);
					}
					else{
						$query->where('cc.duration','<=',$duration_time*60);
					}

				}

			if( count($call_types) > 0 )
				$query->whereIn('cc.call_type', $call_types);

			$time_range = sprintf("'%s' <= CONCAT_WS(\" \", cc.call_date, cc.start_time) AND CONCAT_WS(\" \", cc.call_date, cc.start_time) <= '%s'", $start_time, $end_time);
			$query->whereRaw($time_range);

			if( $callcharge == 'true' )
				$query->where('cc.carrier_charges', '>', 0);

			if (count($department_tags) > 0)
				$query->whereIn('dept.department', $department_tags);

			if (count($destination_tags) > 0)
				$query->whereIn('cd.country', $destination_tags);

			if (count($section_tags) > 0)
				$query->whereIn('cs.section', $section_tags);

			$query = clone $query;

			if (count($extension_tags) > 0)
				$query->whereIn('se.extension', $extension_tags);

			$this->getBusinessCentrecallDetail($query, $orderby, $sort, $report_by, $ret);
			$this->getBusinessCentrecallSummaryData($query, $ret, $by_build_data, $total_value, $by_building_room_department_data);

			$business_centre_query = clone $query;

			// Receive calls
			if( $report_by == 'Extension' ) {

				$query = DB::table('call_bc_received_calls as cc')
					->join('call_staff_extn as se', 'cc.extension_id', '=', 'se.id')
					->join('call_section as cs', 'se.section_id', '=', 'cs.id')
					->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
					->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
					->leftJoin('call_destination as cd', 'cc.destination_id', '=', 'cd.id')
					->leftJoin('common_users as cu', 'cc.user_id', '=', 'cu.id');


				$query->where('dept.property_id', $property_id);

				if( count($building_id) > 0 )
					$query->whereIn('cb.name', $building_id);

					if (!empty($duration_time)){
						if ($duration == '='){
							$query->where('cc.duration','=',$duration_time*60);
						}
						elseif($duration == '>'){
							$query->where('cc.duration','>',$duration_time*60);
						}
						elseif($duration == '<'){
							$query->where('cc.duration','<',$duration_time*60);
						}
						elseif($duration == '>='){
							$query->where('cc.duration','>=',$duration_time*60);
						}
						else{
							$query->where('cc.duration','<=',$duration_time*60);
						}

					}

				if( count($call_types) > 0 )
					$query->whereIn('cc.call_type', $call_types);

				$time_range = sprintf("'%s' <= CONCAT_WS(\" \", cc.call_date, cc.start_time) AND CONCAT_WS(\" \", cc.call_date, cc.start_time) <= '%s'", $start_time, $end_time);
				$query->whereRaw($time_range);

				if( $callcharge == 'true' )
					$query->where('cc.carrier_charges', '>', 0);

				if (count($department_tags) > 0)
					$query->whereIn('dept.department', $department_tags);

				if (count($destination_tags) > 0)
					$query->whereIn('cd.country', $destination_tags);

				if (count($section_tags) > 0)
					$query->whereIn('cs.section', $section_tags);

				if (count($extension_tags) > 0)
					$query->whereIn('se.extension', $extension_tags);

				$this->getBusinessCentrecallReceivedDetail($query, $orderby, $sort, $report_by, $ret);
			}
		}

		if( $report_by == 'Call Date' ) {
			$this->getBuildingCallDateSummary($guest_query, $admin_query, $business_centre_query, $ret);
		}

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$ret['currency'] = $currency->value;
		$ret['report_by'] = $report_by;
		$ret['period'] = date_format(new DateTime($start_time),"d-M-Y H:i").' to '.date_format(new DateTime($end_time),"d-M-Y H:i");
	//	$ret['period'] = $start_time.' to '.$end_time;
		$ret['report_type'] = $report_type;
		$ret['by_build_data'] = $by_build_data;
		$ret['total_value'] = $total_value;
		$ret['by_building_room_department_data'] = $by_building_room_department_data;
		$ret['property'] = Property::find($report['property_id']);


		$this->getReportDescription($property_id, $building_id, $call_types, $call_sort, $ret,
			$department_tags, $room_tags, $extension_tags, $destination_tags, $accesscode_tags, $calledno_tags);

		return $ret;
	}

	public function makeAuditReportDataRoom(Request $request) {

		$property_id = $request->get('property_id','0');
		$ret = [];
		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$query = DB::table('common_room as cr')
				->leftjoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->leftjoin('common_room_type as ct', 'ct.id', '=', 'cr.type_id')
				->leftJoin('common_property as cp', 'cb.property_id', '=', 'cp.id');
				//->where('cb.property_id', $property_id);

		$data_query = clone $query;

		$data_list = $data_query
			->select(DB::raw('cr.id,cb.name as building, cf.floor, ct.type as room_type, cr.room, cr.description,cr.credits'))
			->get();

		$total = count($data_list);

		if(count($property) > 0 ) {
				$label = '';
				for($i = 0; $i < count($property); $i++)
				{
					if( $i > 0 )
						$label = $label . ', ';
					$label = $label . $property[$i]->name;
				}
				$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $data_list;

		return $ret;
	}

	public function downloadAuditExcelReportRoom(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataRoom($request);

		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Room_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Room', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditRoomReport($sheet, $row_num, $data);
				$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataAdminExt(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
					->select(DB::raw('cb.name'))
					->get();


		$adminlist = DB::table('call_staff_extn as ce')
					->leftjoin('call_section as cs', 'ce.section_id', '=', 'cs.id')
					->leftjoin('common_users as cu','ce.user_id','=','cu.id')
					->leftjoin('common_department as cd', 'cs.dept_id', '=', 'cd.id')
					->leftJoin('common_property as cp', 'cd.property_id', '=', 'cp.id')
					->leftJoin('common_building as cb', 'ce.building_id', '=', 'cb.id')
					//->where('cd.property_id', $property_id)
					->orderBy('ce.id','asc')
					->select(DB::raw('ce.id, cp.name, cb.name as building, cd.department, cs.section,ce.extension, cu.username,ce.user_group_name,ce.description, CASE WHEN ce.enable = 1 THEN "Active" ELSE "In-Active" END' ))
					->get();

		$total = count($adminlist);
		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++) {
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $adminlist;

		return $ret;
	}

	public function downloadAuditExcelReportAdminExt(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataAdminExt($request);

		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		}else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Admin_Extension_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Admin Ext', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditAdminExtReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataGuestExt(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$guestlist = DB::table('call_guest_extn as ce')
				->leftjoin('common_building as cb','ce.bldg_id','=','cb.id')
				->leftjoin('common_room as cr', 'ce.room_id', '=', 'cr.id')
				->leftjoin('common_property as cp', 'cb.property_id', '=', 'cp.id')
				//->where('cb.property_id', $property_id)
				->orderBy('ce.extension','asc')
				->select(DB::raw('ce.id, cp.name,cb.name as building, cr.room, ce.extension, CASE WHEN ce.enable = 1 THEN "Active" ELSE "In-Active" END' ))
				->get();

		$total = count($guestlist);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++) {
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $guestlist;
		//$ret['property'] = Property::find($property_id);
		return $ret;
	}

	public function downloadAuditExcelReportGuestExt(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataGuestExt($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1)
		{
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Guest_Extension_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')

        $excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Guest Ext', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditGuestExtReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataDepartment(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$list = DB::table('common_department as cd')
				->leftJoin('common_property as cp', 'cd.property_id', '=', 'cp.id')
				->select(DB::raw('cd.id, cp.name, cd.department, cd.short_code,cd.services, cd.description' ))
				->get();

		$total = count($list);

		if(count($property) > 0 )
		{
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $list;

		return $ret;
	}

	public function downloadAuditExcelReportDepartment(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataDepartment($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1)
		{
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Department_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Department', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditDptReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataSection(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$section_list = DB::table('call_section as cs')
				->leftjoin('common_department as cd', 'cs.dept_id', '=', 'cd.id')
				->leftJoin('common_property as cp', 'cd.property_id', '=', 'cp.id')
				//->where('cd.property_id', $property_id)
				->select(DB::raw('cs.id, cp.name, cs.section,cd.department' ))
				->get();

		$total = count($section_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $section_list;

		return $ret;
	}

	public function downloadAuditExcelReportSection(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataSection($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1)
		{
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}
		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Section_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Section', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditSectionReport($sheet, $row_num, $data);
				$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataAdminArea(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$area_list = DB::table('common_admin_area as ca')
				->leftJoin('common_floor as cf','ca.floor_id','=','cf.id')
				->leftJoin('common_building as cb','cf.bldg_id','=','cb.id')
				->leftJoin('common_property as cp', 'cb.property_id', '=', 'cp.id')
				//->where('cb.property_id', $property_id)
				->select(DB::raw('ca.id,cp.name as property_name,cb.name as building ,cf.floor,ca.name' ))
				->get();


		$total = count($area_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}


		$ret['Total'] = $total;
		$ret['data_list'] = $area_list;

		return $ret;
	}

	public function downloadAuditExcelReportAdminArea(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->makeAuditReportDataAdminArea($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}
		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Admin Area_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Admin Area', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditAreaReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataDeptFunc(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$dept_list = DB::table('services_dept_function as df')
				->leftjoin('common_department as cd', 'df.dept_id', '=', 'cd.id')
				->select(DB::raw('df.id, cd.department, df.function, df.short_code, df.description, df.gs_device ' ))
				->get();


		$total = count($dept_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $dept_list;

		return $ret;
	}

	public function downloadAuditExcelReportDeptFunc(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->makeAuditReportDataDeptFunc($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1)
		{
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		}
		else
		{
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Department Function_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Dept Func', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditDeptFuncReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataCompensation(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$comp_list = DB::table('services_compensation as sc')
				->leftJoin('services_approval_route as sar', 'sc.approval_route_id', '=', 'sar.id')
				->leftJoin('common_property as cp','sc.property_id','=','cp.id')
				->leftJoin('common_chain as cc','sc.client_id', '=','cc.id')
				->select(DB::raw('sc.id, cc.name, cp.name as property, sc.compensation, sc.cost, sar.approval ' ))
				->get();


		$total = count($comp_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}


		$ret['Total'] = $total;
		$ret['data_list'] = $comp_list;
		//$ret['property'] = Property::find($property_id);
		return $ret;
	}

	public function downloadAuditExcelReportCompensation(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->makeAuditReportDataCompensation($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Compensation_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Compensation', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditCompensationReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);
		})->export($excel_file_type);
	}

    private function getDeptIdsFromUserId($user_id) {
        //        get dept ids from user_id
        $deptList = DB::table('common_users')
            ->where('id', $user_id)
            ->groupBy('dept_id')
            ->select('dept_id')
            ->get();

        $deptIds = [];
        foreach ($deptList as $deptItem) {
            $deptIds[] = $deptItem->dept_id;
        }

        return $deptIds;
    }

	public function makeAuditReportDataTask(Request $request) {
		$property_id = $request->get('property_id','4');

		$user_id = $request->get('user_id', 0);

		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$query = DB::table('services_task_list as tl')
					->leftJoin('services_task_category as stc', 'tl.category_id', '=', 'stc.id')
					->leftJoin('services_task_group_members as tgm', 'tl.id', '=', 'tgm.task_list_id')
					->leftJoin('services_task_group as tg', 'tgm.task_grp_id', '=', 'tg.id')
					->leftJoin('services_dept_function as df', 'tg.dept_function', '=', 'df.id')
					->leftJoin('common_department as cd', 'df.dept_id', '=', 'cd.id');

		if (!empty($user_id)) {
		    $dept_ids = $this->getDeptIdsFromUserId($user_id);

		    $query->whereIn('cd.id', $dept_ids);
        }

		$task_list = $query->select(DB::raw('tl.id, cd.department, df.function, tg.name, tl.task , stc.name as category,CASE WHEN tl.status = 1 THEN "Active" ELSE "In-Active" END ' ))
					->get();


		$total = count($task_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}


		$ret['Total'] = $total;
		$ret['data_list'] = $task_list;

		return $ret;
	}

	public function downloadSettingAuditExcelReportTask(Request $request) {
        ini_set('memory_limit','-1');
        ini_set('max_execution_time', 300);
        set_time_limit(0);

        $data = $this->makeSettingAuditReportDataTask($request);

        $property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

        if (count($property) <= 1) {
            foreach ($property as $key => $value) {
                $logo_path = $value->logo_path;
            }
        } else {
            $logo_path = 'frontpage/img/logo_1490913790.png';
        }

        $param = $request->all();
        $filename = 'Audit_Report_Task_' . date('d_M_Y_H_i');

        //	$excel_file_type = 'csv';
        //	if($param['excel_type'] == 'excel')
        $excel_file_type = config('app.report_file_type');

        $ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
            $excel->sheet('Audit Report for Task', function ($sheet) use ($data, $logo_path) {
                $sheet->setOrientation('landscape');

                $this->outputAuditLogo($sheet, $logo_path);

                $row_num = 1;
                $row_num = $this->outputAuditTaskReport($sheet, $row_num, $data);
                $row_num += 2;
            });

            $this->sendNotifyDownloadCompleted($param);

        })->export($excel_file_type);
    }

	public function downloadAuditExcelReportTask(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->makeAuditReportDataTask($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}
		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Task_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Task', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditTaskReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataJobrole(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$job_list = DB::table('common_job_role as cj')
					->leftJoin('common_property as cp', 'cj.property_id', '=', 'cp.id')
					->leftJoin('common_department as cd', 'cj.dept_id', '=', 'cd.id')
//                ->leftJoin('common_property as cp', 'ug.property_id', '=', 'cp.id')
					->leftJoin('common_perm_group as pg', 'cj.permission_group_id', '=', 'pg.id')
					->select(DB::raw('cj.id, cp.name as property_name, cj.job_role, cd.department as department, pg.name as pgname'))
					->get();

		$total = count($job_list);
		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $job_list;

		return $ret;
	}

	public function downloadAuditExcelReportJobrole(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataJobrole($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}
		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Job Role_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Jobrole', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditJobReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataMinibar(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$minibar_list = DB::table('services_rm_srv_itm as rsi')
					->select(DB::raw('rsi.id, rsi.item_name, rsi.charge, rsi.pms_code, rsi.ivr_code, rsi.max_qty, CASE WHEN rsi.active_status = 1 THEN "Active" ELSE "In-Active" END'))
					->get();


		$total = count($minibar_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $minibar_list;

		return $ret;
	}

	public function downloadAuditExcelReportMinibar(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataMinibar($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}
		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Minibar Item_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
		$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Minibar', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditMinibarItemReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataUser(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$user_list = DB::table('common_users as cu')
					->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
					->leftJoin('common_job_role as cj', 'cu.job_role_id', '=', 'cj.id')
					//->leftJoin('common_user_transaction as cut', 'cu.id', '=', 'cut.user_id')
					->leftJoin('common_user_transaction as cut', function($join) {
						$join->on('cu.id', '=', 'cut.user_id');
						$join->where('cut.action', 'like', 'login');
						//$join->where(max('cut.id'));
					})
					->select(DB::raw('cu.id, cu.first_name, cu.last_name, cu.username, cj.job_role, cd.department,cu.email, cu.mobile, CASE WHEN max(cut.created_at) THEN max(cut.created_at) ELSE " " END, CASE WHEN cu.deleted = 0 THEN "Active" ELSE "In-Active" END' ))
					->groupby('cu.id')
					->get();


		$total = count($user_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}


		$ret['Total'] = $total;
		$ret['data_list'] = $user_list;

		return $ret;
	}

	public function downloadAuditExcelReportUser(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->makeAuditReportDataUser($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_User_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for User', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditUserReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataDevice(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$device_list = DB::table('services_devices as sd')
						->leftJoin('services_dept_function as df', 'sd.dept_func', '=', 'df.id')
						->leftJoin('services_dept_function as df2', 'sd.sec_dept_func', '=', 'df2.id')
						->leftJoin('services_location_group as lg', 'sd.loc_grp_id', '=', 'lg.id')
						->leftJoin('services_location_group as lg2', 'sd.sec_loc_grp_id', '=', 'lg2.id')
						->leftJoin('common_building as cb', 'sd.bldg_id', '=', 'cb.id')
						->select(DB::raw('sd.id, sd.name, df.function,df2.function as sec_function, sd.type, sd.number,lg.name as loc_name,lg2.name as sec_loc_name,cb.name as cb_name, sd.device_id'))
						->get();


		$total = count($device_list);

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		$ret['Total'] = $total;
		$ret['data_list'] = $device_list;

		return $ret;
	}

	public function downloadAuditExcelReportDevice(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->makeAuditReportDataDevice($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Device_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for Device', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditDeviceReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportDataGuestRate(Request $request) {
		$property_id = $request->get('property_id','4');
		$ret = [];

		$property = DB::table('common_property as cb')
				->select(DB::raw('cb.name'))
				->get();

		$query = DB::table('call_guest_charge_map as cm')
				->leftjoin('call_carrier_groups as cg', 'cm.carrier_group_id', '=', 'cg.id')
				->leftjoin('call_group_destination as cd', 'cd.carrier_group_id','=','cg.id')
				->leftJoin('call_destination as cds', 'cd.destination_id', '=', 'cds.id')
				->leftJoin('call_allowance as ca', 'cm.call_allowance', '=', 'ca.id')
				->leftjoin('call_time_slab as cs','cm.time_slab','=', 'cs.id')
				->leftjoin('call_carrier_charges as cc' , 'cm.carrier_charges','=','cc.id')
				->leftjoin('call_hotel_charges as chc' , 'cm.hotel_charges','=','chc.id')
				->leftjoin('call_tax as ct' , 'cm.tax','=','ct.id')
				->groupBy('cg.id')
				//->groupBy('cds.id')
				->groupBy('cds.country')
//				->groupBy('ca.id')
				->groupBy('cs.id')
				->select(DB::raw('cg.name as group_name, cds.country as country , cds.code as country_code,
				 ca.name as allowance, cs.name as slab_name, cs.start_time as slab_start_time,
		   		 cs.end_time as slab_end_time, cs.days_of_week as slab_day, round(cc.charge,2) as charge, round(chc.charge,2) as hotel_charge, round(ct.value,2) as tax, chc.method  '))
				->get();
		$list = [];
		foreach ($query as $row) {
			$start_time = new DateTime($row->slab_start_time);
			$end_time = new DateTime($row->slab_end_time);
			$group_key = $row->group_name.$row->country_code;

			if (isset($list[$group_key])) {
			} else {
				$list[$group_key] = [];
			}

			$list[$group_key]['group_name'] = $row->group_name;
			$list[$group_key]['country'] = $row->country;
			$list[$group_key]['country_code'] = $row->country_code;
			$list[$group_key]['allowance'] = $row->allowance;
			$hotel_charge = 0;
				if($row->method == 'Duration' ) $hotel_charge = $row->charge*$row->hotel_charge;
				if($row->method == 'Per Call' ) $hotel_charge = $row->hotel_charge;
				if($row->method == 'Percentage' ) $hotel_charge = ($row->hotel_charge/100)*$row->charge;
				if($row->method == 'Pulse' ) $hotel_charge = $row->charge*$row->hotel_charge;
				$hotel_charge = round($hotel_charge,2);

			if($row->slab_day != 'Friday' && $start_time >= new DateTime('00:00:00') && $end_time <= new DateTime('06:59:59')) {
				$row->morning = $row->slab_name;
				$row->daily = '';
				$row->night = '';
				$row->all = '';
				$list[$group_key]['morning_carrier'] = $row->charge;

				//$hotel_chrg = round(($row->hotel_charge * $row->charge)/100,2);
				$list[$group_key]['hotel_1'] = $hotel_charge;
				$list[$group_key]['morning_total'] = round($row->charge + $hotel_charge + $row->tax ,2);
				$row->daily_carrier = '';
				$row->daily_total = '';
				$row->night_carrier = '';
				$row->night_total = '';
				$row->all_carrier = '';
				$row->all_total = '';
			}
			if($row->slab_day != 'Friday' && $start_time >= new DateTime('07:00:00') && $end_time <= new DateTime('20:59:59')) {
				$row->morning = '';
				$row->daily = $row->slab_name;
				$row->night = '';
				$row->all = '';
				$row->morning_carrier = '';
				$row->morning_total = '';
				$list[$group_key]['daily_carrier'] = $row->charge;
				$list[$group_key]['hotel_2'] = $hotel_charge;
				//$list[$group_key]['hotel_2'] =round(($row->hotel_charge * $row->charge)/100,2);
				$list[$group_key]['daily_total'] = round($row->charge + $hotel_charge + $row->tax ,2);
				$row->night_carrier = '';
				$row->night_total = '';
				$row->all_carrier = '';
				$row->all_total = '';
			}
			if($row->slab_day != 'Friday' && $start_time >= new DateTime('21:00:00') && $end_time <= new DateTime('23:59:59')) {
				$row->morning = '';
				$row->daily = '';
				$row->night = $row->slab_name;
				$row->all = '';
				$row->morning_carrier = '';
				$row->morning_total = '';
				$row->daily_carrier = '';
				$row->daily_total = '';
				$list[$group_key]['night_carrier'] = $row->charge;
				$list[$group_key]['hotel_3'] = $hotel_charge;
				//$list[$group_key]['hotel_3'] = round(($row->hotel_charge * $row->charge)/100,2);
				$list[$group_key]['night_total'] = round($row->charge + $hotel_charge + $row->tax ,2);
				$row->all_carrier = '';
				$row->all_total = '';
			}
			if($row->slab_day == 'Friday' && $start_time >= new DateTime('00:00:00') && $end_time <= new DateTime('23:59:59')) {
				$row->morning = '';
				$row->daily = '';
				$row->night = '';
				$row->all = $row->slab_name;
				$row->morning_carrier = '';
				$row->morning_total = '';
				$row->daily_carrier = '';
				$row->daily_total = '';
				$row->night_carrier = '';
				$row->night_total = '';
				$list[$group_key]['all_carrier'] = $row->charge;
				$list[$group_key]['hotel_4'] = $hotel_charge;
				//$list[$group_key]['hotel_4'] = round(($row->hotel_charge * $row->charge)/100,2);
				$list[$group_key]['all_total'] = round($row->charge + $hotel_charge + $row->tax ,2);
			}

			if($start_time >= new DateTime('00:00:00') && $end_time <= new DateTime('23:59:59')) {
				$row->morning = '';
				$row->daily = '';
				$row->night = '';
				$row->all = $row->slab_name;
				$row->morning_carrier = '';
				$row->morning_total = '';
				$row->daily_carrier = '';
				$row->daily_total = '';
				$row->night_carrier = '';
				$row->night_total = '';
				$list[$group_key]['morning_carrier'] = 0;
				$list[$group_key]['morning_total'] = 0;
				$list[$group_key]['daily_carrier'] = 0;
				$list[$group_key]['daily_total'] = 0;
				$list[$group_key]['night_carrier'] = 0;
				$list[$group_key]['night_total'] = 0;
				$list[$group_key]['hotel_1'] = 0;
				$list[$group_key]['hotel_2'] = 0;
				$list[$group_key]['hotel_3'] = 0;
				$list[$group_key]['all_carrier'] = $row->charge;
				$list[$group_key]['hotel_4'] = $hotel_charge;
				//$list[$group_key]['hotel_4'] = round(($row->hotel_charge * $row->charge)/100,2);
				$list[$group_key]['all_total'] = round($row->charge + $hotel_charge + $row->tax ,2);
			}

		}

		if(count($property) > 0 ) {
			$label = '';
			for($i = 0; $i < count($property); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $property[$i]->name;
			}
			$ret['property'] = $label;
		}

		//$ret['Total'] = $total;
		$ret['data_list'] = $list;
		//$ret['property'] = Property::find($property_id);
		return $ret;
	}

	public function downloadAuditExcelReportGuestRate(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->makeAuditReportDataGuestRate($request);
		$property = DB::table('common_property as cp')->select(DB::raw('cp.id,cp.logo_path'))->get();

		if (count($property) <= 1) {
			foreach ($property as $key => $value) {
				$logo_path = $value->logo_path;
			}

		} else {
			$logo_path = 'frontpage/img/logo_1490913790.png';
		}

		$param = $request->all();
		$filename = 'Audit_Report_Guest Rate Mapping_' . date('d_M_Y_H_i');

	//	$excel_file_type = 'csv';
	//	if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Audit Report for GuestRate', function ($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputAuditLogo($sheet, $logo_path);

				$row_num = 1;
				$row_num = $this->outputAuditGuestRateChargeReport($sheet, $row_num, $data);
						$row_num += 2;
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function makeAuditReportData($report) {

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$property_id = $report['property_id'];

		$ret = [];
		$admin_query = null;
		if($report_type == 'Users' ) {
			$query = DB::table('common_users as cu')
				->leftjoin('common_department as dept', 'cu.dept_id', '=', 'dept.id')
				->leftjoin('common_job_role as cr', 'cu.job_role_id', '=', 'cr.id')
				->leftjoin('common_perm_group as cg','cr.permission_group_id','=','cg.id')
				->where('dept.property_id', $property_id);

			$this->getAuditUsers($query, $report_by, $ret);

		}

		if($report_type == 'Room' ) {
			$query = '';
			$query = DB::table('common_room as cr')
				->leftjoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->leftjoin('common_room_type as ct', 'ct.id', '=', 'cr.type_id')
				->where('cb.property_id', $property_id);
			$this->getAuditRoom($query, $report_by, $ret);
		}

		if($report_type == 'Guest Rate Charges') {
			$query = DB::table('call_guest_charge_map as cm')
				->leftjoin('call_carrier_groups as cg', 'cm.carrier_group_id', '=', 'cg.id')
				->leftjoin('call_group_destination as cd', 'cd.carrier_group_id','=','cg.id')
				->leftJoin('call_destination as cds', 'cd.destination_id', '=', 'cds.id')
				->leftJoin('call_allowance as ca', 'cm.call_allowance', '=', 'ca.id')
				->leftjoin('call_time_slab as cs','cm.time_slab','=', 'cs.id')
				->leftjoin('call_carrier_charges as cc' , 'cm.carrier_charges','=','cc.id')
				->leftjoin('call_hotel_charges as chc' , 'cm.hotel_charges','=','chc.id')
				->leftjoin('call_tax as ct' , 'cm.tax','=','ct.id')
				->groupBy('cg.id')
				//->groupBy('cds.id')
				->groupBy('cds.country')
//				->groupBy('ca.id')
				->groupBy('cs.id')
				->select(DB::raw('cg.name as group_name, cds.country as country , cds.code as country_code,
				 ca.name as allowance, cs.name as slab_name, cs.start_time as slab_start_time,
				   cs.end_time as slab_end_time, cs.days_of_week as slab_day, round(cc.charge,2) as charge, round(chc.charge,2) as hotel_charge, round(ct.value,2) as tax, chc.method  '))
				->get();
			$list = [];
			foreach ($query as $row) {
				$start_time = new DateTime($row->slab_start_time);
				$end_time = new DateTime($row->slab_end_time);
				$group_key = $row->group_name.$row->country_code;

				if (isset($list[$group_key])) {
				} else {
					$list[$group_key] = [];
				}

				$list[$group_key]['group_name'] = $row->group_name;
				$list[$group_key]['country'] = $row->country;
				$list[$group_key]['country_code'] = $row->country_code;
				$list[$group_key]['allowance'] = $row->allowance;

				if($row->slab_day != 'Friday' && $start_time >= new DateTime('00:00:00') && $end_time <= new DateTime('06:59:59')) {
					$row->morning = $row->slab_name;
					$row->daily = '';
					$row->night = '';
					$row->all = '';
					$list[$group_key]['morning_carrier'] = $row->charge;
					$hotel_charge = 0;
					if($row->method == 'Duration' ) $hotel_charge = $row->charge*$row->hotel_charge;
					if($row->method == 'Per Call' ) $hotel_charge = $row->hotel_charge;
					if($row->method == 'Percentage' ) $hotel_charge = ($row->hotel_charge/100)*$row->charge;
					if($row->method == 'Pulse' ) $hotel_charge = $row->charge*$row->hotel_charge;
					$hotel_charge = round($hotel_charge,2);
					$list[$group_key]['morning_total'] = round($row->charge + $row->hotel_charge + $row->tax ,2);
					$row->daily_carrier = '';
					$row->daily_total = '';
					$row->night_carrier = '';
					$row->night_total = '';
					$row->all_carrier = '';
					$row->all_total = '';
				}
				if($row->slab_day != 'Friday' && $start_time >= new DateTime('07:00:00') && $end_time <= new DateTime('20:59:59')) {
					$row->morning = '';
					$row->daily = $row->slab_name;
					$row->night = '';
					$row->all = '';
					$row->morning_carrier = '';
					$row->morning_total = '';
					$list[$group_key]['daily_carrier'] = $row->charge;
					$list[$group_key]['daily_total'] = round($row->charge + $row->hotel_charge + $row->tax ,2);
					$row->night_carrier = '';
					$row->night_total = '';
					$row->all_carrier = '';
					$row->all_total = '';
				}
				if($row->slab_day != 'Friday' && $start_time >= new DateTime('21:00:00') && $end_time <= new DateTime('23:59:59')) {
					$row->morning = '';
					$row->daily = '';
					$row->night = $row->slab_name;
					$row->all = '';
					$row->morning_carrier = '';
					$row->morning_total = '';
					$row->daily_carrier = '';
					$row->daily_total = '';
					$list[$group_key]['night_carrier'] = $row->charge;
					$list[$group_key]['night_total'] = round($row->charge + $row->hotel_charge + $row->tax ,2);
					$row->all_carrier = '';
					$row->all_total = '';
				}
				if($row->slab_day == 'Friday' && $start_time >= new DateTime('00:00:00') && $end_time <= new DateTime('23:59:59')) {
					$row->morning = '';
					$row->daily = '';
					$row->night = '';
					$row->all = $row->slab_name;
					$row->morning_carrier = '';
					$row->morning_total = '';
					$row->daily_carrier = '';
					$row->daily_total = '';
					$row->night_carrier = '';
					$row->night_total = '';
					$list[$group_key]['all_carrier'] = $row->charge;
					$list[$group_key]['all_total'] = round($row->charge + $row->hotel_charge + $row->tax ,2);
				}
				//$list[] = $row ;
			}

			$ret['data_list'] = $list;
		}

		if($report_type == 'Extension') {
			$adminlist = DB::table('call_staff_extn as ce')
				->leftjoin('call_section as cs', 'ce.section_id', '=', 'cs.id')
				->leftjoin('common_users as cu','ce.user_id','=','cu.id')
				->leftjoin('common_department as cd', 'cs.dept_id', '=', 'cd.id')
				->where('cd.property_id', $property_id)
				->orderBy('ce.extension','asc')
				->select(DB::raw('cd.department, cs.section, CONCAT_WS(" ", cu.first_name, cu.last_name) as user, ce.extension' ))
				->get();
			$ret['admin'] = $adminlist;
			$guestlist = DB::table('call_guest_extn as ce')
				->leftjoin('common_building as cb','ce.bldg_id','=','cb.id')
				->leftjoin('common_room as cr', 'ce.room_id', '=', 'cr.id')
				->where('cb.property_id', $property_id)
				->orderBy('ce.extension','asc')
				->select(DB::raw('cb.name, cr.room, ce.extension' ))
				->get();
			$ret['guest'] = $guestlist;

		}

		if($report_type == 'Minibar' )
		{
			$datalist = DB::table('services_rm_srv_itm as si')
				->select(DB::raw('si.*' ))
				->get();
			$ret['minibar'] = $datalist;
		}

		$ret['report_type'] = $report_type;
		$ret['report_by'] = $report_by;
		$ret['property'] = Property::find($report['property_id']);

		return $ret;
	}

	public function makeCallclassifyReportData($report) {

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$call_sort = $report['call_sort'];
		$group_by = $report['group_by'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$call_types = $report['call_types'];
		$user_ids = $report['user_ids'];
		$classify = $report['classify'];
		$approvals = $report['approvals'];
		$filterby = $report['filter_by'];
		$section_tags = $report['section_tags'];
		$department_tags = $report['department_tags'];
		$staff_tags = $report['staff_tags'];
		$callcharge = $report['callcharge'];
		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$ret = [];
		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		if ($report_by == 'Mobile') {
			$query = DB::table('call_mobile_calls as ac')
				//->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				//->join('call_section as cs', 'se.section_id', '=', 'cs.id')
				//->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
				->leftjoin('common_department as dept', 'ac.dept_id', '=', 'dept.id')
				->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
//					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
//					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
				->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');

			$query->where('dept.property_id', $property_id);
			$time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.date, ac.time) AND CONCAT_WS(\" \", ac.date, ac.time) <= '%s'", $start_time, $end_time);
			$query->whereRaw($time_range);

			if( $callcharge == 'true' )
			$query->where('ac.charges','>','+000000000.00');

			if (count($department_tags) > 0){
				$query->whereIn('dept.department', $department_tags);
			   }
			if(count($staff_tags) > 0)  {
				$subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
				for($i = 0; $i < count($staff_tags); $i++)
				{
					if($i == 0)
						$subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
					else
						$subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
				}
				$subwhere = $subwhere . ")";
				$query->whereRaw($subwhere);
			}
		} else {
            $query = DB::table('call_admin_calls as ac')
                    ->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
                    ->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                    // ->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
                     ->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
                     ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
    //					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
    //					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
                    ->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');

			$query->where('dept.property_id', $property_id);
			$time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
			$query->whereRaw($time_range);

			if (count($section_tags) > 0)
				$query->whereIn('cs.section', $section_tags);

			if( $callcharge == 'true' )
				$query->where('ac.carrier_charges', '>', 0);
		}
        if( count($call_types) > 0 )
            $query->whereIn('ac.call_type', $call_types);

        if($classify != '' && $classify != 'All')
            $query->where('ac.classify', $classify);

        if(count($approvals) >0)
            $query->whereIn('ac.approval', $approvals);

        if (count($user_ids) > 0)
            $query->whereIn('ac.user_id', $user_ids);

        if(count($staff_tags) > 0) {
            $subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
            for($i = 0; $i < count($staff_tags); $i++)
            {
                if($i == 0)
                    $subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
                else
                    $subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
            }
            $subwhere = $subwhere . ")";
            $query->whereRaw($subwhere);
        }

		if( $report_by == 'Call Date' ) {
			$calldate_query = clone $query;
			$this->getClassifyCallDate($calldate_query, $ret,$currency->value);
		}

		if( $report_by == 'Department' ) {
			//ECHO 'HEREEEEEEEEEEEEE';
			$dapart_query = clone $query;
			$this->getClassifyDepart($dapart_query, $ret, $report_type,$currency->value);
		}

		if( $report_by == 'Destination' ) {
			$dapart_query = clone $query;
			//$dapart_query= $dapart_query->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id');
			$this->getClassifyDestination($dapart_query, $ret, $report_type,$currency->value);
		}

		if( $report_by == 'Extension' ) {
			$dapart_query = clone $query;
			$this->getClassifyExtension($dapart_query, $ret, $report_type,$currency->value);
		}

		if( $report_by == 'User' ) {
			$dapart_query = clone $query;
			$this->getClassifyUser($dapart_query, $ret, $report_type,$currency->value);
		}

		if( $report_by == 'Mobile' ) {
			$dapart_query = clone $query;
			$this->getClassifyMobile($dapart_query, $ret, $report_type, $group_by, $currency->value);
		}

		if( count($call_types) > 0 ) {
			$label = '';
			for($i = 0; $i < count($call_types); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $call_types[$i];
			}
			$ret['call_type'] = $label;
		} else
			$ret['call_type'] = 'All';
		if( count($approvals) > 0 ) {
			$label = '';
			for($i = 0; $i < count($approvals); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $approvals[$i];
			}
			$ret['approval'] = $label;
		} else
			$ret['approval'] = 'All';

		$extension_type_string = '';
			if( count($call_sort) > 0 ) {
				for($i = 0; $i < count($call_sort); $i++)
				{
					$extension_type_string = $extension_type_string.','.$call_sort[$i];
				}
				$extension_type_string = substr($extension_type_string, 1,strlen($extension_type_string));
			}

		if($classify == '')  $classify = 'All' ;

		$ret['currency'] = $currency->value;
		$ret['report_by'] = $report_by;
		$ret['filterby'] = $filterby;
		$ret['call_sort'] = $extension_type_string;
		$ret['period'] = date_format(new DateTime($start_time),"d-M-Y H:i").' to '. date_format(new DateTime($end_time),"d-M-Y H:i");
		$ret['report_type'] = $report_type;
		$ret['classify'] = $classify;
		$ret['property'] = Property::find($report['property_id']);
		$title = '';
		if($report['report_type'] == 'Detailed' ) {
			$title = 'Detailed Report';
		}
		if($report['report_type'] == 'Summary' ) {
			$title = 'Summary Report';
		}
		$title = $title." By ".$report['report_by'];
		$ret['title'] = $title;
		return $ret;
	}

	public function makeCallclassifyReportDataCallStatus($report) {

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$call_sort = $report['call_sort'];
		$group_by = $report['group_by'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$call_types = $report['call_types'];
		$user_ids = $report['user_ids'];
		$classify = $report['classify'];
		$approvals = $report['approvals'];
		$filterby = $report['filter_by'];
		$section_tags = $report['section_tags'];
		$staff_tags = $report['staff_tags'];
		$callcharge = $report['callcharge'];
		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$by_dept_data = [];
		$total_value = [];
		$total_value['unmarkedcount'] = 0;
		$total_value['unmarkedcharge'] = 0;
		$total_value['approvedcount'] = 0;
		$total_value['approvedcharge'] = 0;
		$total_value['unapprovedcount'] = 0;
		$total_value['unapprovedcharge'] = 0;
		$total_value['awaitingcount'] = 0.0;
		$total_value['awaitingcharge'] = 0;

		$ret = [];

        if(in_array('All', $call_sort) || in_array('Mobile', $call_sort)){

            $mobile = DB::table('call_mobile_calls as ac')
                    ->leftjoin('common_department as dept', 'ac.dept_id', '=', 'dept.id')
                    ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
    //					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
    //					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
                    ->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');

            $mobile->where('ac.property_id', $property_id);
            $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.date, ac.time) AND CONCAT_WS(\" \", ac.date, ac.time) <= '%s'", $start_time, $end_time);
            $mobile->whereRaw($time_range);

            if( $callcharge == 'true' ){
                $mobile->where('ac.charges','>','+000000000.00');
            }
            if( count($call_types) > 0 ){
                $mobile->whereIn('ac.call_type', $call_types);
            }
            if($classify != '' && $classify != 'All'){
                $mobile->where('ac.classify', $classify);
            }
            if(count($approvals) >0){
                $mobile->whereIn('ac.approval', $approvals);
            }
            $mobile_query = clone $mobile;
            $this->getClassifyCallStatusMobile($mobile_query,$by_dept_data, $total_value,$ret, $report_type);
        }

	    if(in_array('All', $call_sort) || in_array('LandLine', $call_sort)){
            //if (($call_sort == 'All') || ($call_sort == 'LandLine')){
            $query = DB::table('call_admin_calls as ac')
                ->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
                ->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                ->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
                ->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
                ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
    //					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
    //					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
                ->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');
            //$query->whereBetween('ac.call_date', array($start_time, $end_time));
            $query->where('dept.property_id', $property_id);
            $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
            $query->whereRaw($time_range);


			if (count($section_tags) > 0)
				$query->whereIn('cs.section', $section_tags);

			if( $callcharge == 'true' ){
				$query->where('ac.carrier_charges', '>', 0);

			}
			if( count($call_types) > 0 ){
				$query->whereIn('ac.call_type', $call_types);

			}
			if($classify != '' && $classify != 'All'){
				$query->where('ac.classify', $classify);

			}
			if(count($approvals) >0){
				$query->whereIn('ac.approval', $approvals);

			}
			if (count($user_ids) > 0)
				$query->whereIn('ac.user_id', $user_ids);

			if(count($staff_tags) > 0)  {
                $subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
                for($i = 0; $i < count($staff_tags); $i++)
                {
                    if($i == 0)
                        $subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
                    else
                        $subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
                }
                $subwhere = $subwhere . ")";
                $query->whereRaw($subwhere);
            }

            $dapart_query = clone $query;
            $this->getClassifyCallStatusLandLine($dapart_query,$by_dept_data, $total_value,$ret, $report_type);
		}

		if( count($call_types) > 0 ) {
			$label = '';
			for($i = 0; $i < count($call_types); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $call_types[$i];
			}
			$ret['call_type'] = $label;
		}
		else
			$ret['call_type'] = 'All';
		if( count($approvals) > 0 ) {
			$label = '';
			for($i = 0; $i < count($approvals); $i++) {
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $approvals[$i];
			}
			$ret['approval'] = $label;
		}
		else
			$ret['approval'] = 'All';

		$extension_type_string = '';
			if( count($call_sort) > 0 ) {
				for($i = 0; $i < count($call_sort); $i++)
				{
					$extension_type_string = $extension_type_string.','.$call_sort[$i];
				}
				$extension_type_string = substr($extension_type_string, 1,strlen($extension_type_string));
			}
		if($classify == '')  $classify = 'All' ;

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$ret['currency'] = $currency->value;
		$ret['report_by'] = $report_by;
		$ret['filterby'] = $filterby;
		$ret['call_sort'] = $extension_type_string;
		$ret['by_dept_data'] = $by_dept_data;
		$ret['total_value'] = $total_value;
		$ret['period'] = date_format(new DateTime($start_time),"d-M-Y H:i").' to '. date_format(new DateTime($end_time),"d-M-Y H:i");
		$ret['report_type'] = $report_type;
		$ret['classify'] = $classify;
		$ret['property'] = Property::find($report['property_id']);
		$title = '';
		if($report['report_type'] == 'Detailed' ) {
			$title = 'Detailed Report';
		}
		if($report['report_type'] == 'Summary' ) {
			$title = 'Summary Report';
		}
		$title = $title." By ".$report['report_by'];
		$ret['title'] = $title;
		return $ret;
	}

	public function makeCallclassifyReportDataCostComparison($report) {

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$call_sort = $report['call_sort'];
		$group_by = $report['group_by'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$call_types = $report['call_types'];
		$user_ids = $report['user_ids'];
		$classify = $report['classify'];
		$approvals = $report['approvals'];
		$filterby = $report['filter_by'];
		$section_tags = $report['section_tags'];
		$department_tags = $report['department_tags'];
		$staff_tags = $report['staff_tags'];
		$callcharge = $report['callcharge'];
		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$by_dept_data = [];
		$ret = [];

        if(in_array('All', $call_sort) || in_array('Mobile', $call_sort)){

            $mobile = DB::table('call_mobile_calls as ac')
                    ->leftjoin('common_department as dept', 'ac.dept_id', '=', 'dept.id')
                    ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
    //					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
    //					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
                    ->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');

                $mobile->where('ac.property_id', $property_id);
                $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.date, ac.time) AND CONCAT_WS(\" \", ac.date, ac.time) <= '%s'", $start_time, $end_time);
                $mobile->whereRaw($time_range);

                if( $callcharge == 'true' ){
                    $mobile->where('ac.charges', '>', '+000000000.00');
                }
                if( count($call_types) > 0 ){
                    $mobile->whereIn('ac.call_type', $call_types);
                }
                if($classify != '' && $classify != 'All'){
                    $mobile->where('ac.classify', $classify);
                }
                if(count($approvals) >0){
                    $mobile->whereIn('ac.approval', $approvals);
                }
                if (count($department_tags) > 0){
                 $mobile->whereIn('dept.department', $department_tags);
                }
                $mobile_query = clone $mobile;
                $this->getClassifyCostMobile($mobile_query,$by_dept_data,$ret, $report_type);
        }

        if(in_array('All', $call_sort) || in_array('LandLine', $call_sort)){
            //if (($call_sort == 'All') || ($call_sort == 'LandLine')){
            $query = DB::table('call_admin_calls as ac')
                ->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
                ->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                ->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
                ->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
                ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
    //					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
    //					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
                ->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');
            //$query->whereBetween('ac.call_date', array($start_time, $end_time));
            $query->where('dept.property_id', $property_id);
            $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
            $query->whereRaw($time_range);


			if (count($section_tags) > 0)
				$query->whereIn('cs.section', $section_tags);

			if( $callcharge == 'true' ){
				$query->where('ac.carrier_charges', '>', 0);

			}
			if( count($call_types) > 0 ){
				$query->whereIn('ac.call_type', $call_types);

			}
			if($classify != '' && $classify != 'All'){
				$query->where('ac.classify', $classify);

			}
			if(count($approvals) >0){
				$query->whereIn('ac.approval', $approvals);

			}
			if (count($department_tags) > 0){
			 $query->whereIn('dept.department', $department_tags);
			}
			if (count($user_ids) > 0)
				$query->whereIn('ac.user_id', $user_ids);

			if(count($staff_tags) > 0)  {
                $subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
                for($i = 0; $i < count($staff_tags); $i++)
                {
                    if($i == 0)
                        $subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
                    else
                        $subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
                }
                $subwhere = $subwhere . ")";
                $query->whereRaw($subwhere);
            }

            $dapart_query = clone $query;
            $this->getClassifyCostLandLine($dapart_query,$by_dept_data,$ret, $report_type);
		}

		if( count($call_types) > 0 ) {
			$label = '';
			for($i = 0; $i < count($call_types); $i++) {
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $call_types[$i];
			}
			$ret['call_type'] = $label;
		}
		else
			$ret['call_type'] = 'All';
		if( count($approvals) > 0 ) {
			$label = '';
			for($i = 0; $i < count($approvals); $i++)
			{
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $approvals[$i];
			}
			$ret['approval'] = $label;
		}
		else
			$ret['approval'] = 'All';

		$extension_type_string = '';
		if( count($call_sort) > 0 ) {
				for($i = 0; $i < count($call_sort); $i++)
				{
					$extension_type_string = $extension_type_string.','.$call_sort[$i];
				}
				$extension_type_string = substr($extension_type_string, 1,strlen($extension_type_string));
			}

		if($classify == '')  $classify = 'All' ;

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$ret['currency'] = $currency->value;
		$ret['report_by'] = $report_by;
		$ret['filterby'] = $filterby;
		$ret['call_sort'] = $extension_type_string;
		$ret['by_dept_data'] = $by_dept_data;
		$ret['period'] = date_format(new DateTime($start_time),"M").' to '. date_format(new DateTime($end_time),"M");
		$ret['report_type'] = $report_type;
		$ret['classify'] = $classify;
		$ret['property'] = Property::find($report['property_id']);
		$title = '';
		if($report['report_type'] == 'Detailed' ) {
			$title = 'Detailed Report';
		}
		if($report['report_type'] == 'Summary' ) {
			$title = 'Summary Report';
		}
		$title = $title." By ".$report['report_by'];
		$ret['title'] = $title;
		return $ret;
	}

	public function makeCallclassifyReportDataComparison($report) {

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$call_sort = $report['call_sort'];
		$group_by = $report['group_by'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$call_types = $report['call_types'];
		$user_ids = $report['user_ids'];
		$classify = $report['classify'];
		$approvals = $report['approvals'];
		$filterby = $report['filter_by'];
		$section_tags = $report['section_tags'];
		$department_tags = $report['department_tags'];
		$staff_tags = $report['staff_tags'];
		$callcharge = $report['callcharge'];
		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		//echo json_encode($department_tags);
		$ret = [];


        $mobile = DB::table('call_mobile_calls as ac')
            ->leftjoin('common_department as dept', 'ac.dept_id', '=', 'dept.id')
            ->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
//					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
//					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
            ->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');

        $mobile->where('ac.property_id', $property_id);
        $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.date, ac.time) AND CONCAT_WS(\" \", ac.date, ac.time) <= '%s'", $start_time, $end_time);
        $mobile->whereRaw($time_range);

        if (count($department_tags) > 0)
        $mobile->whereIn('dept.department', $department_tags);

        if(count($staff_tags) > 0)  {
            $subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
            for($i = 0; $i < count($staff_tags); $i++)
            {
                if($i == 0)
                    $subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
                else
                    $subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
            }
            $subwhere = $subwhere . ")";
            $mobile->whereRaw($subwhere);
        }

		$query = DB::table('call_admin_calls as ac')
				->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				->join('call_section as cs', 'se.section_id', '=', 'cs.id')
				->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
				->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
				->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
//					->leftJoin('call_admin_charge_map as acm', 'ac.admin_charge_rate_id', '=', 'acm.id')
//					->leftJoin('call_carrier_charges as cc', 'acm.carrier_charges', '=', 'cc.id')
				->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');
			//$query->whereBetween('ac.call_date', array($start_time, $end_time));
        $query->where('dept.property_id', $property_id);
        $time_range = sprintf("'%s' <= CONCAT_WS(\" \", ac.call_date, ac.start_time) AND CONCAT_WS(\" \", ac.call_date, ac.start_time) <= '%s'", $start_time, $end_time);
        $query->whereRaw($time_range);

         if (count($department_tags) > 0)
         $query->whereIn('dept.department', $department_tags);

        if(count($staff_tags) > 0)  {
            $subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
            for($i = 0; $i < count($staff_tags); $i++)
            {
                if($i == 0)
                    $subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
                else
                    $subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
            }
            $subwhere = $subwhere . ")";
            $query->whereRaw($subwhere);
        }

        if ($filterby == 'User'){

			$query_cond = clone $query;
			$date_list = $query_cond->whereNotNull('ac.user_id')->select(DB::raw('distinct(ac.user_id) as userid'))
				->get();

			$summarylist = [];
			$users=DB::table('common_users as cu')->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as user,cu.id'))->get();
			$query0 = DB::table('call_admin_calls as ac')
						->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id')
						->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
						->whereBetween('ac.call_date', [$start_time, $end_time]);
			$query1=DB::table('call_mobile_calls as mc')->whereBetween('mc.date', [$start_time, $end_time]);

			foreach($users as $user_key=>$user_row) {
                for( $i = 0 ; $i < count($date_list); $i++) {
                    if($date_list[$i]->userid==$user_row->id)
                    {
                        $detail=$user_row;
                        $summarylist[$date_list[$i]->userid] = $detail;
                        //echo json_encode($summarylist[$i]);
                        $user_id = $date_list[$i]->userid;


                        $extinform_query =	clone $query0;

                        $extinform = $extinform_query->where('ac.user_id', '=', $user_id)
                                             ->groupby('se.extension')
                                             ->groupby('month')
                                             ->select(DB::raw("MONTH(ac.call_date) as month,CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
                                             se.extension as extension,ROUND(sum((ac.classify = 'Personal') * ac.carrier_charges),2) as personal,
                                             ROUND(sum((ac.classify = 'Business') * ac.carrier_charges),2) as business,ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unclassify,
                                             count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcost																	
                                        "))
                        ->get();
                        if(!empty($extinform)) {
                            $summarylist[$date_list[$i]->userid]->user=$extinform[0]->user;
                            foreach($extinform as $row) {
                                if(!empty($row->month))
                                    $summarylist[$date_list[$i]->userid]->month_details[$row->month][$row->extension]['extinform1']=$row;
                            }
                        }

                        $mobileinform_query=clone $query1;


                        $mobileinform =  $mobileinform_query
                            ->where('mc.user_id', '=', $user_id)
                            ->groupby('month')
                            //->whereBetween('mc.date', array($start_time, $end_time))
                            ->select(DB::raw("MONTH(mc.date) as month,mc.call_from as caller,ROUND(sum((mc.classify = 'Personal') * mc.charges),2) as personal1,
                            ROUND(sum((mc.classify = 'Business') * mc.charges),2) as business1,ROUND(sum((mc.classify = 'Unclassified') * mc.charges),2) as unclassify1,
                            ROUND(sum(mc.charges),2) as totalcost1, count(*) as totalcount1
                                            "))
                            ->get();
                        if(!empty($mobileinform )) {
                            foreach($mobileinform as $row) {
                                if(!empty($row->month))
                                    $summarylist[$date_list[$i]->userid]->month_details[$row->month][$row->caller]['mobileinform']=$row;
                            }
                        }
                    }
                }
			}
			 //echo json_encode($summarylist);
			// $destination_user = [];

            // 	foreach($summarylist as $row)
            // {
            // 	$month = $row->extinform1->month;
            // 	$username = $row->extinform1->user;
            // 	if( empty($destination_user[$month]) ) {
            // 		$destination_user[$month] = [];
            // 		$destination_user[$month]['admin'] = [];
            // 	}
            // 	$destination_user[$month]['month'] = $month;
            // 	if( empty($destination_user[$month]['admin'][$username]) ) {
            // 		$destination_user[$month]['admin'][$username] = [];
            // 		$destination_user[$month]['admin'][$username]['detail'] = [];
            // 	}
    //            $destination_user[$month]['admin'][$username]['detail'][] = $row;
            // 	 //$by_building_room_department_data[$building]['admin'][$department]['detail'] = $row;
            // }

			$ret['summary'] = $summarylist;
		}

		if ($filterby == 'Department'){
            $query_cond = clone $query;
            $date_list = $query_cond->select(DB::raw('distinct(ac.dept_id) as deptid'))
                ->get();

            $summarylist = [];
            $depts=DB::table('common_department as cd')->select(DB::raw('cd.department,cd.id'))->get();
            $query0 = DB::table('call_admin_calls as ac')
                        ->join('common_users as cu', 'ac.user_id', '=', 'cu.id')
                        ->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
                        //->join('call_section as cs', 'se.section_id', '=', 'cs.id')
                        ->join('common_department as dept', 'ac.dept_id', '=', 'dept.id')
                        ->whereBetween('ac.call_date', [$start_time, $end_time]);
                        if (count($department_tags) > 0)
                        $query0->whereIn('dept.department', $department_tags);
            $query1 = DB::table('call_mobile_calls as mc')
                    ->leftJoin('common_users as cu', 'mc.user_id', '=', 'cu.id')
                    ->join('common_department as dept', 'mc.dept_id', '=', 'dept.id')
                    ->whereBetween('mc.date', [$start_time, $end_time]);
            if (count($department_tags) > 0)
                    $query1->whereIn('dept.department', $department_tags);
            foreach($depts as $dept_key=>$dept_row)
            {
                for( $i = 0 ; $i < count($date_list); $i++) {
                    //echo json_encode($dept_row->department);
                    if($date_list[$i]->deptid==$dept_row->id)
                    {
                        $detail=$dept_row;
                    $summarylist[$date_list[$i]->deptid] = $detail;
                    //echo json_encode($summarylist[$i]);
                    $dept_id = $date_list[$i]->deptid;
                    $extinform_query =	clone $query0;



                    $extinform = $extinform_query->where('ac.dept_id', '=', $dept_id)
                                            ->groupby('se.extension')
                                             ->groupby('month')
                                             ->select(DB::raw("MONTH(ac.call_date) as month,dept.department as department,CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,
                                             se.extension as extension,ROUND(sum((ac.classify = 'Personal') * ac.carrier_charges),2) as personal,
                                             ROUND(sum((ac.classify = 'Business') * ac.carrier_charges),2) as business,ROUND(sum((ac.classify = 'Unclassified') * ac.carrier_charges),2) as unclassify,
                                             count(*) as totalcount,	ROUND(sum(ac.carrier_charges),2) as totalcost																	
                                        "))
                        ->get();
                    //echo json_encode($extinform);
                    if(!empty($extinform))
                    {
                                //echo 'here';
                        $summarylist[$date_list[$i]->deptid]->department=$extinform[0]->department;
                        foreach($extinform as $row) {
                            if(!empty($row->month))
                                $summarylist[$date_list[$i]->deptid]->month_details[$row->month][$row->extension]['extinform1']=$row;
                        }
                    }

                    $mobileinform_query=clone $query1;

                    $mobileinform =  $mobileinform_query
                        ->where('mc.dept_id', '=', $dept_id)
                        ->groupby('month')
                        //->groupby('mc.call_from')

                        ->select(DB::raw("MONTH(mc.date) as month,mc.call_from as caller,CONCAT_WS(\" \", cu.first_name, cu.last_name) as user,ROUND(sum((mc.classify = 'Personal') * mc.charges),2) as personal1,
                        ROUND(sum((mc.classify = 'Business') * mc.charges),2) as business1,ROUND(sum((mc.classify = 'Unclassified') * mc.charges),2) as unclassify1,
                        ROUND(sum(mc.charges),2) as totalcost1, count(*) as totalcount1
                                        "))
                        ->get();
                            //$summarylist[$date_list[$i]->deptid]->department=$mobileinform[0]->department;
                        foreach($mobileinform as $row) {
                            if(!empty($row->month))
                                $summarylist[$date_list[$i]->deptid]->month_details[$row->month][$row->caller]['mobileinform']=$row;
                        }
                    }
                }
            }
				 //echo json_encode($summarylist);
				// $destination_user = [];

			// 	foreach($summarylist as $row)
			// {
			// 	$month = $row->extinform1->month;
			// 	$username = $row->extinform1->user;
			// 	if( empty($destination_user[$month]) ) {
			// 		$destination_user[$month] = [];
			// 		$destination_user[$month]['admin'] = [];
			// 	}
			// 	$destination_user[$month]['month'] = $month;
			// 	if( empty($destination_user[$month]['admin'][$username]) ) {
			// 		$destination_user[$month]['admin'][$username] = [];
			// 		$destination_user[$month]['admin'][$username]['detail'] = [];
			// 	}
            // $destination_user[$month]['admin'][$username]['detail'][] = $row;
			// 	 //$by_building_room_department_data[$building]['admin'][$department]['detail'] = $row;
			// }

            $ret['summary'] = $summarylist;
		}

        if ($filterby == 'All' ) {
            $mobile_query = clone $mobile;
            $dapart_query = clone $query;
            $this->getClassifyExtensionCompare($dapart_query, $ret, $report_type);
            $this->getClassifyMobileCompare($mobile_query, $ret, $report_type,$filterby);
        }

		if( $filterby == 'Extension' ) {
			$dapart_query = clone $query;
			$this->getClassifyExtensionCompare($dapart_query, $ret, $report_type);
		}

		if( $filterby == 'Mobile' ) {
			$dapart_query = clone $mobile;
			$this->getClassifyMobileCompare($dapart_query, $ret, $report_type,$filterby);
		}

		if( count($call_types) > 0 ) {
			$label = '';
			for($i = 0; $i < count($call_types); $i++) {
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $call_types[$i];
			}
			$ret['call_type'] = $label;
		} else
			$ret['call_type'] = 'All';
		if( count($approvals) > 0 ) {
			$label = '';
			for($i = 0; $i < count($approvals); $i++) {
				if( $i > 0 )
					$label = $label . ', ';
				$label = $label . $approvals[$i];
			}
			$ret['approval'] = $label;
		} else
			$ret['approval'] = 'All';

		$extension_type_string = '';
		if( count($call_sort) > 0 ) {
		    for($i = 0; $i < count($call_sort); $i++) {
		        $extension_type_string = $extension_type_string.','.$call_sort[$i];
		    }
		    $extension_type_string = substr($extension_type_string, 1,strlen($extension_type_string));
		}

		if($classify == '')
		    $classify = 'All' ;
		$currency = DB::table('property_setting as ps')
            ->select(DB::raw('ps.value'))
            ->where('ps.settings_key', 'currency')
            ->first();

		$ret['currency'] = $currency->value;
		$ret['report_by'] = $report_by;
		$ret['period'] = date_format(new DateTime($start_time),"M").' to '. date_format(new DateTime($end_time),"M");
		$ret['report_type'] = $report_type;
		$ret['filter_by'] = $filterby;
		$ret['call_sort'] = $extension_type_string;
		$ret['classify'] = $classify;
		$ret['filterby'] = $filterby;
		$ret['property'] = Property::find($report['property_id']);
		$title = '';
		if($report['report_type'] == 'Detailed' ) {
			$title = 'Detailed Report';
		}
		if($report['report_type'] == 'Summary' ) {
			$title = 'Summary Report';
		}
		$title = $title." By ".$report['report_by'];
		$ret['title'] = $title;

		return $ret;
	}

	public function getCallaccountReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('d-M-Y H:i:s');
		$cur_date = date('d-M-Y');

		$report = [];
		$report['report_type'] = $request->get('report_type', 'Detailed');
//		$report['call_sort'] = $request->get('call_sort', 'All');
		$report['call_sort'] = json_decode($request->get('call_sort', '[]'));
		$report['report_by'] = $request->get('report_by', 'Call Date');
		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);

		$report['call_type'] = $request->get('call_type', '[]');
		$report['call_types'] = json_decode($report['call_type']);

		$report['department_tag'] = $request->get('department_tags', '[]');
		$report['department_tags'] = json_decode($report['department_tag']);

		$report['room_tag'] = $request->get('room_tags', '[]');
		$report['room_tags'] = json_decode($report['room_tag']);

		$report['extension_tag'] = $request->get('extension_tags', '[]');
		$report['extension_tags'] = json_decode($report['extension_tag']);

		$report['building_tag'] = $request->get('building_id', '[]');
		$report['building_tags'] = json_decode($report['building_tag']);


		$report['accesscode_tag'] = $request->get('accesscode_tags', '[]');
		$report['accesscode_tags'] = json_decode($report['accesscode_tag']);

		$report['calledno_tag'] = $request->get('calledno_tags', '[]');
		$report['calledno_tags'] = json_decode($report['calledno_tag']);

		$report['destination_tag'] = $request->get('destination_tags', '[]');
		$report['destination_tags'] = json_decode($report['destination_tag']);

		$report['section_tag'] = $request->get('section_tags', '[]');
		$report['section_tags'] = json_decode($report['section_tag']);

		$report['call_duration'] = $request->get('call_duration', '');
		$report['call_duration_time'] = $request->get('call_duration_time', 0);

		$report['orderby'] = $request->get('field', 'call_date');
		$report['sort'] = $request->get('sort', 'asc');
		$report['property_id'] = $request->get('property_id', '4');
		//$report['building_id'] = $request->get('building_id', '6');
		$report['callcharge'] = $request->get('callcharge', 'false');
		$report['transfer'] = $request->get('transfer', 'false');

		if ($report['report_by'] == 'Hour Status'){
			return $this->makeCallaccountReportDataforHour($report);
		}
		else if ($report['report_by'] == 'Frequency'){
			return $this->makeCallaccountReportDataforFrequency($report);
		}
		else{
			return $this->makeCallaccountReportData($report);
		}
	}

	public function getAuditReportData(Request $request)
	{
		$report = [];
		$report['report_type'] = $request->get('report_type', 'Users');
		$report['report_by'] = $request->get('report_by', 'Department');
		if($report['report_type'] == 'Guest Rate Charges' ) $report['report_by'] = $report['report_type'];
		if($report['report_type'] == 'Extension' ) $report['report_by'] =  $report['report_type'];
		$report['property_id'] = $request->get('property_id','0');
		return $this->makeAuditReportData($report);
	}

	//print pdf from duty manager
	public function getComplaintReportData(Request $request)
	{
		$report = [];
		$report['report_type'] = $request->get('report_type', 'Complaint');
		$report['report_by'] = $request->get('report_by', 'Complaint');
		$report['property_id'] = $request->get('property_id','0');
		$report['property'] = Property::find($request->get("property_id" ,'0'));
		$report['id'] = $request->get('id', 'C00000');
		$data = app('App\Http\Controllers\Frontend\ComplaintController')->makeComplaintDetailReportData($report);

		return $data;
	}

	//print pdf from duty manager
	public function getComplaintSummaryReportData(Request $request)
	{
		$report = [];
		$report['report_type'] = $request->get('report_type', 'complaint_summary');
		$report['report_by'] = $request->get('report_by', 'complaint_summary');
		$report['property_id'] = $request->get('property_id','0');
		$report['property'] = Property::find($request->get("property_id" ,'0'));
		$report['start_date'] = $request->get('start_date', '');
		$report['end_date'] = $request->get('end_date', '');
		$report['user_id'] = $request->get('user_id', 0);
		$report['filter_value'] = $request->get('filter_value', 0);

		$data = app('App\Http\Controllers\Frontend\ComplaintController')->makeComplaintSummaryReportData($report);

		return $data;
	}

    public function getLNFReportData(Request $request) {
        $report = [];
        $report['report_type'] = $request->get('report_type', 'Complaint');
        $report['report_by'] = $request->get('report_by', 'Complaint');
        $report['property_id'] = $request->get('property_id','0');
        $report['property'] = Property::find($request->get("property_id" ,'0'));
        $report['id'] = $request->get('id', 'C00000');
        $data = app('App\Http\Controllers\Frontend\ComplaintController')->makeComplaintDetailReportData($report);

        return $data;
    }

    //print pdf from duty manager
    public function getLNFSummaryReportData(Request $request){
        $report = [];
        $report['report_type'] = $request->get('report_type', 'complaint_summary');
        $report['report_by'] = $request->get('report_by', 'complaint_summary');
        $report['property_id'] = $request->get('property_id','0');
        $report['property'] = Property::find($request->get("property_id" ,'0'));
        $report['start_date'] = $request->get('start_date', '');
        $report['end_date'] = $request->get('end_date', '');
        $report['user_id'] = $request->get('user_id', 0);
        $report['filter_value'] = $request->get('filter_value', 0);

        $data = app('App\Http\Controllers\Frontend\ComplaintController')->makeComplaintSummaryReportData($report);

        return $data;
    }

	public function getFeedbackSummaryReportData(Request $request){
		$report = [];
		$report['report_type'] = $request->get('report_type', 'Summary');
		$report['report_by'] = $request->get('report_by', 'Summary');
		$report['property_id'] = $request->get('property_id','0');
		$report['property'] = Property::find($request->get("property_id" ,'0'));
		$report['start_date'] = $request->get('start_date', '');
		$report['end_date'] = $request->get('end_date', '');
		$report['user_id'] = $request->get('user_id', 0);
		$report['filter_value'] = $request->get('filter_value', 0);
		$report['filter'] = $request->get('filter', 'All');

		$data =app('App\Http\Controllers\Frontend\ComplaintController')->makeFeedbackSummaryReportData($report);

		return $data;
	}

	public function getEngRequestSummaryReportData(Request $request) {
		$report = [];
		$report['report_type'] = $request->get('report_type', 'eng_request_summary');
		$report['report_by'] = $request->get('report_by', 'eng_request_summary');
		$report['property_id'] = $request->get('property_id','0');
		$report['property'] = Property::find($request->get("property_id" ,'0'));
		$report['start_date'] = $request->get('start_date', '');
		$report['end_date'] = $request->get('end_date', '');

		return $this->makeEngRequestReportData($report);

		return $data;
	}

	public function makeEngRequestReportData($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$property_id = $report['property_id'];
		$property = $report['property'];

		$start_date = $report['start_date'];
		$end_date = $report['end_date'];
		$ret = [];
		$query = DB::table('eng_request as er')
			->leftJoin('eng_request_category as erc', 'er.category_id', '=', 'erc.id')
			->leftJoin('eng_request_subcategory as ers', 'er.sub_category_id', '=', 'ers.id')
			->leftJoin('common_users as cu', 'er.requestor_id', '=', 'cu.id')
			->leftJoin('common_job_role as jr', 'cu.job_role_id', '=', 'jr.id')
			->leftJoin('common_property as cp', 'er.property_id', '=', 'cp.id')
			->where('er.property_id', $property_id)
			->whereRaw(sprintf("DATE(er.created_at) >= '%s' and DATE(er.created_at) <= '%s'", $start_date, $end_date));

		$data_query = clone $query;
		$data_list = $data_query
			->select(DB::raw('er.*, jr.job_role, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, cp.name as property_name, erc.name as category_name, ers.name as sub_category_name'))
			->get();

		foreach($data_list as $key => $row) {
			$info = app('App\Http\Controllers\Frontend\GuestserviceController')->getLocationInfo($row->loc_id);
			if( !empty($info) ) {
				$data_list[$key]->lgm_name = $info->name;
				$data_list[$key]->lgm_type = $info->type;
				$data_list[$key]->lg_property_id = $info->property_id;
			}
		}
		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['request_list'] = $data_list;
		$ret['start_date'] = $start_date;
		$ret['end_date'] = $end_date;
		$ret['period'] = date_format(new DateTime($start_date), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_date), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		$ret['property'] = $property;
		return $ret;
	}

	//print pdf from duty manager
	public function getCompensationReportData(Request $request) {
		$report = [];
		$report['id'] = $request->get('id', 0);
		$report['property_id'] = $request->get('property_id','0');
		$report['report_by'] = $request->get('report_by', 'complaint');
		$report['user_id'] = $request->get('user_id', 0);

		$data = app('App\Http\Controllers\Frontend\ComplaintController')->makeCompensationReportData($report);

		return $data;
	}

	public function getCallclassifyReportData(Request $request) {
		date_default_timezone_set(config('app.timezone'));

		$report = [];
		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'Call Date');
		//if ($report['report_by'] == 'Comparison'){
		//$cur_time = date('Y-m H:i:s');
		//$cur_date = date('Y-m');
		//$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		//$report['end_time'] = $request->get('end_time', $cur_time);
		//}else{
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);
		//}

		$report['call_sort'] = json_decode($request->get('call_sort', '[]'));
		$report['group_by'] = $request->get('group_by', '');
		$report['call_type'] = $request->get('call_type', '[]');
		$report['call_types'] = json_decode($report['call_type']);

		$report['classify'] = $request->get('classify', '');
		$report['filter_by'] = $request->get('filter_by', '');

		$report['approval'] = $request->get('approval', '[]');
		$report['approvals'] = json_decode($report['approval']);

		$report['section_tag'] = $request->get('section_tags', '[]');
		$report['section_tags'] = json_decode($report['section_tag']);

		$report['user_id'] = $request->get('user_id', '[]');
		$report['user_ids'] = json_decode($report['user_id']);

		$report['department_tag'] = $request->get('department_tags', '[]');
		$report['department_tags'] = json_decode($report['department_tag']);
		$report['staff_tag'] = $request->get('staff_tags', '[]');
		$report['staff_tags'] = json_decode($report['staff_tag']);

		$report['orderby'] = $request->get('field', 'call_date');
		$report['callcharge'] = $request->get('callcharge', 'false');
		$report['sort'] = $request->get('sort', 'asc');
		$report['property_id'] = $request->get('property_id', '4');

		if ($report['report_by'] == 'Comparison'){
			return $this->makeCallclassifyReportDataComparison($report);
		}else if ($report['report_by'] == 'Call Status'){
			return $this->makeCallclassifyReportDataCallStatus($report);
		}else if ($report['report_by'] == 'Cost Comparison'){
				return $this->makeCallclassifyReportDataCostComparison($report);
		}else{
			return $this->makeCallclassifyReportData($report);
		}
		//return $this->makeCallclassifyReportDataComparison($report);
	}

	public function generateCallaccountReport(Request $request) {
		
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);

		$start = microtime(true);
		$data = $this->getCallaccountReportData($request);

		//print_r($data);
		//die();
		$end = microtime(true);
		// echo $end - $start;

		// echo json_encode($data);
		return view('frontend.report.callaccount_pdf', compact('data'));
	}

	public function generateAuditReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		$data = $this->getAuditReportData($request);

		return view('frontend.report.audit_pdf', compact('data'));
	}

	public function generateCallclassifyReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		$data = $this->getCallclassifyReportData($request);

		return view('frontend.report.callclassify_pdf', compact('data'));
	}

	public function downloadPDFReport(Request $request) {
		
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$report_target = $request->get('report_target', 'callaccount');

		if( $report_target == 'callaccount' )
			$data = $this->getCallaccountReportData($request);

		if( $report_target == 'callcenter' )
			$data = $this->getCallcenterReportData($request);

		if( $report_target == 'guestservice' )
			$data = $this->getGuestserviceReportData($request);

		if( $report_target == 'wakeupcall' )
			$data = $this->getwakeupcallReportData($request);
		if( $report_target == 'callclassify' )
			$data = $this->getCallclassifyReportData($request);
		if( $report_target == 'audit' )
			$data = $this->getAuditReportData($request);
		if( $report_target == 'complaint')
			$data = $this->getComplaintReportData($request);
        if($report_target == 'complaint_summary')
			$data = $this->getComplaintSummaryReportData($request);
        if( $report_target == 'lnfreport')
            $data = $this->getLNFReportData($request);
        if($report_target == 'lnf_summary')
            $data = $this->getLNFSummaryReportData($request);
		if($report_target == 'feedback_summary')
			$data = $this->getFeedbackSummaryReportData($request);
		if( $report_target == 'compensation')
			$data = $this->getCompensationReportData($request);
		if( $report_target == 'complaintreport') {
			$data = $this->getComplaintreportReportData($request);
		}
        if( $report_target == 'lnfreport') {
            $data = $this->getLNFreportReportData($request);
        }
		if( $report_target == 'hskpreport') {
			$data = $this->getHskpReportData($request);
		}
		if($report_target == 'eng_request_summary')
			$data = $this->getEngRequestSummaryReportData($request);

		if($report_target == 'minibar')
			$data = $this->getMinibarReportData($request);

		if($report_target == 'engineering')
			$data = $this->getEngineeringReportData($request);



		if($report_target == 'minibar_guest')
			$data = app('App\Http\Controllers\Backoffice\Guest\MinibarItemController')->mininbarDetail($request);

		if($report_target == 'mod_checklist')
			$data = app('App\Http\Controllers\Frontend\ModController')->getModChecklistReportData($request);

		if($report_target == 'hskp_checklist')
			$data = app('App\Http\Controllers\Backoffice\Guest\HSKPController')->getCheckListDataForReport($request);

		if($report_target == 'workorder_checklist')
			$data = app('App\Http\Controllers\Frontend\EquipmentController')->getWorkorderCheckListDataForReport($request);

		if($report_target == 'alarm_report')
			$data = app('App\Http\Controllers\Frontend\AlarmController')->getAlarmLogListData($request);

		if($report_target == 'lnf_detail_report')
			$data = app('App\Http\Controllers\Frontend\LNFController')->getLnfDetail($request);

		$data['font-size']='7px';

		if( !isset($data['report_by']) )
			$data['report_by'] = '';

		$filename = 'Detail_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		if($report_target == 'minibar' && $data['report_type']=='Stock')
		{
			$filename = 'Stock_Report_' . date('d_M_Y_H_i');
		}
		if($report_target == 'minibar' && $data['report_type']=='Summary')
		{
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}
		if($report_target == 'guestservice' && $data['report_type']=='Summary')
		{
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}
		if($report_target == 'callclassify' && $data['report_type']=='Summary')
		{
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}
		if($report_target == 'hskpreport' && $data['report_type']=='Summary')
		{
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}
		if( $report_target == 'wakeupcall' && $data['report_type'] == 'Summary')
		{
			$filename = 'AWC_Summary_Report_' . date('d_M_Y_H_i');
		}
		if( $report_target == 'callaccount' && $data['report_type'] == 'Summary')
		{
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}
		if( $report_target == 'complaintreport' && $data['report_type'] == 'Summary')
		{
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}
		if( $report_target == 'complaintreport' && $data['report_type'] == 'Frequency')
		{
			$filename = 'Frequency_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}
		if($report_target == 'minibar_guest')
		{
			$filename = 'Minibar_' . date('d_M_Y_H_i') . '_' . $data['guest_name'];
		}

		if($report_target == 'complaint') {
			$filename = 'Detail_Feedback_Report_' . sprintf('C%05d', $data['id']) . '_' . date('d_M_Y');
		}
		if($report_target == 'complaint_summary') {
			$filename = 'Summary_Feedback_Report_' . $data['start_date'] . '_' . $data['end_date'];
		}
		if($report_target == 'feedback_summary') {
			$filename = 'Summary_Guest Relations Log_Report_' . $data['start_date'] . '_' . $data['end_date'];
		}
		if($report_target == 'compensation') {
			$filename = 'Compensation_Report_' . sprintf('C%05d', $data['id']);
		}
		if($report_target == 'eng_request_summary') {
			$filename = 'Engineering_Request_Report' . '_' .date('d_M_Y_H_i');
		}

		if($report_target == 'mod_checklist'){
			$filename = 'MOD_Checklist_' . date('d_M_Y_H_i') . '_' . $data['name'];
		}

		if($report_target == 'lnfreport'){
			$filename = 'Lost_Found_' . date('d_M_Y_H_i') . '_' . $data['name'];
		}

		if($report_target == 'hskp_checklist'){
			$filename = 'Housekeeping_Checklist_' . date('d_M_Y_H_i') . '_' . $data['room'];
		}

		if($report_target == 'workorder_checklist'){
			$filename = 'Workorder_Checklist_' . date('d_M_Y_H_i') . '_' . $data['name'];
		}

		if($report_target == 'alarm_report'){
			$filename = $data['name'];
		}

		if($report_target == 'lnf_detail_report')
			$filename = 'LostFound_Report_' . date('d_M_Y_H_i') . '_' . $data['name'];

		if( $report_target == 'engineering' && $data['report_type'] == 'Summary')
		{
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}


		$folder_path = public_path() . '/uploads/reports/';
		$path = $folder_path . $filename . '.html';
		$pdf_path = $folder_path . $filename . '.pdf';

		ob_start();

		if( $report_target == 'callaccount' )
			$content = view('frontend.report.callaccount_pdf', compact('data'))->render();
		if( $report_target == 'callcenter' )
			$content = view('frontend.report.callcenter_pdf', compact('data'))->render();
		if( $report_target == 'guestservice' )
			$content = view('frontend.report.guestservice', compact('data'))->render();
		if( $report_target == 'wakeupcall' )
			$content = view('frontend.report.wakeupcall_pdf', compact('data'))->render();
		if( $report_target == 'callclassify' )
			$content = view('frontend.report.callclassify_pdf', compact('data'))->render();
		if( $report_target == 'audit' )
			$content = view('frontend.report.audit_pdf', compact('data'))->render();
		if( $report_target == 'complaint' )
			$content = view('frontend.report.complaint_pdf', compact('data'))->render();
		if( $report_target == 'complaint_summary' )
			$content = view('frontend.report.complaint_summary_pdf', compact('data'))->render();
		if( $report_target == 'feedback_summary' )
			$content = view('frontend.report.feedback_summary_pdf', compact('data'))->render();
		if( $report_target == 'compensation' )
		{
			$content = CompensationTemplate::generateTemplate($data);
		}
		if( $report_target == 'complaintreport' )
			$content = view('frontend.report.complaintreport', compact('data'))->render();

		if( $report_target == 'hskpreport' )
			$content = view('frontend.report.hskp_pdf', compact('data'))->render();

		if( $report_target == 'minibar' )
			$content = view('frontend.report.minibar', compact('data'))->render();

		if( $report_target == 'engineering' )
			$content = view('frontend.report.engineering_pdf', compact('data'))->render();



		if($report_target == 'minibar_guest')
			$content = view('frontend.report.minibar_guest', compact('data'))->render();

		if($report_target == 'eng_request_summary')
			$content = view('frontend.report.eng_request_summary_pdf', compact('data'))->render();

		if($report_target == 'mod_checklist')
			$content = view('frontend.report.mod_checklist_pdf', compact('data'))->render();

		if($report_target == 'lnfreport')
			$content = view('frontend.report.lostfound_report', compact('data'))->render();

		if($report_target == 'hskp_checklist')
			$content = view('frontend.report.hskp_checklist_pdf', compact('data'))->render();

		if($report_target == 'workorder_checklist')
			$content = view('frontend.report.workorder_checklist_pdf', compact('data'))->render();

		if($report_target == 'alarm_report')
			$content = view('frontend.report.alarm_report_pdf', compact('data'))->render();

		if($report_target == 'lnf_detail_report')
			$content = view('frontend.report.lnf_detail_pdf', compact('data'))->render();


		echo $content;

		// return;

		file_put_contents($path, ob_get_contents());

		ob_clean();

		$req = [];
		$req['filename'] = $filename;
		$req['folder_path'] = $folder_path;
		$req['upload'] = 'uploads/reports/';

		$options = [];
		$options['html'] = $path;
		$options['pdf'] = $pdf_path;
		// $options['runnings'] = "module.exports = {
		// 	header: {
		//         height: '3cm', contents: function (page) {
		//             return '<header class=\"pdf-header\" style=\" overflow:hidden; font-size: 10px; padding: 10px; margin: 0 -15px; color: #fff; background: none repeat scroll 0 0 #00396f;\"><img style=\"float: left;\" alt=\"\" src=\"../images/logo.jpg\"><p> XYZ </p></header>'
		//         }
		//     },

		// 	footer: {height: '1cm', contents: function(page) { return '<footer class=\"partner\"><p>In Ennovatech</p><img src=\"./logo.png\"/></footer>'}}
		// }";

		if($report_target == 'complaint' || $report_target == 'complaint_summary' ||$report_target == 'feedback_summary' || $report_target == 'complaintreport' || $report_target == 'compensation' ) {
			$options['paperSize'] = ['format' => 'A4', 'orientation' => 'portrait'];
		}else {
			//$options['paperSize'] = array('format' => 'A4', 'orientation' => 'landscape');
			$options['paperSize'] = ['format' => 'A4', 'orientation' => 'portrait'];
		}
		if( $report_target == 'hskpreport' && $data['report_type'] == 'Task Sheet')
		{
			$options['paperSize'] = array('format' => 'A4', 'orientation' => 'landscape');
		}
		$req['options'] = $options;

		$method = Functions::getRequestMethod($request->get('device_id', ''));
		if( $method == 'Mobile' )
		{
			$response = Curl::to('http://localhost:8001/pdfreporturl')
				->withData($req)
				->asJson()
				->post();

			$upload_url = '/uploads/reports/' . $filename . '.pdf';
			$ret = [];
			$ret['code'] = 200;
			$ret['content'] = $upload_url;

			return Response::json($ret);
		}

		return Response::json($req);
	}

	public function downloadCallaccountExcelReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getCallaccountReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$param = $request->all();
		if ($data['report_type'] == 'Detailed') {
			$filename = 'Detail_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		} else {
			$filename = 'Summary_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		}

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel') {
            $excel_file_type = config('app.report_file_type');
        }

		$ret = Excel::create($filename, function($excel) use ($data, $logo_path, $param) {
			$excel->sheet('Call Charge Report', function($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputCallAccountLogo($sheet,$logo_path);

				$this->outputCallAccountDescription($sheet, $data);

				$row_num = 7;

				if ($data['report_by'] == 'Hour Status'){
					$row_num = $this->outputHourStatusReport($sheet, $row_num, $data);
					$row_num += 2;
				}
				elseif ($data['report_by'] == 'Frequency'){
					$row_num = $this->outputCallFrequencyReport($sheet, $row_num, $data);
					$row_num += 2;
				}
				else{

				if ($data['report_by'] != 'Room' && $data['report_by'] != 'Plain CSV') {
					$row_num = $this->outputGrantTotalReport($sheet, $row_num, $data);
					$row_num += 2;
				}

				if ((in_array('All' ,$data['call_sort']) || in_array( 'Guest Call' ,$data['call_sort'])) && $data['report_by'] != 'Plain CSV') {
					if ($data['report_by'] != 'Department')
					{
						$row_num = $this->outputGrantTotalGuestReport($sheet, $row_num, $data);
						$row_num += 2;
					}
				}

				if ((in_array('All' ,$data['call_sort']) || in_array( 'Admin Call' ,$data['call_sort'])) && $data['report_by'] != 'Plain CSV') {
					if ($data['report_by'] != 'Room') {
						$row_num = $this->outputGrantTotalAdminReport($sheet, $row_num, $data);
						$row_num += 2;
					}

					if ($data['report_by'] == 'Property' || $data['report_by'] == 'Department') {
						$row_num = $this->outputGrantTotalAdminByBuildingDepartment($sheet, $row_num, $data);
						$row_num += 2;
					}
				}

				if (in_array('All' ,$data['call_sort']) || in_array( 'Business Centre' ,$data['call_sort'])) {
					if ($data['report_by'] != 'Room') {
						$row_num = $this->outputGrantTotalBusinessCentreReport($sheet, $row_num, $data);
						$row_num += 2;
					}

					if ($data['report_by'] == 'Property' || $data['report_by'] == 'Department') {
						$row_num = $this->outputGrantTotalBusinessCentreByBuildingDepartment($sheet, $row_num, $data);
						$row_num += 2;
					}
				}

				if ($data['report_by'] == 'Call Date') {
					$row_num = $this->outputGrantTotalAdminByBuildingCallDate($sheet, $row_num, $data);
					$row_num += 2;
				}
				if( ($data['report_by'] == 'Extension' ) && ( $data['report_type'] == 'Summary' )){
					$row_num = $this->outputSummaryExtensionReport($sheet, $row_num, $data);
				}else{

                    if( $data['report_by'] == 'Property' ) {
                        if($data['report_type'] == 'Detailed')
                        {
                            $row_num = $this->outputDetailByBuildingRoomDepartment($sheet, $row_num, $data);
                        }
                    } elseif ($data['report_by'] == 'Plain CSV' ) {
                        if (in_array('All' ,$data['call_sort']) || in_array( 'Guest Call' ,$data['call_sort'])
                            && $data['report_type'] == 'Detailed' )
                        {
                            $row_num = $this->outputPlainCSVGuestExcelReport($sheet, $row_num, $data);
                        }
                        if (in_array('All' ,isset($data['call_sort']) ? $data['call_sort'] : []) || in_array( 'Admin Call' ,isset($data['call_sort']) ? $data['call_sort'] : [])
                            && isset($data['report_type']) && $data['report_type'] == 'Detailed')
                        {
                            $row_num = $this->outputPlainCSVAdminExcelReport($sheet, $row_num, $data);
                        }
                    } else {
                        if (in_array('All' ,$data['call_sort']) || in_array( 'Guest Call' ,$data['call_sort'])
                            && $data['report_type'] == 'Detailed'&& $data['report_by'] != 'Department' )
                        {
                            // Guest Calls
                            $row_num = $this->outputGuestCallReport($sheet, $row_num, $data);
                            $row_num += 2;
                        }

                        if (in_array('All' ,$data['call_sort']) || in_array( 'Business Centre' ,$data['call_sort'])
                            && $data['report_type'] == 'Detailed'
                            && $data['report_by'] != 'Room')
                        {
                            // Admin Calls
                            $row_num = $this->outputBusinessCentreCallReport($sheet, $row_num, $data);
                        }

                        if (in_array('All' ,isset($data['call_sort']) ? $data['call_sort'] : []) || in_array( 'Admin Call' ,isset($data['call_sort']) ? $data['call_sort'] : [])
                            && isset($data['report_type']) && $data['report_type'] == 'Detailed'
                            && isset($data['report_by']) && $data['report_by'] != 'Room' )
                        {
                            // Admin Calls
                            $row_num = $this->outputAdminCallReport($sheet, $row_num, $data);
                        }
                    }
                }
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function downloadAuditExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);
		$report_type = $request->get('report_type', 'Users');

		$data = $this->getAuditReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$param = $request->all();

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$filename = 'Detail_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		if($report_type == 'Users') {
			$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
				$excel->sheet('Audit Report for Users', function ($sheet) use ($data, $logo_path) {
					$sheet->setOrientation('landscape');

					$this->outputAuditLogo($sheet, $logo_path);
					$this->outputAuditDescription($sheet, $data);
					$row_num = 5;

					if ($data['report_by'] == 'Department') {
						$row_num = $this->outputAuditDepartmentReport($sheet, $row_num, $data);
						$row_num += 2;
					}
					if ($data['report_by'] == 'Job Role') {
						$row_num = $this->outputAuditJobRoleReport($sheet, $row_num, $data);
						$row_num += 2;
					}
					if ($data['report_by'] == 'Permission') {
						$row_num = $this->outputAuditPermissionReport($sheet, $row_num, $data);
						$row_num += 2;
					}
				});

				$this->sendNotifyDownloadCompleted($param);
			})->export($excel_file_type);
		}
		if($report_type == 'Room') {
			$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
				$excel->sheet('Audit Report for Room', function ($sheet) use ($data, $logo_path) {
					$sheet->setOrientation('landscape');

					$this->outputAuditLogo($sheet, $logo_path);
					$this->outputAuditDescription($sheet, $data);
					$row_num = 5;

					if ($data['report_by'] == 'Building') {
						$row_num = $this->outputAuditBuildingReport($sheet, $row_num, $data);
						$row_num += 2;
					}
					if ($data['report_by'] == 'Room Type') {
						$row_num = $this->outputAuditRoomTypeReport($sheet, $row_num, $data);
						$row_num += 2;
					}
				});

				$this->sendNotifyDownloadCompleted($param);

			})->export($excel_file_type);
		}
		if($report_type == 'Guest Rate Charges') {
			$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
				$excel->sheet('Audit Report for Charges', function ($sheet) use ($data, $logo_path) {
					$sheet->setOrientation('landscape');

					$this->outputAuditLogo($sheet, $logo_path);
					$this->outputAuditDescription($sheet, $data);
					$row_num = 5;
					$row_num = $this->outputAuditGuestRateChargeReport($sheet, $row_num, $data);
					$row_num += 2;
				});

				$this->sendNotifyDownloadCompleted($param);

			})->export($excel_file_type);
		}

		if($report_type == 'Extension') {
			$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
				$excel->sheet('Audit Report for Extension', function ($sheet) use ($data, $logo_path) {
					$sheet->setOrientation('landscape');

					$this->outputAuditLogo($sheet, $logo_path);
					$this->outputAuditDescription($sheet, $data);
					$row_num = 5;
					$row_num = $this->outputAuditExtensionReport($sheet, $row_num, $data);
					$row_num += 2;
				});

				$this->sendNotifyDownloadCompleted($param);

			})->export($excel_file_type);
		}
		if($report_type == 'Minibar') {
			$ret = Excel::create($filename, function ($excel) use ($data, $logo_path, $param) {
				$excel->sheet('Audit Report for Minibar', function ($sheet) use ($data, $logo_path) {
					$sheet->setOrientation('landscape');

					$this->outputAuditLogo($sheet, $logo_path);
					$this->outputAuditDescription($sheet, $data);
					$row_num = 5;
					$row_num = $this->outputAuditMinibarReport($sheet, $row_num, $data);
					$row_num += 2;
				});

				$this->sendNotifyDownloadCompleted($param);

			})->export($excel_file_type);
		}
	}

	public function downloadWakeupcallExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getWakeupcallReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;
		if ($data['report_type'] = 'Detailed')
		{
			$filename = 'Detailed_Auto Wakeup Call_Report_by_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		} else {
			$filename = 'Summary_Auto Wakeup Call_Report_' . date('d_M_Y_H_i');
		}
		$param = $request->all();

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {
			$excel->sheet('AWC Report', function($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');
				$this->outputComplaintLogo($sheet,$logo_path);
				$this->outputWakeupcallDescription($sheet, $data);

				$row_num = 7;

				if (($data['report_type'] == 'Detailed') || ($data['report_type'] == 'Summary'))
				{
					$row_num = $this->outputWakeupCallReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}
	public function downloadCallcenterExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getCallcenterReportData($request);
		$property_id = $request->get('property_id',4);

				$property = DB::table('common_property')->where('id', $property_id)->first();
				if (empty($property)) {
					echo "Property does not exist";
					return;
				}
				$logo_path = $property->logo_path;

		$param = $request->all();

		$filename = 'CallCenter_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function($excel) use ($data, $param, $logo_path) {
			$excel->sheet('Call Center Report', function($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');
				$this->outputCallCenterLogo($sheet, $logo_path);
				if(!empty($data['graph1']))
				$this->outputCallCenterGraph($sheet, $data);

				$this->outputCallCenterDescription($sheet, $data);

				$row_num = 7;
				///////////
				if($data['report_by'] == 'Agent' ) {
					$row_num = $this->outputAgentCallcenterReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Call Status' ) {
					$row_num = $this->outputCallStatusCallcenterReport($sheet, $row_num, $data);
				}

				if($data['report_by'] == 'Date') {
					$row_num = $this->outputDateCallcenterReport($sheet, $row_num, $data);
				}

				if($data['report_by'] == 'Origin') {
					$row_num = $this->outputOriginCallcenterReport($sheet, $row_num, $data);
				}

				if($data['report_by'] == 'Per Hour') {
					$row_num = $this->outputPerHourCallcenterReport($sheet, $row_num, $data);

				}
				if($data['report_by'] == 'Call Type') {
					$row_num = $this->outputCallTypeCallcenterReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Channel') {
					$row_num = $this->outputChannelTypeCallcenterReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Agent Status') {
					$row_num = $this->outputAgentStatusCallcenterReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Auto Attendant') {
					$row_num = $this->outputAutoAttendantCallcenterReport($sheet, $row_num, $data);
				}
				///////////
				if ($data['report_by'] == 'Abandoned Summary') {
					$row_num = $this->outputAbandonedCallcenterReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Agent Call Detailed') {
					$row_num = $this->outputAgentCallDetailedReport($sheet, $row_num,$data) ;
				}
				if($data['report_by'] == 'Agent Activity') {
					$row_num = $this->outputAgentActivityReport($sheet, $row_num,$data) ;
				}
				if($data['report_by'] == 'Call Type Summary by Agent') {
					$row_num = $this->outputCallTypeSummaryByAgentReport($sheet, $row_num,$data);
				}

				if($data['report_by'] == 'Agent Activity Summary') {
					$row_num = $this->outputAgentActivitySummaryReport($sheet, $row_num,$data);
				}

				if($data['report_by'] == 'Call Trafic Time Analysis') {
					$row_num = $this->outputCallTimeTrafficReport($sheet, $row_num,$data) ;
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	private function sendNotifyDownloadCompleted($param) {
		if( empty($param) )
			return;

		$message = [];
		$message['type'] = 'report_excel';
		$message['content'] = $param;

		Redis::publish('notify', json_encode($message));
	}

	public function downloadCallclassifyExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getCallclassifyReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = 'Callclassify_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		$param = $request->all();

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		$ret = Excel::create($filename, function($excel) use ($data, $param,$logo_path) {
			$excel->sheet('Call CLassify Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');
				$this->outputCallclassifyLogo($sheet, $logo_path);
				$this->outputCallclassifyDescription($sheet, $data);

				$row_num = 7;
				///////////
				if($data['report_by'] == 'Call Date' ) {
					$row_num = $this->outputCallDateCallclassifyReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Department' ) {
					$row_num = $this->outputDeaprtmentCallclassifyReport($sheet, $row_num, $data);
				}

				if($data['report_by'] == 'Destination') {
					$row_num = $this->outputDestinationCallclassifyReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Extension') {
					$row_num = $this->outputExtensionCallclassifyReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'User') {
					$row_num = $this->outputUserCallclassifyReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Mobile') {
					$row_num = $this->outputMobileCallclassifyReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Comparison') {
					$row_num = $this->outputComparisonCallclassifyReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Call Status') {
					$row_num = $this->outputCallStatusCallclassifyReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Cost Comparison') {
					$row_num = $this->outputCostCallclassifyReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	private function outputCallCenterLogo($sheet,$logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A2:B2');
		$sheet->mergeCells('A3:B3');

		$sheet->setMergeColumn([
			'columns' => ['A','B'],
			'rows' => [
				[2,3],
			]
		]);

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		// $hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$hotlync_logo->setPath(public_path($logo_path));
		$hotlync_logo->setCoordinates('A2');
		$hotlync_logo->setHeight(60);
		$hotlync_logo->setWorksheet($sheet);
	}

	private function outputCallCenterGraph($sheet, $data) {
		// Hotlync Logo
		$sheet->mergeCells('K42:L42');
		$sheet->mergeCells('K43:L43');

		$sheet->setMergeColumn([
			'columns' => ['K','L'],
			'rows' => [
				[42,43],
			]
		]);

		// Load image into memory
        $image = imagecreatefromstring(base64_decode($data['graph1']));
        imagesavealpha($image, true);
        $drawing = new PHPExcel_Worksheet_MemoryDrawing();
        $drawing->setName('No Graph');
        $drawing->setImageResource($image);
        $drawing->setRenderingFunction(PHPExcel_Worksheet_MemoryDrawing::RENDERING_PNG);
        $drawing->setMimeType(PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT);
        $drawing->setCoordinates('K42');

		// $hotlync_logo = new PHPExcel_Worksheet_Drawing;
		// $hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		// $hotlync_logo->setCoordinates('K42');
		// $hotlync_logo->setHeight(60);
		$drawing->setWorksheet($sheet);
	}

	private function outputCallclassifyLogo($sheet, $logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A2:B2');
		$sheet->mergeCells('A3:B3');

		$sheet->setMergeColumn([
			'columns' => ['A','B'],
			'rows' => [
				[2,3]
			]
		]);

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		// $hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$hotlync_logo->setPath(public_path($logo_path));
		$hotlync_logo->setCoordinates('A2');
		$hotlync_logo->setHeight(60);
		$hotlync_logo->setWorksheet($sheet);
	}
	private function outputWakeupCallLogo($sheet, $logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('E2:F2');
		$sheet->mergeCells('E3:F3');

		$sheet->setMergeColumn([
			'columns' => ['E','F'],
			'rows' => [
				[2,3]
			]
		]);

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		// $hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$hotlync_logo->setPath(public_path($logo_path));
		$hotlync_logo->setCoordinates('E2');
		$hotlync_logo->setHeight(60);
		$hotlync_logo->setWorksheet($sheet);
	}
	private function outputCallAccountLogo($sheet ,$logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A1:B1');
		$sheet->mergeCells('A2:B2');

		$sheet->setMergeColumn([
				'columns' => ['A','B'],
				'rows' => [
						[2,3],
				]
		]);

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		//$hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$hotlync_logo->setPath(public_path($logo_path)); //your image path
		$hotlync_logo->setCoordinates('A1');
		$hotlync_logo->setHeight(80);
		$hotlync_logo->setWorksheet($sheet);
	}

	private function outputMinibarLogo($sheet ,$logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A1:B1');
		$sheet->mergeCells('A2:B2');

		$sheet->setMergeColumn([
			'columns' => ['A','B'],
			'rows' => [
				[2,3]
			]
		]);

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		//$hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$hotlync_logo->setPath(public_path($logo_path)); //your image path
		$hotlync_logo->setCoordinates('A1');
		$hotlync_logo->setHeight(80);
		$hotlync_logo->setWorksheet($sheet);
	}

	private function outputEngineeringLogo($sheet ,$logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A1:B1');
		$sheet->mergeCells('A2:B2');

		$sheet->setMergeColumn([
			'columns' => ['A','B'],
			'rows' => [
				[2,3]
			]
		]);

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		//$hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$hotlync_logo->setPath(public_path($logo_path)); //your image path
		$hotlync_logo->setCoordinates('A1');
		$hotlync_logo->setHeight(80);
		$hotlync_logo->setWorksheet($sheet);
	}

	private function outputAuditLogo($sheet ,$logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A1:B1');
		$sheet->mergeCells('A2:B2');

		$sheet->setMergeColumn([
			'columns' => ['B','C'],
			'rows' => [
				[2,3]
			]
		]);

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		//$hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$hotlync_logo->setPath(public_path($logo_path)); //your image path
		$hotlync_logo->setCoordinates('A1');
		$hotlync_logo->setHeight(60);
		$hotlync_logo->setWorksheet($sheet);
	}

	private function outputCallAccountDescription($sheet, $data) {
		// Report title
		$row_num = 1;
		$sheet->mergeCells('H'.$row_num.':K'.$row_num);
		$sheet->cell('H'.$row_num, function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$row_num++;
		$sheet->mergeCells('H'.$row_num.':K'.$row_num);
		$sheet->cell('H'.$row_num, function($cell) use ($data) {
			$cell->setValue('Period : ' . isset($data['period']) ? $data['period'] : "");

		});

		if($data['property']->name !='All') {
			$row_num++;
			$sheet->mergeCells('H' . $row_num . ':K' . $row_num);
			$sheet->cell('H'.$row_num, function ($cell) use ($data) {
				$cell->setValue('Property : ' . isset($data['property']->name) ? $data['property']->name : "");
			});
		}

		if($data['building'] !="All") {
			$row_num++;
			$sheet->mergeCells('H'.$row_num.':K'.$row_num);
			$sheet->cell('H'.$row_num, function ($cell) use ($data) {
				$cell->setValue('Building : ' . isset($data['building']) ? $data['building'] : "");
			});
		}

		if($data['extenstion_type'] != "All") {
			$row_num++;
			$sheet->mergeCells('H'.$row_num.':K'.$row_num);
			$sheet->cell('H'.$row_num, function ($cell) use ($data) {
				$cell->setValue('Extension Type : ' . isset($data['extenstion_type']) ? $data['extenstion_type'] : "");
			});
		}

		if($data['department'] != "All") {
			$row_num++;
			$sheet->mergeCells('H'.$row_num.':K'.$row_num);
			$sheet->cell('H'.$row_num, function ($cell) use ($data) {
				$cell->setValue('Department : ' . isset($data['department']) ? $data['department'] : "");
			});
		}

		if($data['room'] != "All") {
			$row_num++;
			$sheet->mergeCells('H'.$row_num.':K'.$row_num);
			$sheet->cell('H'.$row_num, function ($cell) use ($data) {
				$cell->setValue('Room : ' . isset($data['room']) ? $data['room'] : "");
			});
		}

		if($data['extension'] != "All") {
			$row_num++;
			$sheet->mergeCells('H'.$row_num.':K'.$row_num);
			$sheet->cell('H'.$row_num, function ($cell) use ($data) {
				$cell->setValue('Extension : ' . isset($data['extension']) ? $data['extension'] : "");
			});
		}

		if($data['destination'] != "All") {
			$row_num++;
			$sheet->mergeCells('H'.$row_num.':K'.$row_num);
			$sheet->cell('H'.$row_num, function ($cell) use ($data) {
				$cell->setValue('Destination : ' . isset($data['destination']) ? $data['destination'] : "");
			});
		}
	}

	private function outputAuditDescription($sheet, $data) {
		// Report title
		$sheet->mergeCells('G1:J1');
		$sheet->cell('G1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('G2:J2');
		$sheet->cell('G2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']->name);
		});

		$sheet->mergeCells('G3:J3');
		$sheet->cell('G3', function($cell) use ($data) {
			$cell->setValue('Audit Report for : ' . $data['report_type']);
		});
		$sheet->mergeCells('G4:J4');
		$sheet->cell('G4', function($cell) use ($data) {
			$cell->setValue('Group By : ' . $data['report_by']);
		});


	}

	private function outputCallCenterDescription($sheet, $data) {
		// Report title
		$sheet->mergeCells('H2:J2');
		$sheet->cell('H2', function($cell) use ($data) {
			$cell->setValue('Date : ' . $data['start_date'].' to '. $data['end_date']);
		});

		$sheet->mergeCells('H3:J3');
		$sheet->cell('H3', function($cell) use ($data) {
			$cell->setValue('Agent : ' . $data['agentlist']  );
		});

		$sheet->mergeCells('H4:J4');
		$sheet->cell('H4', function($cell) use ($data) {
			$cell->setValue('Time : ' . $data['start_time'].' - '.$data['end_time']);
		});

	}
	private function outputGuestServiceDescription($sheet, $data) {
		// Report title
		$i = 2;
		$sheet->mergeCells('I'.$i.':K'.$i);
		$sheet->cell('I'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;
		$sheet->mergeCells('I'.$i.':K'.$i);
		$sheet->cell('I'.$i, function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']  );
		});
		$i ++;
		if($data['report_by']!='Amenities') {
			if (($data['report_by'] != 'Staff' || $data['report_by'] != 'Amenities') && $data['status'] != null) {
				$sheet->mergeCells('I' . $i . ':K' . $i);
				$sheet->cell('I' . $i, function ($cell) use ($data) {
					$status_val = '';
/*
					for ($j = 0; $j < count($data['status']); $j++) {
						$satus = "";
						switch ($data['status'][$j]) {
							case 0:
								$satus = 'Completed';
								break;
							case  1:
								$satus = 'Open';
								break;
							case  2:
								$satus = 'Escalated';
								break;
							case  3:
								$satus = 'Timeout';
								break;
							case  4:
								$satus = 'Canceled';
								break;
							case  5:
								$satus = 'Scheduled';
								break;
						}
						$status_val = $status_val . " " . $satus;
					}
					*/
					$cell->setValue('Status : ' . $data['status']);
				});
				$i++;
			}
			if (($data['report_by'] != 'Staff' || $data['report_by'] != 'Amenities') && $data['ticket_type'] != null) {
				$sheet->mergeCells('I' . $i . ':K' . $i);
				$sheet->cell('I' . $i, function ($cell) use ($data) {
					$status_val = '';
					/*
					for ($j = 0; $j < count($data['ticket_type']); $j++) {
						$status_val = $status_val . " " . $data['ticket_type'][$j];
					}
					*/
					$cell->setValue('Ticket Type : ' . $data['ticket_type']);
				});
				$i++;
			}
			if ($data['report_by'] != 'Amenities' && $data['department'] != null) {
				$sheet->mergeCells('I' . $i . ':K' . $i);
				$sheet->cell('I' . $i, function ($cell) use ($data) {
					$status_val = '';
					for ($j = 0; $j < count($data['department']); $j++) {
						$status_val = $status_val . " " . $data['department'][$j];
					}
					$cell->setValue('Department: ' . $status_val);
				});
				$i++;
			}
			if (($data['report_by'] != 'Staff' || $data['report_by'] != 'Amenities') && $data['location'] != null) {
				$sheet->mergeCells('I' . $i . ':K' . $i);
				$sheet->cell('I' . $i, function ($cell) use ($data) {
					$status_val = '';
					for ($j = 0; $j < count($data['location']); $j++) {
						$status_val = $status_val . " " . $data['location'][$j]->name;
					}
					$cell->setValue('Location: ' . $status_val);
				});
				$i++;
			}
			if (($data['report_by'] != 'Staff' || $data['report_by'] != 'Amenities') && $data['item'] != null) {
				$sheet->mergeCells('I' . $i . ':K' . $i);
				$sheet->cell('I' . $i, function ($cell) use ($data) {
					$status_val = '';
					for ($j = 0; $j < count($data['item']); $j++) {
						$status_val = $status_val . " " . $data['item'][$j];
					}
					$cell->setValue('Item: ' . $status_val);
				});
				$i++;
			}
//echo json_encode($data);
			if (($data['report_by'] != 'Staff' || $data['report_by'] != 'Amenities') && (!empty($data['staff']))) {
				$sheet->mergeCells('I' . $i . ':K' . $i);
				$sheet->cell('I' . $i, function ($cell) use ($data) {
					$status_val = '';
					for ($j = 0; $j < count($data['staff']); $j++) {
						$status_val = $status_val . " " . $data['staff'][$j]->staffname;
					}
					$cell->setValue('Staff: ' . $status_val);
				});
				$i++;
			}
			if (($data['report_by'] == 'Service Category') && (!empty($data['category']))) {
				$sheet->mergeCells('I' . $i . ':K' . $i);
				$sheet->cell('I' . $i, function ($cell) use ($data) {
					//$category_val = '';
					//for ($j = 0; $j < count($data['category']); $j++) {
					//	$category_val = $category_val . " " . $data['category'][$j];
					//}
					$cell->setValue('Category: ' . $data['category']);
				});
				$i++;
			}
		}
	}

	private function outputMinibarDescription($sheet, $data) {
		// Report title
		$i = 2;
		$sheet->mergeCells('F'.$i.':J'.$i);
		$sheet->cell('F'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;
		if (($data['report_type'] == 'Detailed' ) || ($data['report_type'] == 'Summary' ))
		{
			$sheet->mergeCells('F'.$i.':J'.$i);
			$sheet->cell('F'.$i, function($cell) use ($data) {
				$cell->setValue('Period : ' . $data['period']  );
			});
			$i ++;
		}
		if($data['room_tags'] != null) {
			$sheet->mergeCells('F'.$i.':J'.$i);
			$sheet->cell('F'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['room_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['room_tags'][$j];
				}
				$cell->setValue('Room : ' . $status_val);
			});
			$i++;
		}

		if($data['staff_tags'] != null) {
			$sheet->mergeCells('F'.$i.':J'.$i);
			$sheet->cell('F'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['staff_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['staff_tags'][$j];
				}
				$cell->setValue('Posted By : ' . $status_val);
			});
			$i++;
		}

		if($data['item_tags'] != null) {
			$sheet->mergeCells('F'.$i.':J'.$i);
			$sheet->cell('F'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['item_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['item_tags'][$j];
				}
				$cell->setValue('Service Item : ' . $status_val);
			});
			$i++;
		}
	}

	private function outputEngineeringDescription($sheet, $data) {
		// Report title
		$i = 2;
		$sheet->mergeCells('J'.$i.':K'.$i);
		$sheet->cell('J'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;
		
		$sheet->mergeCells('J'.$i.':K'.$i);
		$sheet->cell('J'.$i, function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']  );
		});
		$i++;

		if(!empty($data['staff_tags']) && $data['staff_tags'] != null) {
			$sheet->mergeCells('J'.$i.':K'.$i);
			$sheet->cell('J'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['staff_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['staff_tags'][$j];
				}
				$cell->setValue('Staff : ' . $status_val);
			});
			$i++;
		}

		if(!empty($data['status_tags']) && $data['status_tags'] != null) {
			$sheet->mergeCells('J'.$i.':K'.$i);
			$sheet->cell('J'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['status_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['status_tags'][$j];
				}
				$cell->setValue('WR Status : ' . $status_val);
			});
			$i++;
		}

		if(!empty($data['wo_status_tags']) && $data['wo_status_tags'] != null) {
			$sheet->mergeCells('J'.$i.':K'.$i);
			$sheet->cell('J'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['wo_status_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['wo_status_tags'][$j];
				}
				$cell->setValue('WO Status : ' . $status_val);
			});
			$i++;
		}
		if(!empty($data['location_tags']) && $data['location_tags'] != null) {
			$sheet->mergeCells('J'.$i.':K'.$i);
			$sheet->cell('J'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['location_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['location_tags'][$j];
				}
				$cell->setValue('Location : ' . $status_val);
			});
			$i++;
		}
		if(!empty($data['equip_tags']) && $data['equip_tags'] != null) {
			$sheet->mergeCells('J'.$i.':K'.$i);
			$sheet->cell('J'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['equip_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['equip_tags'][$j];
				}
				$cell->setValue('Equipment : ' . $status_val);
			});
			$i++;
		}
		if(!empty($data['equip_id_tags']) && $data['equip_id_tags'] != null) {
			$sheet->mergeCells('J'.$i.':K'.$i);
			$sheet->cell('J'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['equip_id_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['equip_id_tags'][$j];
				}
				$cell->setValue('Equipment ID : ' . $status_val);
			});
			$i++;
		}
		if(!empty($data['category_tags']) && $data['category_tags'] != null) {
			$sheet->mergeCells('J'.$i.':K'.$i);
			$sheet->cell('J'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['category_tags']); $j ++) {
					$status_val = $status_val." ".$data['category_tags'][$j];
				}
				$cell->setValue('Category : ' . $status_val);
			});
			$i++;
		}
		
	}

	private function outputHskpDescription($sheet, $data) {
		// Report title
		$i = 2;
		$sheet->mergeCells('F'.$i.':J'.$i);
		$sheet->cell('F'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated : ' .  date('d-M-Y'));
		});
		$i++;

		if (($data['report_type'] == 'Detailed' ) || ($data['report_type'] == 'Summary' )) {
			$sheet->mergeCells('F'.$i.':J'.$i);
			$sheet->cell('F'.$i, function($cell) use ($data) {
				$cell->setValue('Period : ' . $data['period']  );
			});
			$i ++;
		}
		if($data['room_tags'] != null) {
			$sheet->mergeCells('F'.$i.':J'.$i);
			$sheet->cell('F'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['room_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['room_tags'][$j];
				}
				$cell->setValue('Room : ' . $status_val);
			});
			$i++;
		}

		if($data['staff_tags'] != null) {
			$sheet->mergeCells('F'.$i.':J'.$i);
			$sheet->cell('F'.$i, function($cell) use ($data) {
				$status_val = '';
				for($j= 0 ; $j < count($data['staff_tags']) ; $j ++) {
					$status_val = $status_val." ".$data['staff_tags'][$j];
				}
				$cell->setValue('Posted By : ' . $status_val);
			});
			$i++;
		}


	}


	private function outputCallclassifyDescription($sheet, $data) {
		$sheet->mergeCells('G2:I2');
		$sheet->cell('G2', function($cell) use ($data) {
			$cell->setValue('Report_type : '. $data['report_type']);
		});
		$sheet->mergeCells('G3:I3');
		$sheet->cell('G3', function($cell) use ($data) {
			$cell->setValue('Report By : ' . $data['report_by']);
		});
		$sheet->mergeCells('G4:I4');
		$sheet->cell('G4', function($cell) use ($data) {
			$cell->setValue('Date : ' . $data['period']);
		});
		if ($data['call_type'] != 'All')
		{
			$sheet->mergeCells('G5:I5');
			$sheet->cell('G5', function($cell) use ($data) {
				$cell->setValue('Call Type : ' . $data['call_type']  );
			});
		}
		if ($data['approval'] != 'All')
		{
			$sheet->mergeCells('G6:I6');
			$sheet->cell('G6', function($cell) use ($data) {
				$cell->setValue('Approval : ' . $data['approval']);
			});
		}
		if ($data['classify'] != 'All')
		{
			$sheet->mergeCells('G7:I7');
			$sheet->cell('G7', function($cell) use ($data) {
				$cell->setValue('Call Classification : ' . $data['classify']);
			});
		}


	}

	private function outputWakeupcallDescription($sheet, $data) {
		// Report title
		$sheet->mergeCells('E5:H5');
		$sheet->cell('E5', function($cell) use ($data) {
			$cell->setValue('Date Generated : ' . $data['cur_date']);
		});

		$sheet->mergeCells('E6:H6');
		$sheet->cell('E6', function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']);
		});
	}

	private function outputGrantTotalReport($sheet, $row_num, $data) {
		if( !empty($data['by_build_data']) ) {
			$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
			$sheet->cell('C' . $row_num, function($cell) {
				$cell->setValue('Grand Total By Building');
				$cell->setAlignment('center');
				$cell->setFont([
						'size'       => '11',
						'bold'       =>  true
				]);
			});

			$row_num += 1;

			$sheet->cell('A' . $row_num, function($cell) {
				$cell->setValue('Guest and Admin');

			});
			$row_num++;

			// table header
			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
				$cell->setAlignment('center');
				$cell->setFont([
						'family'     => 'Tahoma',
						'bold'       =>  true
				]);
			});

			$table_header = ['Building', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Total', 'Carrier', 'Profit'];
			$sheet->row($row_num, $table_header);

			$row_num++;

			foreach ($data['by_build_data'] as $row) {
				$row = [
						$row['name'],
						strval(number_format($row['International'], 2)), 
						strval(number_format($row['Local'], 2)),
						strval(number_format($row['Mobile'], 2)),
						strval(number_format($row['National'], 2)),
						strval(number_format($row['Toll'], 2)), 
						strval(number_format($row['Total'], 2)), 
						strval(number_format($row['Total_Carrier'], 2)),
						strval(number_format($row['Profit'], 2))
				];

				$sheet->row($row_num, $row);
				$row_num++;
			}
			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#212121');
				$cell->setBackground('#ECEFF1');
				$cell->setAlignment('right');
				$cell->setFont([
						'family'     => 'Tahoma',
						'bold'       =>  true
				]);
			});

			$row = [
				'Total',
					$data['currency'] . ' '.number_format(isset($data['total_value']['International']) ? $data['total_value']['International'] : 0, 2),
					$data['currency'] . ' '.number_format(isset($data['total_value']['Local']) ? $data['total_value']['Local'] : 0, 2),
					$data['currency'] . ' '.number_format(isset($data['total_value']['Mobile']) ? $data['total_value']['Mobile'] : 0, 2),
					$data['currency'] . ' '.number_format(isset($data['total_value']['National']) ? $data['total_value']['National'] : 0, 2),
					$data['currency'] . ' '.number_format(isset($data['total_value']['Toll']) ? $data['total_value']['Toll'] : 0, 2),
					$data['currency'] . ' '.number_format(isset($data['total_value']['Total']) ? $data['total_value']['Total'] : 0, 2),
					$data['currency'] . ' '.number_format(isset($data['total_value']['Total_Carrier']) ? $data['total_value']['Total_Carrier'] : 0, 2),
					$data['currency'] . ' '.number_format(isset($data['total_value']['Profit']) ? $data['total_value']['Profit'] : 0, 2)
			];

			$sheet->row($row_num, $row);
			$row_num++;
		}

		return $row_num;
	}

	private function outputAuditDepartmentReport($sheet, $row_num, $data) {
		if( !empty($data['data_list']) ) {
			$count = 0;
			foreach ($data['data_list'] as $data) {
				$sheet->cell('A' . $row_num, function ($cell) use ($data) {
					$cell->setValue($data['title'].'  Total User : '.count($data['detail']));
				});
				$row_num++;
				// table header
				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#feffff');
					$cell->setBackground('#282828');
				});

				$table_header = ['First Name', 'Last Name', 'Username', 'Job Role', 'Mobile', 'Email', 'Permission', 'Status'];
				$sheet->row($row_num, $table_header);

				$row_num++;

				$count += count($data['detail']);
				foreach ($data['detail'] as $row) {
					$row = [
						$row->first_name, $row->last_name, $row->username ,
						$row->job_role, strval($row->mobile), $row->email, strval($row->permission),
						strval($row->lock)
					];
					$sheet->row($row_num, $row);
					$row_num++;
				}
				$row_num++;
			}
			$sheet->cell('A' . $row_num, function ($cell) use ($count) {
				$cell->setValue('Total User:'.$count);
			});
			$row_num ++;
		}
		return $row_num;
	}

	private function outputAuditRoomReport($sheet, $row_num, $data) {
		$sheet->mergeCells('F1:G1');
		$sheet->cell('F1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('F2:H2');
		$sheet->cell('F2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});



		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditRoomHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {
                $rows++;
                if($rows==1)
                {
                    $top_row=$row_num;
                }

                $col_num='A';

                    foreach ($obj as $row){
                        $this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
                        $col_num++;
                    }
                    $row_num++;

                }
                $row_num--;
            $sheet->setBorder('A'.$top_row.':G'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditAdminExtReport($sheet, $row_num, $data) {
		$sheet->mergeCells('G1:H1');
		$sheet->cell('G1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('G2:I2');
		$sheet->cell('G2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
				$row_num += 4;
				$col_num='A';
				$this->setAuditAdminExtHead($sheet,$row_num,$col_num);
				$sheet->mergeCells('A7:B7');
				$sheet->cell('A7', function($cell) use ($data) {
				$cell->setValue('Total : ' . $data['Total']);
				$cell->setFont([
					'size'       => '11',
					'bold' => true
				]);
				});
				$row_num += 4;
				$top_row=0;
				$rows=0;

                foreach ($data['data_list'] as   $obj) {

                    $rows++;
                        if($rows==1)
                        {
                            $top_row=$row_num;
                        }

                    $col_num='A';

                        foreach ($obj as $row){
                        $this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
                        $col_num++;

                        }
                        $row_num++;

                    }
                    $row_num--;
            $sheet->setBorder('A'.$top_row.':J'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditGuestExtReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('D1:E1');
		$sheet->cell('D1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('D2:F2');
		$sheet->cell('D2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) )
		{
            $row_num += 4;
            $col_num='A';
            $this->setAuditGuestExtHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;
            $sheet->setBorder('A'.$top_row.':F'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditDptReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('E1:F1');
		$sheet->cell('E1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('E2:G2');
		$sheet->cell('E2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditDptHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;
            $sheet->setBorder('A'.$top_row.':F'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditSectionReport($sheet, $row_num, $data) {
		$sheet->mergeCells('C1:D1');
		$sheet->cell('C1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('C2:E2');
		$sheet->cell('C2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditSectionHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;
            $sheet->setBorder('A'.$top_row.':D'.$row_num, 'thin');
            return $row_num;
        }
    }

    private function outputAuditAreaReport($sheet, $row_num, $data) {
		$sheet->mergeCells('D1:E1');
		$sheet->cell('D1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('D2:F2');
		$sheet->cell('D2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditAreaHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
                if($rows==1)
                {
                    $top_row=$row_num;
                }

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;
		    $sheet->setBorder('A'.$top_row.':E'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditDeptFuncReport($sheet, $row_num, $data) {
		$sheet->mergeCells('E1:F1');
		$sheet->cell('E1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('E2:G2');
		$sheet->cell('E2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditDeptFuncHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;

            $sheet->setBorder('A'.$top_row.':F'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditCompensationReport($sheet, $row_num, $data) {
		$sheet->mergeCells('E1:F1');
		$sheet->cell('E1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('E2:G2');
		$sheet->cell('E2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditCompensationHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;
            $sheet->setBorder('A'.$top_row.':F'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditTaskReport($sheet, $row_num, $data) {
		$sheet->mergeCells('E1:F1');
		$sheet->cell('E1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('E2:G2');
		$sheet->cell('E2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditTaskHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;
            $sheet->setBorder('A'.$top_row.':G'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditJobReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('D1:E1');
		$sheet->cell('D1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('D2:F2');
		$sheet->cell('D2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditJobHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
                if($rows==1)
                {
                    $top_row=$row_num;
                }

				$col_num='A';

                foreach ($obj as $row){
                $this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
                $col_num++;

                }
                $row_num++;
            }
            $row_num--;
            $sheet->setBorder('A'.$top_row.':E'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditMinibarItemReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('F1:G1');
		$sheet->cell('F1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('F2:H2');
		$sheet->cell('F2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) )
		{
            $row_num += 4;
            $col_num='A';
            $this->setAuditMinibarHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
                if($rows==1)
                {
                    $top_row=$row_num;
                }

				$col_num='A';

                foreach ($obj as $row){
                    $this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
                    $col_num++;
                }
                $row_num++;
            }
            $row_num--;
            $sheet->setBorder('A'.$top_row.':G'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditUserReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('H1:I1');
		$sheet->cell('H1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('H2:J2');
		$sheet->cell('H2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) )
		{
            $row_num += 4;
            $col_num='A';
            $this->setAuditUserHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;
				}
				$row_num--;
            $sheet->setBorder('A'.$top_row.':J'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditDeviceReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('I1:J1');
		$sheet->cell('I1', function($cell) use ($data) {
			$cell->setValue('Data Generated : ' . date('d-M-Y'));
		});
		$sheet->mergeCells('I2:K2');
		$sheet->cell('I2', function($cell) use ($data) {
			$cell->setValue('Property : ' . $data['property']);
		});

		if( !empty($data['data_list']) ) {
            $row_num += 4;
            $col_num='A';
            $this->setAuditDeviceHead($sheet,$row_num,$col_num);
            $sheet->mergeCells('A7:B7');
            $sheet->cell('A7', function($cell) use ($data) {
            $cell->setValue('Total : ' . $data['Total']);
            $cell->setFont([
                'size'       => '11',
                'bold' => true
            ]);
            });
            $row_num += 4;
            $top_row=0;
            $rows=0;

			foreach ($data['data_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';

					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;

					}
					$row_num++;

				}
				$row_num--;
            $sheet->setBorder('A'.$top_row.':J'.$row_num, 'thin');
            return $row_num;
        }
	}

	private function outputAuditBuildingReport($sheet, $row_num, $data) {
		if( !empty($data['data_list']) ) {
			$count =0;
			foreach ($data['data_list'] as $data) {
				$sheet->cell('A' . $row_num, function ($cell) use ($data) {
					$cell->setValue($data['title'].'  Total : '.count($data['detail']));
				});
				$row_num++;
				// table header
				$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
					$cell->setFontColor('#feffff');
					$cell->setBackground('#282828');
				});

				$table_header = ['Floor', 'Room Type', 'Room Number'];
				$sheet->row($row_num, $table_header);

				$row_num++;

				$count += count($data['detail']);
				foreach ($data['detail'] as $row) {
					$row = [
						strval($row->floor), strval($row->room_type), strval($row->room) ];
					$sheet->row($row_num, $row);
					$row_num++;
				}
				$row_num++;
			}
			$sheet->cell('A' . $row_num, function ($cell) use ($count) {
				$cell->setValue('Total :'.$count);
			});
			$row_num ++;
		}
		return $row_num;
	}

	private function outputAuditExtensionReport($sheet, $row_num, $data) {
		////////admin////
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue('Admin Total : '.count($data['admin']));
		});
		$row_num++;
		// table header
		$sheet->cell('A' . $row_num . ':D' . $row_num, function ($cell) {
			$cell->setFontColor('#feffff');
			$cell->setBackground('#282828');
		});

		$table_header = ['Department', 'Section', 'User' , 'Extension'];
		$sheet->row($row_num, $table_header);

		$row_num++;


		foreach ($data['admin'] as $row) {
			$row = [
				strval($row->department), strval($row->section), strval($row->user), strval($row->extension) ];
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row_num +=2;

		///guest////
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue('Guest  Total : '.count($data['guest']));
		});
		$row_num++;
		// table header
		$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
			$cell->setFontColor('#feffff');
			$cell->setBackground('#282828');
		});

		$table_header = ['Building', 'Room Number', 'Extension' ];
		$sheet->row($row_num, $table_header);
		$row_num++;

		foreach ($data['guest'] as $row) {
			$row = [
				$row->name, strval($row->room), strval($row->extension)];
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row_num++;

		return $row_num;
	}

	private function outputAuditMinibarReport($sheet, $row_num, $data) {
		// table header
		$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
			$cell->setFontColor('#feffff');
			$cell->setBackground('#282828');
		});

		$table_header = ['ID', 'Item Name', 'Description', 'Charge', 'PMS Code', 'IVR Code', 'Max Qty','Status'];
		$sheet->row($row_num, $table_header);
		$row_num++;

		foreach ($data['minibar'] as $row) {
			$status = '' ;
			if($row->active_status == 1) $status = 'Active';
			else $status = 'Inactive';
			$row = [
				strval($row->id), $row->item_name, $row->desc, strval($row->charge), strval($row->pms_code), strval($row->ivr_code), strval($row->max_qty), $status ];
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row_num++;

		return $row_num;
	}

	private function outputAuditGuestRateChargeReport($sheet, $row_num, $data) {
		if( !empty($data['data_list']) ) {
			$all_morning_carrier = 0;
			$all_morning_total = 0;
			$all_daily_carrier = 0;
			$all_daily_total = 0;
			$all_night_carrier = 0;
			$all_night_total = 0;
			$all_carrier = 0;
			$all_total = 0;
			$count = 0;
			$country_name = '';
			$sheet->mergeCells('N1:P1');
			$sheet->cell('N1', function($cell) use ($data) {
				$cell->setValue('Data Generated : ' . date('d-M-Y'));
			});
			$sheet->mergeCells('N2:Q2');
			$sheet->cell('N2', function($cell) use ($data) {
				$cell->setValue('Property : ' . $data['property']);
			});
            $row_num += 4;
            $sheet->mergeCells('A' . $row_num . ':P' . $row_num);
            $sheet->cell('A' . $row_num, function ($cell)  {
                $cell->setValue('Guest Rate Charges Audit Report');
                $cell->setAlignment('center');
                $cell->setFont([
                    'size'       => '18',
                    'bold' => true
                ]);
            });
            $row_num += 2;
            $sheet->cell('A' . $row_num . ':P' . $row_num, function ($cell) {
                $cell->setFontColor('#feffff');
                $cell->setBackground('#282828');

            });
            $sheet->mergeCells('E'.$row_num.':G'.$row_num);
            $sheet->cell('E'.$row_num, function($cell)  {
                $cell->setValue('Morning Off Peak 00:00:00 - 06:59:59');
                $cell->setAlignment('center');
            });
            $sheet->mergeCells('H'.$row_num.':J'.$row_num);
            $sheet->cell('H'.$row_num, function($cell)  {
                $cell->setValue('Daily Peak 07:00:00 - 20:59:59');
                $cell->setAlignment('center');
            });
            $sheet->mergeCells('K'.$row_num.':M'.$row_num);
            $sheet->cell('K'.$row_num, function($cell)  {
                $cell->setValue('Night Off Peak 21:00:00 - 23:59:59');
                $cell->setAlignment('center');
            });
            $sheet->mergeCells('N'.$row_num.':P'.$row_num);
            $sheet->cell('N'.$row_num, function($cell)  {
                $cell->setValue('All Day Off Peak 00:00:00 - 23:59:59');
                $cell->setAlignment('center');
            });
            $row_num++;

            $sheet->cell('A' . $row_num . ':P' . $row_num, function ($cell) {
                $cell->setFontColor('#feffff');
                $cell->setBackground('#282828');
                $cell->setAlignment('center');

            });
            $table_header = ['Group', 'Country Code', 'Country','Allowance', 'Carrier', 'Property','Total','Carrier','Property', 'Total',
                'Carrier','Property', 'Total','Carrier','Property','Total'];
            $sheet->row($row_num, $table_header);
            $row_num++;


            foreach ($data['data_list'] as $row) {
                $all_morning_carrier += $row['morning_carrier'];
                $all_morning_total += $row['morning_total'];
                $all_daily_carrier += $row['daily_carrier'];
                $all_daily_total += $row['daily_total'];
                $all_night_carrier += $row['night_carrier'];
                $all_night_total += $row['night_total'];
                $all_carrier += $row['all_carrier'];
                $all_total += $row['all_total'];
                $count ++;
                $group = '' ;
                if($country_name != $row['group_name'] ) {
                    $group = $row['group_name'];
                    $country_name = $row['group_name'];
                }else {
                    $group = '';
                }

                $row = [
                    $group, strval($row['country_code']), $row['country'], strval($row['allowance']), strval($row['morning_carrier']), 
					strval($row['hotel_1']), strval($row['morning_total']), strval($row['daily_carrier']), strval($row['hotel_2']), strval($row['daily_total']),
                    strval($row['night_carrier']), strval($row['hotel_3']), strval($row['night_total']), strval($row['all_carrier']), 
					strval($row['hotel_4']), strval($row['all_total'])
                ];
                $sheet->row($row_num, $row);
                $row_num++;
            }
            $sheet->cell('E' . $row_num . ':P' . $row_num, function ($cell) {
                $cell->setFontColor('#1e1f1f');
                $cell->setBackground('#91afb2');
            });
            $row1 = [
                '', '', '', 'Total Count : '.$count,
                strval(round($all_morning_carrier,2)), 
				'',
				strval(round($all_morning_total,2)),
                strval(round($all_daily_carrier,2)), 
				'',
				strval(round($all_daily_total,2)),
                strval(round($all_night_carrier,2)),
				'', 
				strval(round($all_night_total,2)),
                strval(round($all_carrier,2)), 
				'',
				strval(round($all_total,2))];
            $sheet->row($row_num, $row1);
            $row_num++;
		}
		return $row_num;
	}

	private function outputAuditJobRoleReport($sheet, $row_num, $data)
	{
		if( !empty($data['data_list']) ) {
			$count = 0;
			foreach ($data['data_list'] as $data) {
				$sheet->cell('A' . $row_num, function ($cell) use ($data) {
					$cell->setValue($data['title'].'  Total : '.count($data['detail']));
				});
				$row_num++;
				// table header
				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#feffff');
					$cell->setBackground('#282828');
				});

				$table_header = ['First Name', 'Last Name', 'Username', 'Department', 'Mobile', 'Email', 'Permission', 'Status'];
				$sheet->row($row_num, $table_header);

				$row_num++;

				$count += count($data['detail']);

				foreach ($data['detail'] as $row) {
					$row = [
						$row->first_name, $row->last_name, $row->username ,
						$row->department , strval($row->mobile), $row->email, strval($row->permission),
						strval($row->lock)
					];
					$sheet->row($row_num, $row);
					$row_num++;
				}
				$row_num++;
			}

			$sheet->cell('A' . $row_num, function ($cell) use ($count) {
				$cell->setValue('Total :'.$count);
			});
			$row_num ++;
		}
		return $row_num;
	}

	private function outputAuditPermissionReport($sheet, $row_num, $data)
	{
		if( !empty($data['data_list']) ) {
			$count =0;
			foreach ($data['data_list'] as $data) {
				$sheet->cell('A' . $row_num, function ($cell) use ($data) {
					$cell->setValue($data['title'].'  Total : '.count($data['detail']));
				});
				$row_num++;
				// table header
				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#feffff');
					$cell->setBackground('#282828');
				});

				$table_header = ['First Name', 'Last Name', 'Username', 'Department', 'Job Role', 'Mobile', 'Email', 'Status'];
				$sheet->row($row_num, $table_header);

				$row_num++;

				$count += count($data['detail']);
				foreach ($data['detail'] as $row) {
					$row = [
						$row->first_name, $row->last_name, $row->username ,
						$row->department , $row->job_role, strval($row->mobile), $row->email, strval($row->lock)
					];
					$sheet->row($row_num, $row);
					$row_num++;
				}
				$row_num++;
			}

			$sheet->cell('A' . $row_num, function ($cell) use ($count) {
				$cell->setValue('Total User:'.$count);
			});
			$row_num ++;
		}
		return $row_num;
	}

	private function outputAuditRoomTypeReport($sheet, $row_num, $data)
	{
		if( !empty($data['data_list']) ) {
			$count =0;
			foreach ($data['data_list'] as $data) {
				$sheet->cell('A' . $row_num, function ($cell) use ($data) {
					$cell->setValue($data['title'].'  Total : '.count($data['detail']));
				});
				$row_num++;
				// table header
				$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
					$cell->setFontColor('#feffff');
					$cell->setBackground('#282828');
				});

				$table_header = ['Building', 'Floor', 'Room Number'];
				$sheet->row($row_num, $table_header);
				$row_num++;

				$count += count($data['detail']);
				foreach ($data['detail'] as $row) {
					$row = [
						strval($row->building), strval($row->floor), strval($row->room) ];
					$sheet->row($row_num, $row);
					$row_num++;
				}
				$row_num++;
			}
			$sheet->cell('A' . $row_num, function ($cell) use ($count) {
				$cell->setValue('Total :'.$count);
			});
			$row_num ++;
		}
		return $row_num;
	}

	private function outputGrantTotalGuestReport($sheet, $row_num, $data)
	{
		if( !empty($data['guest_by_build_data']) ) {
			$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
			$sheet->cell('C' . $row_num, function($cell) {
				$cell->setValue('Guest Grand Total By Building');
				$cell->setAlignment('center');
				$cell->setFont([
						'size'       => '11',
						'bold'       =>  true
				]);
			});

			$row_num += 1;

			$sheet->cell('A' . $row_num, function($cell) {
				$cell->setValue('Guest');
			});
			$row_num++;

			// table header
			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
				$cell->setAlignment('center');
				$cell->setFont([
						'bold'       =>  true
				]);
			});

			$table_header = ['Building', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Carrier', 'Hotel', 'Total' ];
			$sheet->row($row_num, $table_header);

			$row_num++;

			foreach ($data['guest_by_build_data'] as $row) {
				$row = [
						$row->name, 
						strval(number_format($row->International, 2)), 
						strval(number_format($row->Local, 2)),
						strval(number_format($row->Mobile, 2)), 
						strval(number_format($row->National, 2)),
						strval(number_format($row->Toll, 2)), 
						strval(number_format($row->Total_Carrier, 2)), 
						strval(number_format($row->Total_Hotel, 2)),
						strval(number_format($row->Total, 2))
				];

				$sheet->row($row_num, $row);
				$row_num++;
			}

			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#212121');
				$cell->setBackground('#ECEFF1');
				$cell->setAlignment('right');
				$cell->setFont([
						'bold'       =>  true
				]);
			});

			$row = [
                'Total',
                $data['currency'].' '.number_format(isset($data['guest_total_value']->International) ? $data['guest_total_value']->International : 0, 2),
                $data['currency'].' '.number_format(isset($data['guest_total_value']->Local) ? $data['guest_total_value']->Local : 0, 2),
                $data['currency'].' '.number_format(isset($data['guest_total_value']->Mobile) ? $data['guest_total_value']->Mobile : 0, 2),
                $data['currency'].' '.number_format(isset($data['guest_total_value']->National) ? $data['guest_total_value']->National : 0, 2),
                $data['currency'].' '.number_format(isset($data['guest_total_value']->Toll) ? $data['guest_total_value']->Toll : 0, 2),
                $data['currency'].' '.number_format(isset($data['guest_total_value']->Total_Carrier) ? $data['guest_total_value']->Total_Carrier : 0, 2),
                $data['currency'].' '.number_format(isset($data['guest_total_value']->Total_Hotel) ? $data['guest_total_value']->Total_Hotel : 0, 2),
                $data['currency'].' '.number_format(isset($data['guest_total_value']->Total) ? $data['guest_total_value']->Total : 0, 2)
			];

			$sheet->row($row_num, $row);
			//$row_num++;
		}

		return $row_num;
	}

	private function outputGrantTotalAdminReport($sheet, $row_num, $data)
	{
		if( !empty($data['admin_by_build_data']) ) {
			$sheet->mergeCells('B' . $row_num . ':D' . $row_num);
			$sheet->cell('B' . $row_num, function($cell) {
				$cell->setValue('Admin Grand Total By Building');
				$cell->setAlignment('center');
				$cell->setFont([
						'size'       => '11',
						'bold'       =>  true
				]);
			});

			$row_num += 1;

			$sheet->cell('A' . $row_num, function($cell) {
				$cell->setValue('Admin');
			});
			$row_num++;

			// table header
			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
				$cell->setAlignment('center');
				$cell->setFont([
						'bold'       =>  true
				]);
			});

			$table_header = ['Building', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Total' ];
			$sheet->row($row_num, $table_header);

			$row_num++;

			foreach ($data['admin_by_build_data'] as $row) {
				$row = [
						$row->name, 
						strval(number_format($row->International, 2)), 
						strval(number_format($row->Local, 2)),
						strval(number_format($row->Mobile, 2)), 
						strval(number_format($row->National, 2)),
						strval(number_format($row->Toll, 2)), 
						strval(number_format($row->Total_Carrier, 2))
				];

				$sheet->row($row_num, $row);
				$row_num++;
			}

			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#212121');
				$cell->setBackground('#ECEFF1');
				$cell->setAlignment('right');
				$cell->setFont([
						'bold'       =>  true
				]);
			});

			$row = [
					'Total',
					$data['currency'].' '.number_format(isset($data['admin_total_value']->International) ? $data['admin_total_value']->International : 0, 2),
					$data['currency'].' '.number_format(isset($data['admin_total_value']->Local) ? $data['admin_total_value']->Local : 0, 2),
					$data['currency'].' '.number_format(isset($data['admin_total_value']->Mobile) ? $data['admin_total_value']->Mobile : 0, 2),
					$data['currency'].' '.number_format(isset($data['admin_total_value']->National) ? $data['admin_total_value']->National : 0, 2),
					$data['currency'].' '.number_format(isset($data['admin_total_value']->Toll) ? $data['admin_total_value']->Toll : 0, 2),
					$data['currency'].' '.number_format(isset($data['admin_total_value']->Total_Carrier) ? $data['admin_total_value']->Total_Carrier : 0, 2)
			];

			$sheet->row($row_num, $row);
			$row_num++;
		}

		return $row_num;
	}

	private function outputGrantTotalBusinessCentreReport($sheet, $row_num, $data) {
		if( !empty($data['business_centre_by_build_data']) ) {
			$sheet->mergeCells('B' . $row_num . ':D' . $row_num);
			$sheet->cell('B' . $row_num, function($cell) {
				$cell->setValue('Business Centre Grand Total By Building');
				$cell->setAlignment('center');
				$cell->setFont([
					'size'       => '12',
					'bold'       =>  true
				]);
			});

			$row_num += 2;

			$sheet->cell('A' . $row_num, function($cell) {
				$cell->setValue('Business Centre');
			});
			$row_num++;

			// table header
			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#f6f8f9');
				$cell->setBackground('#232424');
			});

			$table_header = ['Building', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Total Carrier', 'Total Hotel', 'Total' ];
			$sheet->row($row_num, $table_header);

			$row_num++;


			foreach ($data['business_centre_by_build_data'] as $row) {
				$row = [
					$row->name, 
					strval(number_format($row->International, 2)), 
					strval(number_format($row->Local, 2)),
					strval(number_format($row->Mobile, 2)),
					strval(number_format($row->National, 2)),
					strval(number_format($row->Toll, 2)), 
					strval(number_format($row->Total_Carrier, 2)),
					strval(number_format($row->Total_Hotel, 2)),
					strval(number_format($row->Total, 2))
				];

				$sheet->row($row_num, $row);
				$row_num++;
			}

			$row = [
				'Total',
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->International) ? $data['business_centre_total_value']->International : 0, 2),
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->Local) ? $data['business_centre_total_value']->Local : 0, 2),
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->Mobile) ? $data['business_centre_total_value']->Mobile : 0, 2),
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->National) ? $data['business_centre_total_value']->National : 0, 2),
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->Toll) ? $data['business_centre_total_value']->Toll : 0, 2),
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->Total_Carrier) ? $data['business_centre_total_value']->Total_Carrier : 0, 2),
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->Total_Hotel) ? $data['business_centre_total_value']->Total_Hotel : 0, 2),
				$data['currency'].' '.number_format(isset($data['business_centre_total_value']->Total) ? $data['business_centre_total_value']->Total : 0, 2)
			];

			$sheet->row($row_num, $row);
			$row_num++;
		}

		return $row_num;
	}

	private function outputGrantTotalAdminByBuildingDepartment($sheet, $row_num, $data) {
		if( !empty($data['admin_by_build_dept_section_data']) ) {
			$sheet->mergeCells('B' . $row_num . ':D' . $row_num);
			$sheet->cell('B' . $row_num, function($cell) {
				$cell->setValue('Admin Grand Total By Building Department');
				$cell->setAlignment('center');
				$cell->setFont([
						'size'       => '11',
						'bold'       =>  true
				]);
			});

			$row_num += 1;

			foreach ($data['admin_by_build_dept_section_data'] as  $key => $data_group)
			{
				$sheet->cell('A' . $row_num, function($cell) use($key) {
					$cell->setValue('Building : ' . $key);
				});
				$row_num++;

				// table header
				$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');
					$cell->setAlignment('center');
					$cell->setFont([
							'bold'       =>  true
						]);
				});

				$table_header = ['Department', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Total' ];
				$sheet->row($row_num, $table_header);

				$row_num++;

				foreach ($data_group['department'] as $row) {
					$row = [
							$row->department, 
							strval(number_format($row->International, 2)), 
							strval(number_format($row->Local, 2)),
							strval(number_format($row->Mobile, 2)), 
							strval(number_format($row->National, 2)),
							strval(number_format($row->Toll, 2)), 
							strval(number_format($row->Total_Carrier, 2))
					];

					$sheet->row($row_num, $row);
					$row_num++;
				}
				$row_num += 1;
				// table header

                foreach ($data_group['depart'] as  $key => $data_key)
                {
                    $sheet->cell('A' . $row_num, function($cell) use($key) {
                        $cell->setValue('Department : ' . $key);
                    });
                    $row_num++;
                    $sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
                        $cell->setFontColor('#ffffff');
                        $cell->setBackground('#2c3e50');
                        $cell->setAlignment('center');
                        $cell->setFont([
                                'bold'       =>  true
                        ]);
                    });

                    $table_header = ['Section', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Total' ];
                    $sheet->row($row_num, $table_header);

                    $row_num++;

                    foreach ($data_key['section'] as $row) {
                        $row = [
                                $row->section, 
								strval(number_format($row->International, 2)), 
								strval(number_format($row->Local, 2)),
                                strval(number_format($row->Mobile, 2)),
								strval(number_format($row->National, 2)),
								strval(number_format($row->Toll, 2)), 
								strval(number_format($row->Total_Carrier, 2))
                        ];

                        $sheet->row($row_num, $row);
                        $row_num++;
                    }

                    $row_num += 1;
                }
            }
		}
		$row_num++;
		foreach ($data['admin_by_build_dept_summary_data'] as  $key => $data_group) {
            $sheet->cell('A' . $row_num, function($cell) use($key) {
                $cell->setValue('Building : ' . $key);
            });
            $row_num++;

			// table header
			$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
				$cell->setAlignment('center');
				$cell->setFont([
						'bold'       =>  true
				]);
			});

			$table_header = ['Department', 'Extension Count', 'Number of Calls', 'Duration', 'Cost','Percentage'];
			$sheet->row($row_num, $table_header);

			$row_num++;
			$extension_total = 0;
			$calls = 0;
			$duration = $data_group['total'];
			$cost = 0;
			$percentage = 0;
			$total_list = $data_group['total'];

			foreach ($data_group['department'] as $row) {
				if ($total_list > 0)
					$percent = ($row->percent/$total_list) * 100;
				else
					$percent = 0;
				$extension_total += $row->extension_count;
                $calls += $row->total_calls;
                $cost += $row->cost;
                $percentage += $percent;

				$row = [
						$row->department, 
						strval($row->extension_count), 
						strval($row->total_calls),
						strval($row->duration_total), 
						strval(number_format($row->cost, 2)),
						strval(number_format($percent, 2).'%')
				];
				$sheet->row($row_num, $row);
				$row_num++;
			}

			$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
				$cell->setFontColor('#212121');
				$cell->setBackground('#ECEFF1');
				$cell->setAlignment('right');
				$cell->setFont([
						'bold'       =>  true
				]);
			});

			$row = [
					'Total',
					strval($extension_total),
					strval($calls),
					strval($duration),
					strval(number_format($cost, 2)),
					strval(number_format($percentage, 2).'%')
			];

			$sheet->row($row_num, $row);
			$row_num++;

		}
		return $row_num;
	}

	private function outputGrantTotalBusinessCentreByBuildingDepartment($sheet, $row_num, $data) {
		if( !empty($data['business_centre_by_build_dept_section_data']) ) {
			$sheet->mergeCells('B' . $row_num . ':D' . $row_num);
			$sheet->cell('B' . $row_num, function($cell) {
				$cell->setValue('Business Centre Grand Total By Building Department');
				$cell->setAlignment('center');
				$cell->setFont([
					'size'       => '12',
					'bold'       =>  true
				]);
			});

			$row_num += 2;

			foreach ($data['business_centre_by_build_dept_section_data'] as  $key => $data_group) {
				$sheet->cell('A' . $row_num, function($cell) use($key) {
					$cell->setValue('Building : ' . $key);
				});
				$row_num++;

				// table header
				$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
					$cell->setFontColor('#f0f1f1');
					$cell->setBackground('#1c1c1c');
				});

				$table_header = ['Department', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Total Carrier', 'Total Hotel', 'Total' ];
				$sheet->row($row_num, $table_header);

				$row_num++;

				foreach ($data_group['department'] as $row) {
					$row = [
						$row->department, 
						strval(number_format($row->International, 2)), 
						strval(number_format($row->Local, 2)),
						strval(number_format($row->Mobile, 2)), 
						strval(number_format($row->National, 2)),
						strval(number_format($row->Toll, 2)), 
						strval(number_format($row->Total_Carrier, 2)), 
						strval(number_format($row->Total_Hotel, 2)),
						strval(number_format($row->Total, 2))
					];

					$sheet->row($row_num, $row);
					$row_num++;
				}

				// table header
				$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
					$cell->setFontColor('#fdfdfd');
					$cell->setBackground('#212121');
				});

				$table_header = ['Section', 'International', 'Local', 'Mobile', 'National','Toll Free', 'Total Carrier','Total Hotel', 'Total' ];
				$sheet->row($row_num, $table_header);

				$row_num++;

				foreach ($data_group['section'] as $row) {
					$row = [
						$row->section, 
						strval(number_format($row->International, 2)), 
						strval(number_format($row->Local, 2)),
						strval(number_format($row->Mobile, 2)),
						strval(number_format($row->National, 2)),
						strval(number_format($row->Toll, 2)), 
						strval(number_format($row->Total_Carrier, 2)),
						strval(number_format($row->Total_Hotel, 2)),
						strval(number_format($row->Total, 2))
					];

					$sheet->row($row_num, $row);
					$row_num++;
				}

				$row_num += 1;
			}
		}

		return $row_num;
	}

	private function outputGrantTotalAdminByBuildingCallDate($sheet, $row_num, $data) {
		if( !empty($data['summary_by_building_calldate_data']) ) {
			$sheet->mergeCells('C' . $row_num . ':F' . $row_num);
			$sheet->cell('C' . $row_num, function($cell) {
				$cell->setValue('Grand Total By Building Call Date');
				$cell->setAlignment('center');
				$cell->setFont([
						'size'       => '12',
						'bold'       =>  true
				]);
			});

			$row_num += 2;

			foreach ($data['summary_by_building_calldate_data'] as  $key => $data_group) {
				if( !empty($data_group['guest']) ) {
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Building : ' . $key . ' - Guest');
					});
					$row_num++;

					// table header
					$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
						$cell->setFontColor('#fefeff');
						$cell->setBackground('#1d1d1d');
					});

					$table_header = array('Date', 'International', 'Local', 'National', 'Mobile', 'Total', 'Total Carrier', 'Total Hotel');
					$sheet->row($row_num, $table_header);

					$row_num++;

					foreach ($data_group['guest'] as $row) {
						$row = array(
								strval($row->call_date), 
								strval(number_format($row->International, 2)), 
								strval(number_format($row->Local, 2)),
								strval(number_format($row->National, 2)), 
								strval(number_format($row->Mobile, 2)),
								strval(number_format($row->Total, 2)), 
								strval(number_format($row->Total_Carrier, 2)), 
								strval(number_format($row->Total_Hotel, 2))
						);

						$sheet->row($row_num, $row);
						$row_num++;
					}

				}

				if( !empty($data_group['business_centre']) ) {
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Building : ' . $key . ' - Business Centre');
					});
					$row_num++;

					// table header
					$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
						$cell->setFontColor('#fefeff');
						$cell->setBackground('#1d1d1d');
					});

					$table_header = array('Date', 'International', 'Local', 'National', 'Mobile', 'Total Carrier', 'Total Hotel' ,'Total');
					$sheet->row($row_num, $table_header);

					$row_num++;

					foreach ($data_group['business_centre'] as $row) {
						$row = array(
							strval($row->call_date), 
							strval(number_format($row->International, 2)), 
							strval(number_format($row->Local, 2)),
							strval(number_format($row->National, 2)), 
							strval(number_format($row->Mobile, 2)), 
							strval(number_format($row->Total_Carrier, 2)),
							strval(number_format($row->Total_Hotel, 2)), 
							strval(number_format($row->Total, 2))
						);

						$sheet->row($row_num, $row);
						$row_num++;
					}
				}

				if( !empty($data_group['admin']) ) {
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Building : ' . $key . ' - Admin');
					});
					$row_num++;

					// table header
					$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
						$cell->setFontColor('#fefeff');
						$cell->setBackground('#1d1d1d');
					});

					$table_header = array('Date', 'International', 'Local', 'National', 'Mobile', 'Total Carrier');
					$sheet->row($row_num, $table_header);

					$row_num++;

					foreach ($data_group['admin'] as $row) {
						$row = array(
								strval($row->call_date), 
								strval(number_format($row->International, 2)), 
								strval(number_format($row->Local, 2)),
								strval(number_format($row->National, 2)), 
								strval(number_format($row->Mobile, 2)), 
								strval(number_format($row->Total_Carrier, 2))
						);

						$sheet->row($row_num, $row);
						$row_num++;
					}
				}

				$row_num += 1;
			}
		}

		return $row_num;
	}

	private function outputDetailByBuildingRoomDepartment($sheet, $row_num, $data) {
		if( !empty($data['by_building_room_department_data']) ) {
			$sheet->mergeCells('D' . $row_num . ':F' . $row_num);
			$sheet->cell('D' . $row_num, function($cell) {
				$cell->setValue('Detail by Building, Room and Department');
				$cell->setAlignment('center');
				$cell->setFont(array(
						'size'       => '11',
						'bold'       =>  true
				));
			});

			$row_num += 1;

			foreach ($data['by_building_room_department_data'] as  $key => $data_group) {
				if( !empty($data_group['guest']) ) {
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Guest - Building : ' . $key);
					});
					$row_num++;

					foreach ($data_group['guest'] as  $room_key => $room_group) {
						$sheet->cell('A' . $row_num, function ($cell) use ($room_key) {
							$cell->setValue('Room : ' . $room_key);
						});
						$row_num++;

						// table header
						$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
						$cell->setAlignment('center');
						$cell->setFont(array(
								'bold'       =>  true
							));
						});

						$table_header = array('Date', 'Guest', 'Called No', 'Time', 'Duration', 'Destination', 'Carrier Charge', 'Hotel Charges', 'Total');
						$sheet->row($row_num, $table_header);

						$row_num++;

						foreach ($room_group['detail'] as $row) {
							$row = array(
									date("d-M-Y",  strtotime($row->call_date)), 
									$row->guest_name, 
									strval($row->called_no),
									strval($row->start_time), 
									gmdate("H:i:s", $row->duration),
									$row->country, 
									strval($row->carrier_charges), 
									strval($row->hotel_charges), 
									strval($row->total_charges)
							);

							$sheet->row($row_num, $row);
							$row_num++;
						}

						$sheet->cell('F' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#212121');
						$cell->setBackground('#ECEFF1');
						$cell->setAlignment('right');
						$cell->setFont(array(
								'bold'       =>  true
							));
						});

						$row = array(
                            '', '', '','', '',
                            'Total',
                            $data['currency'].' '.number_format($room_group['summary']->carrier_charges, 2),
                            $data['currency'].' '.number_format($room_group['summary']->hotel_charges, 2),
                            $data['currency'].' '.number_format($room_group['summary']->total_charges, 2),
						);

						$sheet->row($row_num, $row);
						$row_num++;
					}
					$row_num++;
				}

				if( !empty($data_group['business_centre']) ) {
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Business - Building : ' . $key);
					});
					$row_num++;

					foreach ($data_group['business_centre'] as  $department_key => $department_group) {
						$sheet->cell('A' . $row_num, function ($cell) use ($department_key) {
							$cell->setValue('Department : ' . $department_key);
						});
						$row_num++;

						// table header
						$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
							$cell->setFontColor('#ffffff');
							$cell->setBackground('#2c3e50');
							$cell->setAlignment('center');
							$cell->setFont(array(
									'bold'       =>  true
							));
						});

						$table_header = array('Extension', 'User', 'Called No', 'Call Date', 'Time', 'Duration', 'Destination', 'Carrier', 'Hotel',
							'Total');
						$sheet->row($row_num, $table_header);

						$row_num++;

						foreach ($department_group['detail'] as $row) {
							$row = array(
								strval($row->extension), $row->wholename, 
								strval($row->called_no), date("d-M-Y",  strtotime($row->call_date)),
								strval($row->start_time), gmdate("H:i:s", $row->duration),
								$row->country, 
								strval($row->carrier_charges), strval($row->hotel_charges), strval($row->total_charges)
							);

							$sheet->row($row_num, $row);
							$row_num++;
						}

						$sheet->cell('G' . $row_num . ':J' . $row_num, function ($cell) {
							$cell->setFontColor('#212121');
							$cell->setBackground('#ECEFF1');
							$cell->setAlignment('right');
							$cell->setFont(array(
									'bold'       =>  true
							));
						});

						$row = array(
							'', '', '','','', '',
							'Total',
							$data['currency'].' '.number_format($department_group['summary']->carrier_charges, 2),
							$data['currency'].' '.number_format($department_group['summary']->hotel_charges, 2),
							$data['currency'].' '.number_format($department_group['summary']->total_charges, 2),
						);

						$sheet->row($row_num, $row);
						$row_num++;
					}
				}

				if( !empty($data_group['admin']) ) {
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Admin - Building : ' . $key);
					});
					$row_num++;

					foreach ($data_group['admin'] as  $department_key => $department_group) {
						$sheet->cell('A' . $row_num, function ($cell) use ($department_key) {
							$cell->setValue('Department : ' . $department_key);
						});
						$row_num++;


						// table header
						$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
							$cell->setFontColor('#ffffff');
							$cell->setBackground('#2c3e50');
							$cell->setAlignment('center');
							$cell->setFont(array(
									'bold'       =>  true
							));
						});

						$table_header = array('Extension', 'User', 'Called No','Call Type', 'Call Date', 'Time', 'Duration', 'Destination', 'Carrier Charge');
						$sheet->row($row_num, $table_header);

						$row_num++;

						foreach ($department_group['detail'] as $row) {
							if (empty($row->wholename)){
								$row->wholename = $row->description;
							}
							$row = array(
								strval($row->extension), $row->wholename, 
								strval($row->called_no), $row->call_type, $row->call_date,
									$row->start_time, gmdate("H:i:s", $row->duration),
									$row->country, strval($row->carrier_charges)
							);

							$sheet->row($row_num, $row);
							$row_num++;
						}

						$sheet->cell('G' . $row_num . ':I' . $row_num, function ($cell) {
							$cell->setFontColor('#212121');
							$cell->setBackground('#ECEFF1');
							$cell->setAlignment('right');
							$cell->setFont(array(
									'bold'       =>  true
							));
						});

						$row = array(
								'', '', '', '', '', '','',
								'Total',
								$data['currency'].' '.number_format($department_group['summary']->carrier_charges, 2),
						);

						$sheet->row($row_num, $row);
						$row_num++;
					}
				}
				$row_num += 1;
			}
		}

		return $row_num;
	}

	private function outputGuestCallReport($sheet, $row_num, $data){
		if( !empty($data['guest_call_list']) ) {
			$sheet->mergeCells('E' . $row_num . ':F' . $row_num);
			$sheet->cell('E' . $row_num, function($cell) {
				$cell->setValue('Guest Call');
				$cell->setAlignment('center');
				$cell->setFont(array(
						'size'       => '11',
						'bold'       =>  true
				));
			});

			$row_num += 1;
			foreach ($data['guest_call_list'] as $building => $data_key) {
                foreach ($data_key['guest'] as $key => $data_group) {
                    $sheet->mergeCells('A' . $row_num . ':K' . $row_num);
                    $sheet->cell('A' . $row_num, function ($cell) use ($key, $data,$building) {
                        $cell->setValue('Building : ' . $building . ' ' . $data['report_by_guest_call'] . ' : ' . $key);
                        $cell->setFont(array(
                                'bold' => true
                        ));
                    });

                    $row_num++;
                    // table header

                    if ($data['report_by_guest_call'] != 'Called Number')
                    {
                        $sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
                            $cell->setFontColor('#fafafb');
                            $cell->setBackground('#1a1a1a');
                        });
                        $guestcall_header = array('DateTime', 'Extension', 'Room', 'Called No', 'Duration', 'Call Type', 'Destination', 'Carrier Charges', 'Hotel charges', 'Tax', 'Total charges');
                    } else {
                        $sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
                            $cell->setFontColor('#fafafb');
                            $cell->setBackground('#1a1a1a');
                        });
                        $guestcall_header = array('DateTime', 'Extension', 'Guest Name', 'Duration', 'Carrier Charges', 'Hotel charges', 'Tax', 'Total charges');
                    }
                    $sheet->row($row_num, $guestcall_header);

                    $row_num++;

                    $total_carrier = 0;
                    $total_hotel = 0;
                    $total_tax = 0;
                    $total_total = 0;

                    foreach ($data_group['detail'] as $call) {
                        if ($data['report_by_guest_call'] == 'Called Number')
                        {
                            $row = array(
                                    date("d-M-Y",  strtotime($call->call_date)).' '.$call->start_time, 
									strval($call->extension), $call->guest_name,
                                    gmdate("H:i:s", $call->duration),
                                    strval($call->carrier_charges), 
									strval($call->hotel_charges),
                                    strval($call->tax), 
									strval($call->total_charges)
                            );
                        } else {
                            $row = array(
                                date("d-M-Y",  strtotime($call->call_date)).' '.$call->start_time, 
								strval($call->extension), $call->room,
                                strval($call->called_no), gmdate("H:i:s", $call->duration), $call->call_type,
                                $call->country, strval($call->carrier_charges), strval($call->hotel_charges),
                                strval($call->tax), strval($call->total_charges)
                            );
                        }
                        if ($data['report_type'] == 'Detailed') {
                            $sheet->row($row_num, $row);
                            $row_num++;
                        }

                        $total_carrier += $call->carrier_charges;
                        $total_hotel += $call->hotel_charges;
                        $total_tax += $call->tax;
                        $total_total += $call->total_charges;

                    }
                    if ($data['report_by_guest_call'] != 'Called Number') {
                        $sheet->cell('G' . $row_num, function ($cell) {
                            $cell->setValue('Total');
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_carrier = strval($total_carrier);
                        $sheet->cell('H' . $row_num, function ($cell) use ($stotal_carrier) {
                            $cell->setValue($stotal_carrier);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_hotel = strval($total_hotel);
                        $sheet->cell('I' . $row_num, function ($cell) use ($stotal_hotel) {
                            $cell->setValue($stotal_hotel);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_tax = strval($total_tax);
                        $sheet->cell('J' . $row_num, function ($cell) use ($stotal_tax) {
                            $cell->setValue($stotal_tax);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_total = strval($total_total);
                        $sheet->cell('K' . $row_num, function ($cell) use ($stotal_total) {
                            $cell->setValue($stotal_total);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });
                    } else {
                        $sheet->cell('D' . $row_num, function ($cell) {
                            $cell->setValue('Total');
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_carrier = strval($total_carrier);
                        $sheet->cell('E' . $row_num, function ($cell) use ($stotal_carrier) {
                            $cell->setValue($stotal_carrier);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_hotel = strval($total_hotel);
                        $sheet->cell('F' . $row_num, function ($cell) use ($stotal_hotel) {
                            $cell->setValue($stotal_hotel);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_tax = strval($total_tax);
                        $sheet->cell('G' . $row_num, function ($cell) use ($stotal_tax) {
                            $cell->setValue($stotal_tax);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });

						$stotal_total = strval($total_total);
                        $sheet->cell('H' . $row_num, function ($cell) use ($stotal_total) {
                            $cell->setValue($stotal_total);
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });
                    }

                    $row_num += 2;
                }
            }
		}

		return $row_num;
	}

	private function outputPlainCSVGuestExcelReport($sheet, $row_num, $data)
	{
		if( !empty($data['guest_plain_csv']) ) {
			$sheet->mergeCells('E' . $row_num . ':F' . $row_num);
			$sheet->cell('E' . $row_num, function($cell) {
				$cell->setValue('Guest Call');
				$cell->setAlignment('center');
				$cell->setFont(array(
						'size'       => '11',
						'bold'       =>  true
				));
			});

			$row_num += 1;

            $sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
                $cell->setFontColor('#fafafb');
                $cell->setBackground('#1a1a1a');
            });
            $guestcall_header = array('DateTime', 'Extension', 'Room', 'Called No', 'Duration', 'Call Type', 'Destination', 'Carrier Charges', 'Hotel charges', 'Tax', 'Total charges');

            $sheet->row($row_num, $guestcall_header);

            $row_num++;

            $total_carrier = 0;
            $total_hotel = 0;
            $total_tax = 0;
            $total_total = 0;

            foreach ($data['guest_plain_csv'] as $call) {

                $row = array(
                    date("d-M-Y",  strtotime($call->call_date)).' '.$call->start_time, 
					strval($call->extension), $call->room,
                    strval($call->called_no), gmdate("H:i:s", $call->duration), $call->call_type,
                    $call->country, strval($call->carrier_charges), strval($call->hotel_charges),
                    strval($call->tax), strval($call->total_charges)
                );

                $total_carrier += $call->carrier_charges;
                $total_hotel += $call->hotel_charges;
                $total_tax += $call->tax;
                $total_total += $call->total_charges;


                if ($data['report_type'] == 'Detailed') {
                    $sheet->row($row_num, $row);
                    $row_num++;
                }
            }
/*
                $total_carrier += $call->carrier_charges;
                $total_hotel += $call->hotel_charges;
                $total_tax += $call->tax;
                $total_total += $call->total_charges;

            */

            $sheet->cell('G' . $row_num, function ($cell) {
                $cell->setValue('Total');
                $cell->setFont(array(
                        'bold' => true
                ));
            });

			$stotal_carrier = strval($total_carrier);
            $sheet->cell('H' . $row_num, function ($cell) use ($stotal_carrier) {
                $cell->setValue($stotal_carrier);
                $cell->setFont(array(
                        'bold' => true
                ));
            });

			$stotal_hotel = strval($total_hotel);
            $sheet->cell('I' . $row_num, function ($cell) use ($stotal_hotel) {
                $cell->setValue($stotal_hotel);
                $cell->setFont(array(
                        'bold' => true
                ));
            });

			$stotal_tax = strval($total_tax);
            $sheet->cell('J' . $row_num, function ($cell) use ($stotal_tax) {
                $cell->setValue($stotal_tax);
                $cell->setFont(array(
                        'bold' => true
                ));
            });

			$stotal_total = strval($total_total);
            $sheet->cell('K' . $row_num, function ($cell) use ($stotal_total) {
                $cell->setValue($stotal_total);
                $cell->setFont(array(
                        'bold' => true
                ));
            });

            $row_num += 2;
		}

		return $row_num;
	}

	private function outputCallFrequencyReport($sheet, $row_num, $data) {
		if( !empty($data['summary']) ) {

			$sheet->mergeCells('E' . $row_num . ':H' . $row_num);
			$sheet->cell('E' . $row_num, function ($cell) {
				$cell->setValue('Outgoing Call Frequency Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
						'size' => '12',
						'bold' => true
				));
			});

			$row_num += 2;
			foreach ($data['summary'] as $ext => $data_key) {
                
                    $sheet->mergeCells('A' . $row_num . ':D' . $row_num);
                    $sheet->cell('A' . $row_num, function ($cell) use ($data, $ext) { 
                        $cell->setValue('Extension : ' . $ext);
                        $cell->setFont(array(
                                'bold' => true
                        ));
                    });

                    $row_num++;
                    // table header
                    
                        $sheet->cell('A' . $row_num . ':D' . $row_num, function ($cell) {
                            $cell->setFontColor('#fbfcfe');
                            $cell->setBackground('#1a1a1a');
                        });
                   
                   
                    $admincall_header = array('Called No', 'Total Calls', 'Total Duration', 'Total Charge');
                   
                    $sheet->row($row_num, $admincall_header);

                    $row_num++;

                    $total_total = 0;
		            $total_dur = 0;
            		$total_chrg = 0;
            		

                    foreach ($data_key as $row) {

						$row1 = array(
							strval($row->called_no), strval($row->total_calls), strval($row->tot_dur), strval(number_format($row->tot_chrg,2))
					);
							
                            $sheet->row($row_num, $row1);
                            $row_num++;

							$total_total += $row->total_calls ;
							$total_dur += $row->tot_dur;
                    		$total_chrg += $row->tot_chrg;
                    		
                    }
					$sheet->cell('A' . $row_num . ':D' . $row_num, function ($cell) {
						$cell->setFont([
							'bold'       =>  true
					]);
					});
					
					$row = array(
						'TOTAL', strval($total_total), strval($total_dur), strval(number_format($total_chrg , 2))
					);
					$sheet->row($row_num, $row);
                //    $row_num++;
                    
                    
                    $row_num += 2;
                
            }
		}

		return $row_num;
	}

	private function outputHourStatusReport($sheet, $row_num, $data) {
		if( !empty($data['summary']) ) {

			$sheet->mergeCells('E' . $row_num . ':H' . $row_num);
			$sheet->cell('E' . $row_num, function ($cell) {
				$cell->setValue('Summary Hour Status Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
						'size' => '12',
						'bold' => true
				));
			});

			$row_num += 2;
			foreach ($data['summary'] as $dept => $data_key) {
                
                    $sheet->mergeCells('A' . $row_num . ':H' . $row_num);
                    $sheet->cell('A' . $row_num, function ($cell) use ($data, $dept) { 
                        $cell->setValue('Department : ' . $dept);
                        $cell->setFont(array(
                                'bold' => true
                        ));
                    });

                    $row_num++;
                    // table header
                    
                        $sheet->cell('A' . $row_num . ':AD' . $row_num, function ($cell) {
                            $cell->setFontColor('#fbfcfe');
                            $cell->setBackground('#1a1a1a');
                        });
                   
                   
                    $admincall_header = array('Extension', 'Total Calls', 'Ans Total', 'UnAns Total', 'Incmg Int Ans Calls / %','Outg Int Ans Calls / %', 'Incmg Ext Ans Calls / %', 'Outg Ext Ans Calls / %', 'Incmg Int UnAns Calls / %', 'Outg Int UnAns Calls / %',
					'Incmg Ext UnAns Calls / %','Outg Ext UnAns Calls / %', '00:00-07:00', '07:00-08:00', '08:00-09:00', '09:00-10:00', '10:00-11:00',
					 '11:00-12:00','12:00-13:00','13:00-14:00', '14:00-15:00','15:00-16:00','16:00-17:00','17:00-18:00','18:00-19:00','19:00-20:00','20:00-21:00','21:00-22:00','22:00-23:00','23:00-24:00');
                   
                    $sheet->row($row_num, $admincall_header);

                    $row_num++;

                    $total_total = 0;
		            $total_answered = 0;
            		$total_unanswered = 0;
					$total_ans_int_incoming = 0;
					$total_ans_int_outgoing = 0;
					$total_ans_ext_incoming = 0;
					$total_ans_ext_outgoing = 0;
					$total_unans_int_incoming = 0;
					$total_unans_int_outgoing = 0;
					$total_unans_ext_incoming = 0;
					$total_unans_ext_outgoing = 0;
					$total_unans_int_inc_per = 0;
					$total_unans_int_out_per = 0;
					$total_unans_ext_inc_per = 0;
					$total_unans_ext_out_per = 0;
					$total_ans_int_inc_per = 0;
					$total_ans_int_out_per = 0;
					$total_ans_ext_inc_per = 0;
					$total_ans_ext_out_per = 0;
		            $total_seven = 0;
		            $total_eight = 0;
		            $total_nine = 0;
		            $total_ten = 0;
		            $total_eleven = 0;
		            $total_twelve= 0;
		            $total_thirteen= 0;
 		            $total_fourteen = 0;
		            $total_fifteen = 0;
		            $total_sixteen = 0;
		            $total_seventeen = 0;
        		    $total_eighteen = 0;
		            $total_ninteen = 0;
		            $total_twenty = 0;
		            $total_twentyone = 0;
		            $total_twentytwo = 0;
		            $total_twentythree = 0;
		            $total_twentyfour = 0;
					$unans_int_per = 0;
            		$unans_ext_per = 0;

                    foreach ($data_key as $row) {

						if ($row->tot_unans != 0)
						{
						   $unans_int_inc_per = ($row->unanswered_int_incoming / $row->tot_unans ) * 100;
						   $unans_int_out_per = (($row->unanswered_int1_outgoing + $row->unanswered_int2_outgoing) / $row->tot_unans ) * 100;
						   $unans_ext_inc_per = ($row->unanswered_ext_incoming / $row->tot_unans  ) * 100;
						   $unans_ext_out_per = (($row->unanswered_ext1_outgoing + $row->unanswered_ext2_outgoing) / $row->tot_unans  ) * 100;
						}else{
							$unans_int_inc_per = 0;
							$unans_int_out_per = 0;
							$unans_ext_inc_per = 0;
							$unans_ext_out_per = 0;
						}
		
						if ($row->tot_ans != 0)
						{
						   $ans_int_inc_per = ($row->answered_int_incoming / $row->tot_ans ) * 100;
						   $ans_int_out_per = ($row->answered_int_outgoing  / $row->tot_ans ) * 100;
						   $ans_ext_inc_per = ($row->answered_ext_incoming / $row->tot_ans  ) * 100;
						   $ans_ext_out_per = ($row->answered_ext_outgoing / $row->tot_ans  ) * 100;
						}else{
							$ans_int_inc_per = 0;
							$ans_int_out_per = 0;
							$ans_ext_inc_per = 0;
							$ans_ext_out_per = 0;
						}
                       
                            $row1 = array(
								strval($row->extension), 
								strval($row->total_calls), 
								strval($row->tot_ans), 
								strval($row->tot_unans), 
									$row->answered_int_incoming .  ' / ' . number_format($ans_int_inc_per,2),
									$row->answered_int_outgoing .  ' / ' . number_format($ans_int_out_per,2), 
									$row->answered_ext_incoming .  ' / ' . number_format($ans_ext_inc_per,2),
									$row->answered_ext_outgoing .  ' / ' . number_format($ans_ext_out_per,2),
									$row->unanswered_int_incoming .  ' / ' . number_format($unans_int_inc_per,2),
									$row->unanswered_int1_outgoing + $row->unanswered_int2_outgoing .  ' / ' . number_format($unans_int_out_per,2),
									$row->unanswered_ext_incoming .  ' / ' . number_format($unans_ext_inc_per,2),
									$row->unanswered_ext1_outgoing + $row->unanswered_ext2_outgoing .  ' / ' . number_format($unans_ext_out_per,2),
                                    strval($row->seven), strval($row->eight), strval($row->nine), strval($row->ten), strval($row->eleven), 
									strval($row->twelve), strval($row->thirteen), strval($row->fourteen),strval($row->fifteen),
									strval($row->sixteen), strval($row->seventeen), strval($row->eighteen), strval($row->ninteen), 
									strval($row->twenty), strval($row->twentyone), strval($row->twentytwo), strval($row->twentythree),
									strval($row->twentyfour)
                            );
                        
                       
                            $sheet->row($row_num, $row1);
                            $row_num++;

							$total_total += $row->total_calls ;
							$total_answered += $row->tot_ans;
                    		$total_unanswered += $row->tot_unans;
							$total_ans_int_incoming += $row->answered_int_incoming;
							$total_ans_int_outgoing += $row->answered_int_outgoing;
							$total_ans_ext_incoming += $row->answered_ext_incoming;
							$total_ans_ext_outgoing += $row->answered_ext_outgoing;
							$total_unans_int_incoming += $row->unanswered_int_incoming;
							$total_unans_int_outgoing += $row->unanswered_int1_outgoing + $row->unanswered_int2_outgoing;
							$total_unans_ext_incoming += $row->unanswered_ext_incoming;
							$total_unans_ext_outgoing += $row->unanswered_ext1_outgoing + $row->unanswered_ext2_outgoing;
							$total_seven += $row->seven;
							$total_eight += $row->eight;
							$total_nine += $row->nine;
							$total_ten += $row->ten;
							$total_eleven += $row->eleven;
							$total_twelve += $row->twelve;
							$total_thirteen += $row->thirteen;
							$total_fourteen += $row->fourteen;
							$total_fifteen += $row->fifteen;
							$total_sixteen += $row->sixteen;
							$total_seventeen += $row->seventeen;
							$total_eighteen += $row->eighteen;
							$total_ninteen += $row->ninteen;
							$total_twenty += $row->twenty;
							$total_twentyone += $row->twentyone;
							$total_twentytwo += $row->twentytwo;
							$total_twentythree += $row->twentythree;
							$total_twentyfour += $row->twentyfour;
                    }
					$sheet->cell('A' . $row_num . ':AD' . $row_num, function ($cell) {
						$cell->setFont([
							'bold'       =>  true
					]);
					});
					if ($total_unanswered != 0){
                        $total_unans_int_inc_per = ($total_unans_int_incoming / $total_unanswered) * 100;
                        $total_unans_int_out_per = ($total_unans_int_outgoing / $total_unanswered) * 100;
                        $total_unans_ext_inc_per = ($total_unans_ext_incoming / $total_unanswered) * 100;
                        $total_unans_ext_out_per = ($total_unans_ext_outgoing / $total_unanswered) * 100;
                    }else{
                        $total_unans_int_inc_per = 0;
                        $total_unans_int_out_per = 0;
                        $total_unans_ext_inc_per = 0;
                        $total_unans_ext_out_per = 0;
                    }
                    if ($total_answered != 0){
                        $total_ans_int_inc_per = ($total_ans_int_incoming / $total_answered) * 100;
                        $total_ans_int_out_per = ($total_ans_int_outgoing / $total_answered) * 100;
                        $total_ans_ext_inc_per = ($total_ans_ext_incoming / $total_answered) * 100;
                        $total_ans_ext_out_per = ($total_ans_ext_outgoing / $total_answered) * 100;
                    }else{
                        $total_ans_int_inc_per = 0;
                        $total_ans_int_out_per = 0;
                        $total_ans_ext_inc_per = 0;
                        $total_ans_ext_out_per = 0;
                    }
					$row = array(
						'TOTAL', 
						strval($total_total), 
						strval($total_answered), 
						strval($total_unanswered),  
						$total_ans_int_incoming .  ' / ' . number_format($total_ans_int_inc_per,2),
						$total_ans_int_outgoing .  ' / ' . number_format($total_ans_int_out_per,2), 
						$total_ans_ext_incoming .  ' / ' . number_format($total_ans_ext_inc_per,2),
						$total_ans_ext_outgoing .  ' / ' . number_format($total_ans_ext_out_per,2),
						$total_unans_int_incoming .  ' / ' . number_format($total_unans_int_inc_per,2),
						$total_unans_int_outgoing .  ' / ' . number_format($total_unans_int_out_per,2), 
						$total_unans_ext_incoming .  ' / ' . number_format($total_unans_ext_inc_per,2),
						$total_unans_ext_outgoing .  ' / ' . number_format($total_unans_ext_out_per,2),
						strval($total_seven), strval($total_eight), strval($total_nine), strval($total_ten), strval($total_eleven), 
						strval($total_twelve), strval($total_thirteen), strval($total_fourteen),strval($total_fifteen),
						strval($total_sixteen), strval($total_seventeen), strval($total_eighteen), strval($total_ninteen), 
						strval($total_twenty), strval($total_twentyone), strval($total_twentytwo), strval($total_twentythree),
						strval($total_twentyfour)
					);
					$sheet->row($row_num, $row);
                //    $row_num++;
                    
                    
                    $row_num += 2;
                
            }
		}

		return $row_num;
	}


	private function outputAdminCallReport($sheet, $row_num, $data) {
		if( !empty($data['admin_call_list']) ) {
			$sheet->mergeCells('E' . $row_num . ':F' . $row_num);
			$sheet->cell('E' . $row_num, function ($cell) {
				$cell->setValue('Admin Call');
				$cell->setAlignment('center');
				$cell->setFont(array(
						'size' => '12',
						'bold' => true
				));
			});

			$row_num += 2;
			foreach ($data['admin_call_list'] as $building => $data_key) {
                foreach ($data_key['admin'] as $key => $data_group) {
                    $sheet->mergeCells('A' . $row_num . ':H' . $row_num);
                    $sheet->cell('A' . $row_num, function ($cell) use ($key, $data, $building) {
                        if ($data['report_by_admin_call'] != 'Access Code')
                        {
                            $cell->setValue('Building : ' . $building . ' ' . $data['report_by_admin_call'] . ' : ' . $key);
                        }
                        else
                        {
                            $cell->setValue('Building : ' . $building . ' ' . $data['report_by_admin_call'] . ' : ' . '****'. substr($key,-2));
                        }
                        $cell->setFont(array(
                                'bold' => true
                        ));
                    });

                    $row_num++;
                    // table header
                    if ($data['report_by_admin_call'] != 'Called Number')
                    {
                        $sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
                            $cell->setFontColor('#fbfcfe');
                            $cell->setBackground('#1a1a1a');
                        });
                    } else {
                        $sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
                            $cell->setFontColor('#fbfcfe');
                            $cell->setBackground('#1a1a1a');
                        });
                    }
                    if ($data['report_by_admin_call'] != 'Called Number') {
                        $admincall_header = array('DateTime', 'Extension', 'User Name', 'Called No', 'Duration', 'Call Type', 'Destination', 'Carrier Charges');
                    } else {
                        $admincall_header = array('DateTime', 'Extension', 'User Name', 'Duration', 'Carrier Charges');
                    }
                    $sheet->row($row_num, $admincall_header);

                    $row_num++;

                    $total_carrier = 0;

                    foreach ($data_group['detail'] as $call) {
                        if (empty($call->wholename))
                            $call->wholename = $call->description;

                        if ($data['report_by_admin_call'] != 'Called Number') {
                            $row = array(
                                    date("d-M-Y",  strtotime($call->call_date)).' '.$call->start_time, 
									strval($call->extension), $call->wholename,
                                    strval($call->called_no), gmdate("H:i:s", $call->duration), $call->call_type,
                                    $call->country, strval(sprintf('%.2f', $call->carrier_charges))
                            );
                        } else {
                            $row = array(
                                date("d-M-Y",  strtotime($call->call_date)).' '.$call->start_time, 
								strval($call->extension), $call->wholename, gmdate("H:i:s", $call->duration),
                                strval(sprintf('%.2f', $call->carrier_charges))
                            );
                        }
                        if ($data['report_type'] == 'Detailed') {
                            $sheet->row($row_num, $row);
                            $row_num++;
                        }

                        $total_carrier += $call->carrier_charges;
                    }
                    if ($data['report_by_admin_call'] != 'Called Number')
                    {
                    $sheet->cell('G' . $row_num, function ($cell) {
                        $cell->setValue('Total');
                        $cell->setFont(array(
                                'bold' => true
                        ));
                    });
                    }
                    else
                    {
                        $sheet->cell('D' . $row_num, function ($cell) {
                            $cell->setValue('Total');
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });
                    }
                    if ($data['report_by_admin_call'] != 'Called Number')
                    {
                    $sheet->cell('H' . $row_num, function ($cell) use ($total_carrier) {
                        $cell->setValue(sprintf('%.2f', $total_carrier));
                        $cell->setFont(array(
                                'bold' => true
                        ));
                    });
                    }
                    else
                    {
                        $sheet->cell('E' . $row_num, function ($cell) use ($total_carrier) {
                            $cell->setValue(sprintf('%.2f', $total_carrier));
                            $cell->setFont(array(
                                    'bold' => true
                            ));
                        });
                    }
                    $row_num += 2;
                }
            }
		}

		return $row_num;
	}

	private function outputPlainCSVAdminExcelReport($sheet, $row_num, $data)
	{
		if( !empty($data['admin_plain_csv']) ) {
			$sheet->mergeCells('E' . $row_num . ':F' . $row_num);
			$sheet->cell('E' . $row_num, function ($cell) {
				$cell->setValue('Admin Call');
				$cell->setAlignment('center');
				$cell->setFont(array(
						'size' => '12',
						'bold' => true
				));
			});

			$row_num += 2;




				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#fbfcfe');
					$cell->setBackground('#1a1a1a');
				});



					$admincall_header = array('DateTime', 'Extension', 'User Name', 'Called No', 'Duration', 'Call Type', 'Destination', 'Carrier Charges');

				$sheet->row($row_num, $admincall_header);

				$row_num++;

				$total_carrier = 0;

				foreach ($data['admin_plain_csv'] as $call) {
					if (empty($call->wholename))
						$call->wholename = $call->description;

					$row = array(
							date("d-M-Y",  strtotime($call->call_date)).' '.$call->start_time, 
							strval($call->extension), $call->wholename,
							strval($call->called_no), gmdate("H:i:s", $call->duration), $call->call_type,
							$call->country, strval(sprintf('%.2f', $call->carrier_charges))
					);

					if ($data['report_type'] == 'Detailed') {
						$sheet->row($row_num, $row);
						$row_num++;
					}


					$total_carrier += $call->carrier_charges;
				}

				$sheet->cell('G' . $row_num, function ($cell) {
					$cell->setValue('Total');
					$cell->setFont(array(
							'bold' => true
					));
				});



				$sheet->cell('H' . $row_num, function ($cell) use ($total_carrier) {
					$cell->setValue(sprintf('%.2f', $total_carrier));
					$cell->setFont(array(
							'bold' => true
					));
				});


				$row_num += 2;


		}

		return $row_num;
	}

	private function outputBusinessCentreCallReport($sheet, $row_num, $data)
	{
		if( !empty($data['business_centre_call_list']) ) {
			$sheet->mergeCells('E' . $row_num . ':F' . $row_num);
			$sheet->cell('E' . $row_num, function ($cell) {
				$cell->setValue('Business Centre Call');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '12',
					'bold' => true
				));
			});

			$row_num += 2;

			foreach ($data['business_centre_call_list'] as $building => $data_key) {
				foreach ($data_key['business'] as  $key => $data_group){
				$sheet->mergeCells('A' . $row_num . ':H' . $row_num);
				$sheet->cell('A' . $row_num, function ($cell) use ($key, $data,$building) {
					$cell->setValue('Building : ' . $building . ' ' . $data['report_by_business_centre_call'] . ' : ' . $key);
					$cell->setFont(array(
						'bold' => true
					));
				});

				$row_num++;
				// table header
				$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
					$cell->setFontColor('#fafafb');
					$cell->setBackground('#1a1a1a');
				});

				$admincall_header = array('Time', 'Extension', 'User Name', 'Called No', 'Duration', 'Call Type', 'Destination', 'Carrier Charges', 'Hotel Charges',
					'Total Charges');
				$sheet->row($row_num, $admincall_header);

				$row_num++;

				$total_carrier = 0;
				$total_carrier_hotel = 0;
				$total_carrier_total = 0;

				foreach ($data_group['detail'] as $call) {
					$row = array(
						date("d-M-Y",  strtotime($call->call_date)).' '.$call->start_time, 
						strval($call->extension), $call->wholename,
						strval($call->called_no), gmdate("H:i:s", $call->duration), $call->call_type,
						$call->country, strval($call->carrier_charges) ,strval($call->hotel_charges) ,strval($call->total_charges)
					);

					if ($data['report_type'] == 'Detailed') {
						$sheet->row($row_num, $row);
						$row_num++;
					}

					$total_carrier += $call->carrier_charges;
					$total_carrier_hotel += $call->hotel_charges;
					$total_carrier_total += $call->total_charges;
				}

				$sheet->cell('G' . $row_num, function ($cell) {
					$cell->setValue('Total');
					$cell->setFont(array(
						'bold' => true
					));
				});

				$sheet->cell('H' . $row_num, function ($cell) use ($total_carrier) {
					$cell->setValue($total_carrier);
					$cell->setFont(array(
						'bold' => true
					));
				});

				$sheet->cell('I' . $row_num, function ($cell) use ($total_carrier_hotel) {
					$cell->setValue($total_carrier_hotel);
					$cell->setFont(array(
						'bold' => true
					));
				});
				$sheet->cell('J' . $row_num, function ($cell) use ($total_carrier_total) {
					$cell->setValue($total_carrier_total);
					$cell->setFont(array(
						'bold' => true
					));
				});
				$row_num += 2;
			}
		}
		}

		return $row_num;
	}

	private function outputSummaryExtensionReport($sheet, $row_num, $data){
		$extension_call = isset($data['guest_extension_call']) ? $data['guest_extension_call'] : "";
 		$duration_call = isset($data['guest_duraion_call']) ? $data['guest_duraion_call'] : "";
 		$charge_call = isset($data['guest_charge_call']) ? $data['guest_charge_call'] : "";
		$extension_list = isset($data['guest_extension_list']) ? $data['guest_extension_list'] : [];
		$admin_admin_extension_receive_list = isset($data['admin_admin_extension_receive_list']) ? $data['admin_admin_extension_receive_list'] : [];
 		$admin_guest_extension_receive_list = isset($data['admin_guest_extension_receive_list']) ? $data['admin_guest_extension_receive_list'] : [];
 		$guest_guest_extension_receive_list = isset($data['guest_guest_extension_receive_list']) ? $data['guest_guest_extension_receive_list'] : [];
 		$guest_admin_extension_receive_list = isset($data['guest_admin_extension_receive_list']) ? $data['guest_admin_extension_receive_list'] : [];
 		$title_show = false ;
		 if(!empty($extension_call))
		     $title_show = true;


		 $row_num+=2;
		 if ($title_show == true){
				// table header
				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#fafafb');
					$cell->setBackground('#1a1a1a');
				});

				$header = array('', 'Intl', 'Mobile', 'Local', 'National', 'Internal', 'Incoming', 'Grand Total');
				$sheet->row($row_num, $header);

				$row_num++;
			}
			if (!empty($extension_call)){

					$row = array(
						'Calls', 
						strval($extension_call->International), 
						strval($extension_call->Mobile),
						strval($extension_call->Local), 
						strval($extension_call->National), strval($extension_call->Internal),
						strval($extension_call->Incoming), strval($extension_call->Grand)
					);


						$sheet->row($row_num, $row);
						$row_num++;
			}
			if (!empty($duration_call)){

				$row = array(
					'Duration', 
					strval($duration_call->International), 
					strval($duration_call->Mobile),
					strval($duration_call->Local), 
					strval($duration_call->National), strval($duration_call->Internal),
					strval($duration_call->Incoming), strval($duration_call->Grand)
				);


					$sheet->row($row_num, $row);
					$row_num++;
			}
			if (!empty($charge_call)){

			$row = array(
				'Charges(Aed)', 
				strval(number_format($charge_call->International,2)), 
				strval(number_format($charge_call->Mobile,2)),
				strval(number_format($charge_call->Local,2)), 
				strval(number_format($charge_call->National,2)), strval(number_format($charge_call->Internal,2)),
				strval(number_format($charge_call->Incoming,2)), strval(number_format($charge_call->Grand,2))
			);


				$sheet->row($row_num, $row);
				$row_num++;
			}

			$row_num++;
			$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
				$cell->setFontColor('#fafafb');
				$cell->setBackground('#1a1a1a');
			});

			$header = array('Extension','Name', 'Department', 'Intl(Call/Total)', 'Mobile(Call/Total)', 'Local(Call/Total)', 'National(Call/Total)', 'Internal(Call/Total)', 'Incoming(Call/Total)', 'Total Call','Total Charge');
			$sheet->row($row_num, $header);

			$row_num++;

			foreach ($extension_list as $row){
				$row = array(
					strval($row->extension), $row->description, 
					strval($row->department), 
					$row->International_count.'/'.number_format($row->International,2), 
					$row->Mobile_count.'/'.number_format($row->Mobile,2),
					$row->Local_count.'/'.number_format($row->Local,2), 
					$row->National_count.'/'.number_format($row->National,2), 
					$row->Internal_count.'/'.number_format($row->Internal,2),
					$row->Incoming_count.'/'.number_format($row->Incoming,2), 
					strval($row->Grand_count), 
					strval(number_format($row->Grand,2))
				);


					$sheet->row($row_num, $row);
					$row_num++;
			}

			$row_num++;
			$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
				$cell->setFontColor('#fafafb');
				$cell->setBackground('#1a1a1a');
			});

			$header = array('Extension', 'Received from', 'Received Call');
			$sheet->row($row_num, $header);

			$row_num++;
			foreach ($admin_admin_extension_receive_list as $row){



           $row = array(
			strval($row->extension), 'Admin', strval($row->Receive_count));


					$sheet->row($row_num, $row);
					$row_num++;
            }

            foreach ($admin_guest_extension_receive_list as $row){



           $row = array(
			strval($row->extension), 'Guest', strval($row->Receive_count));


					$sheet->row($row_num, $row);
					$row_num++;
            }
            foreach ($guest_guest_extension_receive_list as $row){



           $row = array(
			strval($row->extension), 'Guest', strval($row->Receive_count));


					$sheet->row($row_num, $row);
					$row_num++;
            }
            foreach ($guest_admin_extension_receive_list as $row){



           $row = array(
			strval($row->extension), 'Admin', strval($row->Receive_count));


					$sheet->row($row_num, $row);
					$row_num++;
            }

			return $row_num;
	}

	private function outputCallDateCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by Call Date');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Call Date');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;

//		foreach ($data['summary'] as $key => $row) {
//
//		}
//		$row_num++;


		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row) {
				$row_num++;
				$sheet->mergeCells('A'.$row_num.':B'.$row_num);
				$sheet->cell('A'.$row_num, function($cell) use ($row) {
					$cell->setValue('Call date : '.$row->date);
				});

				$row_num++;
				if(!empty($row->calldate)) {
					$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Extension', 'User', 'Call Time', 'Duration', 'Dialled Numbe', 'Destination', 'Call Cost ('.$data['currency'].')', 'Status',
						'Comment');
					$sheet->row($row_num, $table_header);
					$row_num++;

					foreach ($row->calldate as $key1 => $row1) {
						$row_2 = array(
							strval($row1->extension), 
							$row1->user, strval($row1->calltime), strval($row1->duration), strval($row1->dialednumber), $row1->destination,
							strval(number_format($row1->callcost,2)), $row1->status, $row1->comment);
						$sheet->row($row_num, $row_2);
						$row_num++;
					}

				}
				$row_num+=2;
				$sheet->mergeCells('A'.$row_num.':B'.$row_num);
				$sheet->cell('A'.$row_num, function($cell) use ($row,$data) {
					$cell->setValue('Total Calls : '.$row->calltotal->calltotal. '             Call Cost ('.$data['currency'].') :'.number_format($row->calltotal->callcost,2));
				});

				$row_num+=2;

				$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');
				});
				$table_header = array(' ', ' International ', '   Local   ', '   National  ', '    Total  ');
				$sheet->row($row_num, $table_header);
				$row_num++;

				$row_4 = array(strval($row->calls->calls), strval($row->calls->international), 
				strval($row->calls->local), strval($row->calls->national), strval($row->calls->total));
				$sheet->row($row_num, $row_4);
				$row_num++;

				$row_5 = array(strval($row->duration->duration), strval($row->duration->international), 
				strval($row->duration->local), strval($row->duration->national), strval($row->duration->total));
				$sheet->row($row_num, $row_5);
				$row_num++;

				$row_6 = array(strval($row->callcost->callcost), strval(number_format($row->callcost->international,2)), 
				strval(number_format($row->callcost->local,2)), strval(number_format($row->callcost->national,2)), 
				strval(number_format($row->callcost->total,2)));
				$sheet->row($row_num, $row_6);
				$row_num+=2;

			}

		}
		return $row_num;
	}

	private function outputCallStatusCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by Call Status');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Call Status');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;
		$grand_total  = 0;
		$grand_totalcharge = 0;

		if	(!empty($data['by_dept_data'])) {
			$row_num++;
			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('Department', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
							'Total Calls','Total Amount');
			$sheet->row($row_num, $table_header);
			$row_num++;
			foreach ($data['by_dept_data'] as $key => $row) {

				$row_total = $row['unmarkedcount'] + $row['approvedcount'] + $row['awaitingcount'] + $row['unapprovedcount'];
				$row_totalcharge =  $row['approvedcharge'] + $row['unapprovedcharge'] + $row['awaitingcharge'] + $row['unmarkedcharge'];

						$row_2 = array(
							$row['name'], $row['approvedcount'] . '/' . number_format($row['approvedcharge'],2), 
							$row['unapprovedcount'] . '/' . number_format($row['unapprovedcharge'],2),
							$row['awaitingcount'] . '/' . number_format($row['awaitingcharge'],2),
							$row['unmarkedcount'] . '/' . number_format($row['unmarkedcharge'],2),  
							strval($row_total), 
							strval(round(number_format($row_totalcharge, 2),2)));
						$sheet->row($row_num, $row_2);
						$row_num++;

						$grand_total += $row_total;
                        $grand_totalcharge +=  $row_totalcharge;
			}


				//$row_num+=2;
				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFont(array(
						'bold' => true));
				});
				$row_3 = array(
					'Total', $data['total_value']['approvedcount'] . '/' . number_format($data['total_value']['approvedcharge'], 2),  
					$data['total_value']['unapprovedcount'] . '/' . number_format($data['total_value']['unapprovedcharge'], 2),
					$data['total_value']['awaitingcount'] . '/' . number_format($data['total_value']['awaitingcharge'], 2),
					$data['total_value']['unmarkedcount'] . '/' . number_format($data['total_value']['unmarkedcharge'], 2),
					$grand_total,$data['currency'] . ' ' . number_format($grand_totalcharge, 2));
				$sheet->row($row_num, $row_3);
				$row_num++;

				$row_num+=2;



			}


		return $row_num;
	}

	private function outputCostCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by Cost Comparison');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Cost Comparison');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;
		$grand_per  = 0;
		$grand_bus  = 0;
		$grand_unclassify  = 0;
		$grand_totalcharge = 0;

		if	(!empty($data['by_dept_data'])) {
			foreach ($data['by_dept_data'] as  $key => $data_group){
				$month = date("F", mktime(0, 0, 0, $key, 10));

				$sheet->cell('A' . $row_num, function ($cell) use ($data_group,$month) {
					$cell->setValue($month);
					$cell->setFont(array(
						'bold' => true
					));
				});
			$row_num++;
			$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('Department', 'Personal', 'Business', 'Unclassified', 'Total Cost');
			$sheet->row($row_num, $table_header);
			$row_num++;
			foreach ($data_group as $row) {


				$row_totalcharge =  $row['personal'] + $row['business'] + $row['unclassified'];

						$row_2 = array(
							$row['name'], 
							strval(number_format($row['personal'], 2)), 
							strval(number_format($row['business'], 2)),
							strval(number_format($row['unclassified'], 2)), 
							strval(number_format($row_totalcharge, 2))
						);
						$sheet->row($row_num, $row_2);
						$row_num++;

						$grand_per += $row['personal'];
						$grand_bus += $row['business'];
						$grand_unclassify += $row['unclassified'];
						$grand_totalcharge +=  $row_totalcharge;

			}


				//$row_num+=2;
				$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
					$cell->setAlignment('right');
					$cell->setFont(array(
						'bold' => true));
				});
				$row_3 = array(
					'Total', $data['currency'] . ' ' . number_format($grand_per, 2), 
					$data['currency'] . ' ' .  number_format($grand_bus, 2),
					$data['currency'] . ' ' . number_format($grand_unclassify, 2),
					$data['currency'] . ' ' .  number_format($grand_totalcharge, 2));
				$sheet->row($row_num, $row_3);
				$row_num++;

				$row_num+=2;

				}

			}


		return $row_num;
	}

	private function outputDeaprtmentCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('B' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by Department');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Department');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;
		$origin_department = '';
		$count = 0;
		$de_approvedcall = 0;
		$de_approvedcharge = 0;
		$de_unapprovedcount = 0;
		$de_unapprovedcharge = 0;
		$de_awaitingcount = 0;
		$de_awaitingcharge = 0;
		$de_unmarkedcount = 0;
		$de_unmarkedcharge = 0;
		$de_totalcount = 0;
		$de_totalcharge = 0;

		$all_approvedcall = 0;
		$all_approvedcharge = 0;
		$all_unapprovedcount = 0;
		$all_unapprovedcharge = 0;
		$all_awaitingcount = 0;
		$all_awaitingcharge = 0;
		$all_unmarkedcount = 0;
		$all_unmarkedcharge = 0;
		$all_totalcount = 0;
		$all_totalcharge = 0;
		$summay_maxcount = 0;
		if(!empty($data['summary'])) $summay_maxcount = count($data['summary']);
		if( $data['report_type'] == 'Summary') {
			foreach ($data['summary'] as $key => $row) {
				if ($origin_department != $row->depart_name) {
					if ($count != 0) {
						$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
							$cell->setFontColor('#000000');
							$cell->setBackground('#D3D3D3');
						});
						$table_header = array('Extension', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
							'Total Calls');
						$sheet->row($row_num, $table_header);
						$row_num++;
						$row_1 = array(
							'Total', $de_approvedcall . '/' . number_format($de_approvedcharge,2), 
							$de_unapprovedcount . '/' . number_format($de_unapprovedcharge,2),
							$de_awaitingcount . '/' . number_format($de_awaitingcharge,2), 
							$de_unmarkedcount . '/' . number_format($de_unmarkedcharge,2), 
							$de_totalcount . '/' . number_format($de_totalcharge,2));
						$sheet->row($row_num, $row_1);
						$row_num++;

						$all_approvedcall += $de_approvedcall;
						$all_approvedcharge += $de_approvedcharge;
						$all_unapprovedcount += $de_unapprovedcount;
						$all_unapprovedcharge += $de_unapprovedcharge;
						$all_awaitingcount += $de_awaitingcount;
						$all_awaitingcharge += $de_awaitingcharge;
						$all_unmarkedcount += $de_unmarkedcount;
						$all_unmarkedcharge += $de_unmarkedcharge;
						$all_totalcount += $de_totalcount;
						$all_totalcharge += $de_totalcharge;

						$de_approvedcall = 0;
						$de_approvedcharge = 0;
						$de_unapprovedcount = 0;
						$de_unapprovedcharge = 0;
						$de_awaitingcount = 0;
						$de_awaitingcharge = 0;
						$de_unmarkedcount = 0;
						$de_unmarkedcharge = 0;
						$de_totalcount = 0;
						$de_totalcharge = 0;

					}
					$row_num++;
					$sheet->mergeCells('A' . $row_num . ':B' . $row_num);
					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue('Department : ' . $row->depart_name);
					});
					$row_num++;
					$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Extension', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
						'Total Calls');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$row_1 = array(
						$row->extension .'-'. $row->user, 
						$row->approvedcount . '/' . number_format($row->approvedcharge,2), 
						$row->unapprovedcount . '/' . number_format($row->unapprovedcharge,2),
						$row->awaitingcount . '/' . number_format($row->awaitingcharge,2), 
						$row->unmarkedcount . '/' . number_format($row->unmarkedcharge,2), 
						$row->totalcount . '/' . number_format($row->totalcharge,2));
					$sheet->row($row_num, $row_1);
					$row_num++;
					$de_approvedcall += $row->approvedcount;
					$de_approvedcharge += $row->approvedcharge;
					$de_unapprovedcount += $row->unapprovedcount;
					$de_unapprovedcharge += $row->unapprovedcharge;
					$de_awaitingcount += $row->awaitingcount;
					$de_awaitingcharge += $row->awaitingcharge;
					$de_unmarkedcount += $row->unmarkedcount;
					$de_unmarkedcharge += $row->unmarkedcharge;
					$de_totalcount += $row->totalcount;
					$de_totalcharge += $row->totalcharge;
				} else {
					$row_num++;
					$row_1 = array(
						$row->extension .'-'. $row->user, 
						$row->approvedcount . '/' . number_format($row->approvedcharge,2), 
						$row->unapprovedcount . '/' . number_format($row->unapprovedcharge,2),
						$row->awaitingcount . '/' . number_format($row->awaitingcharge,2), 
						$row->unmarkedcount . '/' . number_format($row->unmarkedcharge,2), 
						$row->totalcount . '/' . number_format($row->totalcharge,2));
					$sheet->row($row_num, $row_1);
					$row_num++;
					$de_approvedcall += $row->approvedcount;
					$de_approvedcharge += $row->approvedcharge;
					$de_unapprovedcount += $row->unapprovedcount;
					$de_unapprovedcharge += $row->unapprovedcharge;
					$de_awaitingcount += $row->awaitingcount;
					$de_awaitingcharge += $row->awaitingcharge;
					$de_unmarkedcount += $row->unmarkedcount;
					$de_unmarkedcharge += $row->unmarkedcharge;
					$de_totalcount += $row->totalcount;
					$de_totalcharge += $row->totalcharge;
					if (($summay_maxcount - 1) == $count) {
						$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
							$cell->setFontColor('#000000');
							$cell->setBackground('#D3D3D3');
						});
						$table_header = array('Extension', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
							'Total Calls');
						$sheet->row($row_num, $table_header);
						$row_num++;
						$row_2 = array(
							"Total", $de_approvedcall . '/' . number_format($de_approvedcharge,2), 
							$de_unapprovedcount . '/' . number_format($de_unapprovedcharge,2),
							$de_awaitingcount . '/' . number_format($de_awaitingcharge,2), 
							$de_unmarkedcount . '/' . number_format($de_unmarkedcharge,2), 
							$de_totalcount . '/' . number_format($de_totalcharge,2));
						$sheet->row($row_num, $row_2);
					}
				}
				$origin_department = $row->depart_name;
				$count++;
			}
			$row_num++;
			$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
				$cell->setFontColor('#000000');
				$cell->setBackground('#D3D3D3');
			});
			$table_header = array('Extension', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
				'Total Calls');
			$sheet->row($row_num, $table_header);
			$row_num++;
			$row_all = array(
				"Grand Total", 
				$all_approvedcall . '/' . number_format($all_approvedcharge,2), 
				$all_unapprovedcount . '/' . number_format($all_unapprovedcharge,2),
				$all_awaitingcount . '/' . number_format($all_awaitingcharge,2), 
				$all_unmarkedcount . '/' . number_format($all_unmarkedcharge,2), 
				$all_totalcount . '/' . number_format($all_totalcharge,2));
			$sheet->row($row_num, $row_all);
		}

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['department_dept_section_extension'] as $key => $row) {
				if (!empty($row['summary'])) {
					$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Department', 'International', 'Mobile', 'Local', 'National', 'Total');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$row_1 = array(
						$row['summary']->depart_name,
						strval(number_format($row['summary']->international,2)), 
						strval(number_format($row['summary']->mobile,2)),
						strval(number_format($row['summary']->local,2)), 
						strval(number_format($row['summary']->national,2)), 
						strval(number_format($row['summary']->total,2)) );
					$sheet->row($row_num, $row_1);
					$row_num+=2;
					if (!empty($row['detail'])) {

						$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
							$cell->setFontColor('#ffffff');
							$cell->setBackground('#6aa9e8');
						});
						$table_header1 = array('Section', 'International', 'Mobile', 'Local', 'National', 'Total');
						$sheet->row($row_num, $table_header1);
						$row_num++;
						foreach ($row['detail'] as $key1 => $row1){

							if (!empty($row1['summary'])) {
								$row_2 = array(
									$row1['summary']->section, 
									strval(number_format($row1['summary']->international,2)), 
									strval(number_format($row1['summary']->mobile,2)),
									strval(number_format($row1['summary']->local,2)), 
									strval(number_format($row1['summary']->national,2)), 
									strval(number_format($row1['summary']->totalcharge,2)));
								$sheet->row($row_num, $row_2);
								$row_num++;
							}
						}
						$row_num+=2;
					}
				}
			}
			$row_num++;
			foreach ($data['department_dept_section_extension'] as $key => $row)
			{
				if (!empty($row['detail'])) {
					$row_num += 2;
					$sheet->mergeCells('A' . $row_num . ':B' . $row_num);
					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue("Department: ".$row['summary']->depart_name);
					});
					$row_num++;
					foreach ($row['detail'] as $key1 => $row1){
						$sheet->mergeCells('A' . $row_num . ':B' . $row_num);
						$sheet->cell('A' . $row_num, function ($cell) use ($row1) {
							$cell->setValue("Section: ".$row1['summary']->section);
						});
						$row_num++;
						$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
							$cell->setFontColor('#ffffff');
							$cell->setBackground('#2c3e50');
						});
						$table_header = array('Extension', 'User', 'Call Date', 'Call Time', 'Duration', 'Dialled Number' ,'Destination',
							'Call Cost ('.$data['currency'].')','Classification','Status','Comments');
						$sheet->row($row_num, $table_header);
						$row_num++;
						$count = 0 ;
						foreach ($row1['detail'] as $key2 => $row2) {
							$row_2 = array(
								strval($row2['detail']->extension), 
								$row2['detail']->user, 
								$row2['detail']->call_date,
								($row2['detail']->calltime), 
								strval($row2['detail']->duration), 
								strval($row2['detail']->dialednumber),
								strval($row2['detail']->destination), 
								strval(number_format($row2['detail']->callcost,2)), 
								strval($row2['detail']->classify),
								$row2['detail']->status, 
								$row2['detail']->comment);
							$sheet->row($row_num, $row_2);
							$row_num++;
							$count++;
						}
						$row_num +=2;
						$sheet->mergeCells('A' . $row_num . ':B' . $row_num);
						$sheet->cell('A' . $row_num, function ($cell) use ($row1,$data) {
							$cell->setValue("Call Cost(".$data['currency'].") : ".number_format($row1['summary']->totalcharge,2));
						});
						$row_num +=2;
					}
				}
			}

			$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#0f0f0f');
			});

			$table_header = array(' ', 'International', 'Mobile', 'Local', 'National', 'Total' );
			$sheet->row($row_num, $table_header);
			$row_num ++;
			$row_3 = array(
				strval($data['department_dept_section_extension_all_calls']->calls), 
				strval($data['department_dept_section_extension_all_calls']->international),
				strval($data['department_dept_section_extension_all_calls']->mobile), 
				strval($data['department_dept_section_extension_all_calls']->local),
				strval($data['department_dept_section_extension_all_calls']->national), 
				strval($data['department_dept_section_extension_all_calls']->total));
			$sheet->row($row_num, $row_3);
			$row_num++;
			$row_4 = array(
				strval($data['department_dept_section_extension_all_duration']->duration), 
				strval($data['department_dept_section_extension_all_duration']->international),
				strval($data['department_dept_section_extension_all_duration']->mobile), 
				strval($data['department_dept_section_extension_all_duration']->local),
				strval($data['department_dept_section_extension_all_duration']->national), 
				strval($data['department_dept_section_extension_all_duration']->total));
			$sheet->row($row_num, $row_4);
			$row_num++;
			$row_5 = array(
				strval($data['department_dept_section_extension_all_callcost']->callcost), 
				strval(number_format($data['department_dept_section_extension_all_callcost']->international,2)),
				strval(number_format($data['department_dept_section_extension_all_callcost']->mobile,2)), 
				strval(number_format($data['department_dept_section_extension_all_callcost']->local,2)),
				strval(number_format($data['department_dept_section_extension_all_callcost']->national,2)), 
				strval(number_format($data['department_dept_section_extension_all_callcost']->total,2)));
			$sheet->row($row_num, $row_5);
			$row_num++;
		}
		return $row_num;
	}


	private function outputDestinationCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('B' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by Destination');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Destination');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;

		if( $data['report_type'] == 'Summary') {


		}

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['destination_extension'] as $key => $row) {
				if (!empty($row['detail'])) {

					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue('Destination : ' . $row['name']);
					});
					$row_num++;

					$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});
					$table_header = array('Extension', 'User', 'Call Date', 'Call Time', 'Duration', 'Dialled Number','Call Cost ('.$data['currency'].')',
						'Status','Comments');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$count = 0;
					if (!empty($row['detail'])) {
						foreach ($row['detail'] as $key1 => $row1){
								$row2 = array(
									strval($row1->extension), $row1->user, 
									strval($row1->call_date), strval($row1->calltime), strval($row1->duration),
									strval($row1->dialednumber), 
									strval(number_format($row1->callcost,2)), $row1->status,$row1->comment );
								$sheet->row($row_num, $row2);
								$row_num++;
							$count++;
						}
						$row = array('Total Calls :'.$count, 'Call Cost('.$data['currency'].') :'.number_format($row['total']->totalcharge,2) );
						$sheet->row($row_num, $row);
						$row_num++;
               		}
				}
			}
			$row_num+=2;

			$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#0f0f0f');
			});

			$table_header = array(' ', 'International', 'Mobile', 'Local', 'National', 'Total' );
			$sheet->row($row_num, $table_header);
			$row_num ++;
			$row_3 = array(
				strval($data['destination_extension_all_calls']->calls), strval($data['destination_extension_all_calls']->international),
				strval($data['destination_extension_all_calls']->mobile), strval($data['destination_extension_all_calls']->local),
				strval($data['destination_extension_all_calls']->national), strval($data['destination_extension_all_calls']->total));
			$sheet->row($row_num, $row_3);
			$row_num++;
			$row_4 = array(
				strval($data['destination_extension_all_duration']->duration), strval($data['destination_extension_all_duration']->international),
				strval($data['destination_extension_all_duration']->mobile), strval($data['destination_extension_all_duration']->local),
				strval($data['destination_extension_all_duration']->national), strval($data['destination_extension_all_duration']->total));
			$sheet->row($row_num, $row_4);
			$row_num++;
			$row_5 = array(
				strval($data['destination_extension_all_callcost']->callcost), 
				strval(number_format($data['destination_extension_all_callcost']->international,2)),
				strval(number_format($data['destination_extension_all_callcost']->mobile,2)), strval(number_format($data['destination_extension_all_callcost']->local,2)),
				strval(number_format($data['destination_extension_all_callcost']->national,2)), strval(number_format($data['destination_extension_all_callcost']->total,2)));
			$sheet->row($row_num, $row_5);
			$row_num++;
			}
		return $row_num;
	}

	private function outputExtensionCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('B' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by Extension');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Extension');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;
		$origin_extension = '';
		$count = 0;
		$de_approvedcall = 0;
		$de_approvedcharge = 0;
		$de_unapprovedcount = 0;
		$de_unapprovedcharge = 0;
		$de_awaitingcount = 0;
		$de_awaitingcharge = 0;
		$de_unmarkedcount = 0;
		$de_unmarkedcharge = 0;
		$de_totalcount = 0;
		$de_totalcharge = 0;

		$all_approvedcall = 0;
		$all_approvedcharge = 0;
		$all_unapprovedcount = 0;
		$all_unapprovedcharge = 0;
		$all_awaitingcount = 0;
		$all_awaitingcharge = 0;
		$all_unmarkedcount = 0;
		$all_unmarkedcharge = 0;
		$all_totalcount = 0;
		$all_totalcharge = 0;
		$summay_maxcount = 0;
		if(!empty($data['summary'])) $summay_maxcount = count($data['summary']);
		if( $data['report_type'] == 'Summary') {
			foreach ($data['summary'] as $key => $row) {
				if ($origin_extension != $row->extension) {
					if ($count != 0) {
						$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
							$cell->setFontColor('#000000');
							$cell->setBackground('#D3D3D3');
						});
						$table_header = array(' ', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
							'Total Calls');
						$sheet->row($row_num, $table_header);
						$row_num++;
						$row_1 = array(
							'Total', $de_approvedcall . '/' . number_format($de_approvedcharge,2), 
							$de_unapprovedcount . '/' . number_format($de_unapprovedcharge,2),
							$de_awaitingcount . '/' . number_format($de_awaitingcharge,2), 
							$de_unmarkedcount . '/' . number_format($de_unmarkedcharge,2), 
							$de_totalcount . '/' . number_format($de_totalcharge,2));
						$sheet->row($row_num, $row_1);
						$row_num++;

						$all_approvedcall += $de_approvedcall;
						$all_approvedcharge += $de_approvedcharge;
						$all_unapprovedcount += $de_unapprovedcount;
						$all_unapprovedcharge += $de_unapprovedcharge;
						$all_awaitingcount += $de_awaitingcount;
						$all_awaitingcharge += $de_awaitingcharge;
						$all_unmarkedcount += $de_unmarkedcount;
						$all_unmarkedcharge += $de_unmarkedcharge;
						$all_totalcount += $de_totalcount;
						$all_totalcharge += $de_totalcharge;

						$de_approvedcall = 0;
						$de_approvedcharge = 0;
						$de_unapprovedcount = 0;
						$de_unapprovedcharge = 0;
						$de_awaitingcount = 0;
						$de_awaitingcharge = 0;
						$de_unmarkedcount = 0;
						$de_unmarkedcharge = 0;
						$de_totalcount = 0;
						$de_totalcharge = 0;

					}
					$row_num++;
					$sheet->mergeCells('A' . $row_num . ':B' . $row_num);
					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue('Extension : ' . $row->extension);
					});
					$row_num++;
					$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Call Date', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
						'Total Calls');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$row_1 = array(
						$row->call_date, 
						$row->approvedcount . '/' . number_format($row->approvedcharge,2), 
						$row->unapprovedcount . '/' . number_format($row->unapprovedcharge,2),
						$row->awaitingcount . '/' . number_format($row->awaitingcharge,2), 
						$row->unmarkedcount . '/' . number_format($row->unmarkedcharge,2), 
						$row->totalcount . '/' . number_format($row->totalcharge,2));
					$sheet->row($row_num, $row_1);
					$row_num++;
					$de_approvedcall += $row->approvedcount;
					$de_approvedcharge += $row->approvedcharge;
					$de_unapprovedcount += $row->unapprovedcount;
					$de_unapprovedcharge += $row->unapprovedcharge;
					$de_awaitingcount += $row->awaitingcount;
					$de_awaitingcharge += $row->awaitingcharge;
					$de_unmarkedcount += $row->unmarkedcount;
					$de_unmarkedcharge += $row->unmarkedcharge;
					$de_totalcount += $row->totalcount;
					$de_totalcharge += $row->totalcharge;
				} else {
					$row_num++;
					$row_1 = array(
						$row->call_date, $row->approvedcount . '/' . number_format($row->approvedcharge,2), 
						$row->unapprovedcount . '/' . number_format($row->unapprovedcharge,2),
										$row->awaitingcount . '/' . number_format($row->awaitingcharge,2), 
										$row->unmarkedcount . '/' . number_format($row->unmarkedcharge,2), 
										$row->totalcount . '/' . number_format($row->totalcharge,2));
					$sheet->row($row_num, $row_1);
					$row_num++;
					$de_approvedcall += $row->approvedcount;
					$de_approvedcharge += $row->approvedcharge;
					$de_unapprovedcount += $row->unapprovedcount;
					$de_unapprovedcharge += $row->unapprovedcharge;
					$de_awaitingcount += $row->awaitingcount;
					$de_awaitingcharge += $row->awaitingcharge;
					$de_unmarkedcount += $row->unmarkedcount;
					$de_unmarkedcharge += $row->unmarkedcharge;
					$de_totalcount += $row->totalcount;
					$de_totalcharge += $row->totalcharge;
					if (($summay_maxcount - 1) == $count) {
						$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
							$cell->setFontColor('#000000');
							$cell->setBackground('#D3D3D3');
						});
						$table_header = array('Extension', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
							'Total Calls');
						$sheet->row($row_num, $table_header);
						$row_num++;
						$row_2 = array(
							"Total", $de_approvedcall . '/' . number_format($de_approvedcharge,2), 
							$de_unapprovedcount . '/' . number_format($de_unapprovedcharge,2),
							$de_awaitingcount . '/' . number_format($de_awaitingcharge,2), 
							$de_unmarkedcount . '/' . number_format($de_unmarkedcharge,2), 
							$de_totalcount . '/' . number_format($de_totalcharge,2));
						$sheet->row($row_num, $row_2);
					}
				}
				$origin_extension = $row->extension;
				$count++;
			}
			$row_num++;
			$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
				$cell->setFontColor('#000000');
				$cell->setBackground('#D3D3D3');
			});
			$table_header = array(' ', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge', 'Unmarked(Call)/Charge',
				'Total Calls');
			$sheet->row($row_num, $table_header);
			$row_num++;
			$row_all = array(
				"Grand Total", $all_approvedcall . '/' . number_format($all_approvedcharge,2), 
				$all_unapprovedcount . '/' . number_format($all_unapprovedcharge,2),
				$all_awaitingcount . '/' . number_format($all_awaitingcharge,2), 
				$all_unmarkedcount . '/' . number_format($all_unmarkedcharge,2), 
				$all_totalcount . '/' . number_format($all_totalcharge,2));
			$sheet->row($row_num, $row_all);

		}

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['extension'] as $key => $row) {
				if (!empty($row['detail'])) {

					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue($row['name']);
					});
					$row_num++;

					$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});
					$table_header = array('Call Date', 'Call Time', 'Duration', 'Dialled Number', 'Destination', 'Call Type','Call Cost ('.$data['currency'].')',
						'Status','Comments');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$count = 0;
					if (!empty($row['detail'])) {
						foreach ($row['detail'] as $key1 => $row1){
							$row2 = array(
								$row1->call_date, strval($row1->calltime), strval($row1->duration), strval($row1->dialednumber), $row1->dest_name,
								$row1->call_type, strval(number_format($row1->callcost,2)), $row1->status,$row1->comment );
							$sheet->row($row_num, $row2);
							$row_num++;
							$count++;
						}
						$row = array('Total Calls :'.$count, 'Call Cost('.$data['currency'].') :'.number_format($row['total']->totalcharge,2) );
						$sheet->row($row_num, $row);
						$row_num += 2;
					}
				}
			}
			$row_num+=2;

			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#0f0f0f');
			});

			$table_header = array(' ', 'International', 'Mobile', 'Local', 'National', 'Internal','Total' );
			$sheet->row($row_num, $table_header);
			$row_num ++;
			$row_3 = array(
				strval($data['extension_all_calls']->calls), strval($data['extension_all_calls']->international),
				strval($data['extension_all_calls']->mobile), strval($data['extension_all_calls']->local),
				strval($data['extension_all_calls']->national), strval($data['extension_all_calls']->total));
			$sheet->row($row_num, $row_3);
			$row_num++;
			$row_4 = array(
				strval($data['extension_all_duration']->duration), strval($data['extension_all_duration']->international),
				strval($data['extension_all_duration']->mobile), strval($data['extension_all_duration']->local),
				strval($data['extension_all_duration']->national), strval($data['extension_all_duration']->total));
			$sheet->row($row_num, $row_4);
			$row_num++;
			$row_5 = array(
				strval($data['extension_all_callcost']->callcost), strval(number_format($data['extension_all_callcost']->international,2)),
				strval(number_format($data['extension_all_callcost']->mobile,2)), strval(number_format($data['extension_all_callcost']->local,2)),
				strval(number_format($data['extension_all_callcost']->national,2)), strval(number_format($data['extension_all_callcost']->total,2)));
			$sheet->row($row_num, $row_5);
			$row_num++;
		}
		return $row_num;
	}
	private function outputMobileCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('B' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by Mobile');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Mobile');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;

		if( $data['report_type'] == 'Summary') {
			foreach ($data['mobile'] as $key => $row) {
				if (!empty($row['detail'])){

					$row_num++;
					$sheet->mergeCells('A' . $row_num . ':B' . $row_num);
					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue($row['name']);
					});
					$row_num++;
					$sheet->mergeCells('A' . $row_num . ':C' . $row_num);
					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$sheet->mergeCells('D' . $row_num . ':F' . $row_num);
					$sheet->cell('D' . $row_num, function ($cell) use ($row) {
						$cell->setValue('Business');
						$cell->setAlignment('center');
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$sheet->mergeCells('G' . $row_num . ':G' . $row_num);
					$sheet->cell('G' . $row_num, function ($cell) use ($row) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$row_num++;
					$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Mobile', 'Unmarked(Call)/Charge', 'Personal(Call)/Chanrge', 'Approved(Call)/Charge', 'Rejected(Call)/Charge', 'Awaiting(Call)/Charge',
						'Total Calls');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$de_approvedcall = 0;
					$de_approvedcharge = 0;
					$de_unapprovedcount = 0;
					$de_unapprovedcharge = 0;
					$de_awaitingcount = 0;
					$de_awaitingcharge = 0;
					$de_unmarkedcount = 0;
					$de_unmarkedcharge = 0;
					$de_personalcount = 0;
					$de_personalcharge = 0;
					$de_totalcount = 0;
					$de_totalcharge = 0;
					foreach ($row['detail'] as $row2){

					$row_total = $row2->unmarkedcount + $row2->personalcount + $row2->approvedcount + $row2->awaitingcount + $row2->unapprovedcount;
					$row_totalcharge = $row2->personalcharge + $row2->approvedcharge + $row2->unapprovedcharge + $row2->awaitingcharge + $row2->unmarkedcharge;
					$row_1 = array(
						$row2->call_from .'-'. $row2->user,
						$row2->unmarkedcount . '/' . number_format($row2->unmarkedcharge,2),
						$row2->personalcount . '/' . number_format($row2->personalcharge,2),
						 $row2->approvedcount . '/' . number_format($row2->approvedcharge,2), 
						 $row2->unapprovedcount . '/' . number_format($row2->unapprovedcharge,2),
						$row2->awaitingcount . '/' . number_format($row2->awaitingcharge,2),  
						$row_total . '/' . number_format($row_totalcharge,2));
					$sheet->row($row_num, $row_1);
					$row_num++;
					$de_approvedcall += $row2->approvedcount;
					$de_approvedcharge += $row2->approvedcharge;
					$de_unapprovedcount += $row2->unapprovedcount;
					$de_unapprovedcharge += $row2->unapprovedcharge;
					$de_awaitingcount += $row2->awaitingcount;
					$de_awaitingcharge += $row2->awaitingcharge;
					$de_unmarkedcount += $row2->unmarkedcount;
					$de_unmarkedcharge += $row2->unmarkedcharge;
					$de_personalcount += $row2->personalcount;
					$de_personalcharge += $row2->personalcharge;
					$de_totalcount += $row_total;
					$de_totalcharge += $row_totalcharge;
					}
					$row_num++;
					$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
						$cell->setFontColor('#000000');
						$cell->setBackground('#b2beb5');
					});

				$row_all = array(
				"Total",$de_unmarkedcount . '/' . number_format($de_unmarkedcharge,2), 
				$de_personalcount . '/' . number_format($de_personalcharge,2), 
				$de_approvedcall . '/' . number_format($de_approvedcharge,2), 
				$de_unapprovedcount . '/' . number_format($de_unapprovedcharge,2),
				$de_awaitingcount . '/' . number_format($de_awaitingcharge,2),  
				$de_totalcount . '/' . number_format($de_totalcharge,2));
				$sheet->row($row_num, $row_all);
				$row_num++;
			}
		}

		}

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['extension'] as $key => $datagroup) {


					$sheet->cell('A' . $row_num, function ($cell) use ($data,$key) {
						$cell->setValue($data['group_by_mobile_call'] . ' : ' . $key);
					});
					$row_num++;

					$sheet->cell('A' . $row_num . ':L' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});
					$table_header = array('Call Date', 'Call Time', 'Duration', 'Dialled Number','Department','User', 'Mobile Number', 'Destination', 'Call Type','Call Cost ('.$data['currency'].')',
						'Status','Comments');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$totalcount = 0;
					$totalcharge = 0;

						foreach ($datagroup as $row1){
							$row2 = array(
								$row1->date, 
								strval($row1->calltime), 
								strval($row1->duration), 
								strval($row1->dialednumber),
								$row1->department,
								$row1->user,
								strval($row1->call_from), 
								$row1->dest_name,
								$row1->call_type, 
								strval(number_format($row1->callcost,2)), 
								$row1->status,$row1->comment );
							$sheet->row($row_num, $row2);
							$row_num++;
							$totalcount++;
							$totalcharge += $row1->callcost;
						}
						$row = array('Total Calls :'.$totalcount, 'Call Cost('.$data['currency'].') :'.number_format($totalcharge,2) );
						$sheet->row($row_num, $row);
						$row_num += 2;


			}
			$row_num+=2;

			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#0f0f0f');
			});

			$table_header = array(' ', 'International', 'Mobile', 'Local', 'National', 'Internal','Total' );
			$sheet->row($row_num, $table_header);
			$row_num ++;
			$row_3 = array(
				strval($data['extension_all_calls']->calls), strval($data['extension_all_calls']->international),
				strval($data['extension_all_calls']->mobile), strval($data['extension_all_calls']->local),
				strval($data['extension_all_calls']->national), strval($data['extension_all_calls']->total));
			$sheet->row($row_num, $row_3);
			$row_num++;
			$row_4 = array(
				strval($data['extension_all_duration']->duration), strval($data['extension_all_duration']->international),
				strval($data['extension_all_duration']->mobile), strval($data['extension_all_duration']->local),
				strval($data['extension_all_duration']->national), strval($data['extension_all_duration']->total));
			$sheet->row($row_num, $row_4);
			$row_num++;
			$row_5 = array(
				strval($data['extension_all_callcost']->callcost), strval(number_format($data['extension_all_callcost']->international,2)),
				strval(number_format($data['extension_all_callcost']->mobile,2)), strval(number_format($data['extension_all_callcost']->local,2)),
				strval(number_format($data['extension_all_callcost']->national,2)), strval(number_format($data['extension_all_callcost']->total,2)));
			$sheet->row($row_num, $row_5);
			$row_num++;
		}
		return $row_num;
	}

	private function outputUserCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('B' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Summary Report by User');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by User');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;

		if( $data['report_type'] == 'Summary') {


		}

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['user'] as $key => $row) {
				if (!empty($row['detail'])) {

					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue($row['name']);
					});
					$row_num++;

					$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});
					$table_header = array('Extension', 'Call Date', 'Call Time', 'Duration', 'Dialled Number', 'Destination','Call Cost ('.$data['currency'].')',
						'Status','Comments');
					$sheet->row($row_num, $table_header);
					$row_num++;
					$count = 0;
					if (!empty($row['detail'])) {
						foreach ($row['detail'] as $key1 => $row1){
							$row2 = array(
								strval($row1->extension), strval($row1->call_date), strval($row1->calltime), strval($row1->duration), strval($row1->dialednumber),
								$row1->dest_name, strval(number_format($row1->callcost,2)), $row1->status,$row1->comment );
							$sheet->row($row_num, $row2);
							$row_num++;
							$count++;
						}
						$row = array('Total Calls :'.$count, 'Call Cost('.$data['currency'].') :'.number_format($row['total']->totalcharge,2) );
						$sheet->row($row_num, $row);
						$row_num += 2;
					}
				}
			}
			$row_num+=2;

			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#0f0f0f');
			});

			$table_header = array(' ', 'International', 'Mobile', 'Local', 'National', 'Internal','Total' );
			$sheet->row($row_num, $table_header);
			$row_num ++;
			$row_3 = array(
				strval($data['extension_all_calls']->calls), strval($data['extension_all_calls']->international),
				strval($data['extension_all_calls']->mobile), strval($data['extension_all_calls']->local),
				strval($data['extension_all_calls']->national), strval($data['extension_all_calls']->total));
			$sheet->row($row_num, $row_3);
			$row_num++;
			$row_4 = array(
				strval($data['extension_all_duration']->duration), strval($data['extension_all_duration']->international),
				strval($data['extension_all_duration']->mobile), strval($data['extension_all_duration']->local),
				strval($data['extension_all_duration']->national), strval($data['extension_all_duration']->total));
			$sheet->row($row_num, $row_4);
			$row_num++;
			$row_5 = array(
				strval($data['extension_all_callcost']->callcost),strval(number_format($data['extension_all_callcost']->international,2)),
				strval(number_format($data['extension_all_callcost']->mobile,2)), strval(number_format($data['extension_all_callcost']->local,2)),
				strval(number_format($data['extension_all_callcost']->national,2)), strval(number_format($data['extension_all_callcost']->total,2)));
			$sheet->row($row_num, $row_5);
			$row_num++;
		}
		return $row_num;
	}

	private function outputComparisonCallclassifyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('B' . $row_num . ':E' . $row_num);
		if($title == 'Detailed') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Detailed Report by Comparison');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;

		if($data['filter_by'] == 'Mobile') {
			foreach ($data['summary'] as $key => $monthgroup) {

					$month = date("F", mktime(0, 0, 0, $key, 10));
					if(!empty($monthgroup['detail'])){
					$sheet->cell('A' . $row_num, function ($cell) use ($month) {
						$cell->setValue($month);
						$cell->setFont(array(
							'bold' => true
						));
					});
					$row_num++;
					foreach ($monthgroup['detail'] as  $dept_key => $dept_group){
						$sheet->cell('A' . $row_num, function ($cell) use ($dept_key) {
							$cell->setValue($dept_key);
							$cell->setFont(array(
								'bold' => true
							));
						});
						$row_num++;
					$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});
					$table_header = array('Number', 'User', 'Total Calls', 'Total Cost', 'Unclassified', 'Personal','Business');
					$sheet->row($row_num, $table_header);
					$row_num++;
					//$count = 0;

						foreach ($dept_group['mobile'] as  $row1){
							$row2 = array(
								strval($row1->extension), $row1->user, strval($row1->totalcount), 
								strval(number_format($row1->totalcost,2)),strval(number_format($row1->unclassify,2)),
								strval(number_format($row1->personal,2)),strval(number_format($row1->business,2)));
							$sheet->row($row_num, $row2);
							$row_num++;
							//$count++;
						}

					}
				}
			}
			$row_num+=2;
		}
		if ($data['filter_by'] == 'Extension') {
			foreach ($data['summary'] as $key => $row) {

					$month = date("F", mktime(0, 0, 0, $row['name'], 10));

					$sheet->cell('A' . $row_num, function ($cell) use ($row,$month) {
						$cell->setValue($month);
						$cell->setFont(array(
							'bold' => true
						));
					});
					$row_num++;

					$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});
					$table_header = array('Number', 'User', 'Total Calls', 'Total Cost', 'Unclassified', 'Personal','Business');
					$sheet->row($row_num, $table_header);
					$row_num++;
					//$count = 0;
					if (!empty($row['detail'])) {
						foreach ($row['detail'] as $key1 => $row1){
							$row2 = array(
								strval($row1->extension), $row1->user, 
								strval($row1->totalcount), 
								strval(number_format($row1->totalcost,2)),strval(number_format($row1->unclassify,2)),
								strval(number_format($row1->personal,2)),strval(number_format($row1->business,2)));
							$sheet->row($row_num, $row2);
							$row_num++;
							//$count++;
						}
					}

			}
			$row_num+=2;
		}
		if($data['filter_by'] == 'All') {
			foreach ($data['summary'] as $key => $row) {

					$month = date("F", mktime(0, 0, 0, $row['name'], 10));

					$sheet->cell('A' . $row_num, function ($cell) use ($row,$month) {
						$cell->setValue($month);
						$cell->setFont(array(
							'bold' => true
						));
					});
					$row_num++;

					$sheet->mergeCells('A' . $row_num . ':G' . $row_num);

					$sheet->cell('A' . $row_num, function ($cell) {
								$cell->setValue('LandLine');
								$cell->setAlignment('center');
								$cell->setFontColor('#ffffff');
								$cell->setBackground('#0f0f0f');
								$cell->setFont(array(
									'bold' => true
								));

					});
					$row_num++;
					$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});

					$table_header = array('Number', 'User', 'Total Calls', 'Total Cost', 'Unclassified', 'Personal','Business');
					$sheet->row($row_num, $table_header);
					$row_num++;
					//$count = 0;
					if (!empty($row['detail'])) {
						foreach ($row['detail'] as $key1 => $row1){
							$row2 = array(
								strval($row1->extension), $row1->user, 
								strval($row1->totalcount), 
								strval(number_format($row1->totalcost,2)),strval(number_format($row1->unclassify,2)),
								strval(number_format($row1->personal,2)),strval(number_format($row1->business,2)));
							$sheet->row($row_num, $row2);
							$row_num++;
							//$count++;
						}
					}

			}
			$row_num++;
			foreach ($data['sum'] as $key => $row) {
				$sheet->mergeCells('A' . $row_num . ':G' . $row_num);

					$sheet->cell('A' . $row_num, function ($cell) {
								$cell->setValue('Mobile');
								$cell->setAlignment('center');
								$cell->setFontColor('#ffffff');
								$cell->setBackground('#0f0f0f');
								$cell->setFont(array(
									'bold' => true
								));

					});
					$row_num++;

				$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#0f0f0f');
				});
				$table_header = array('Number', 'User', 'Total Calls', 'Total Cost', 'Unclassified', 'Personal','Business');
				$sheet->row($row_num, $table_header);
				$row_num++;
				//$count = 0;
				if (!empty($row['detail'])) {
					foreach ($row['detail'] as $key1 => $row2){
						$row2 = array(
							strval($row2->extension), $row2->user, 
							strval($row2->totalcount), 
							strval(number_format($row2->totalcost,2)),strval(number_format($row2->unclassify,2)),
							strval(number_format($row2->personal,2)),strval(number_format($row2->business,2)));
						$sheet->row($row_num, $row2);
						$row_num++;
						//$count++;
					}
				}

		}
		$row_num+=2;
		}
		if(($data['filter_by'] == 'User') || ($data['filter_by'] == 'Department')) {
			foreach ($data['summary'] as $key => $user_group) {
				if(!empty($user_group->month_details)){
					if ($data['filter_by'] == 'User'){
					$sheet->cell('A' . $row_num, function ($cell) use ($user_group) {
						$cell->setValue($user_group->user);
						$cell->setFontColor('#FF0000');
						$cell->setFont(array(
							'bold' => true
						));
					});
					}else{
						$sheet->cell('A' . $row_num, function ($cell) use ($user_group) {
						$cell->setValue($user_group->department);
						$cell->setFontColor('#FF0000');
						$cell->setFont(array(
							'bold' => true
						));
					});
					}
					$row_num++;
				foreach ($user_group->month_details as  $month_name => $month_group){

					$month = date("F", mktime(0, 0, 0, $month_name, 10));

					$sheet->cell('A' . $row_num, function ($cell) use ($month_group,$month) {
						$cell->setValue($month);
						$cell->setFont(array(
							'bold' => true
						));
					});
					$row_num++;

					$sheet->mergeCells('A' . $row_num . ':F' . $row_num);

					$sheet->cell('A' . $row_num, function ($cell) {
								$cell->setValue('LandLine');
								$cell->setAlignment('center');
								$cell->setFontColor('#ffffff');
								$cell->setBackground('#0f0f0f');
								$cell->setFont(array(
									'bold' => true
								));

					});
					$row_num++;
					$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});

					$table_header = array('Number', 'Total Calls', 'Total Cost', 'Unclassified', 'Personal','Business');
					$sheet->row($row_num, $table_header);
					$row_num++;


					foreach ($month_group as $row1){

					if (!empty($row1['extinform1'])) {
							$row2 = array(
								strval($row1['extinform1']->extension), 
								strval($row1['extinform1']->totalcount), 
								strval(number_format($row1['extinform1']->totalcost,2)),strval(number_format($row1['extinform1']->unclassify,2)),
								strval(number_format($row1['extinform1']->personal,2)),strval(number_format($row1['extinform1']->business,2)));
							$sheet->row($row_num, $row2);
							$row_num++;

						}


					}
					$row_num++;
					if (!empty($month_group)) {
					$sheet->mergeCells('A' . $row_num . ':F' . $row_num);

					$sheet->cell('A' . $row_num, function ($cell) {
								$cell->setValue('Mobile');
								$cell->setAlignment('center');
								$cell->setFontColor('#ffffff');
								$cell->setBackground('#0f0f0f');
								$cell->setFont(array(
									'bold' => true
								));

					});
					$row_num++;
					$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#0f0f0f');
					});

					$table_header = array('Number', 'Total Calls', 'Total Cost', 'Unclassified', 'Personal','Business');
					$sheet->row($row_num, $table_header);
					$row_num++;
					}
					foreach ($month_group as $row1){

					if (!empty($row1['mobileinform'])) {
							$row2 = array(
								strval($row1['mobileinform']->caller),
								strval($row1['mobileinform']->totalcount1), 
								strval(number_format($row1['mobileinform']->totalcost1,2)),strval(number_format($row1['mobileinform']->unclassify1,2)),
								strval(number_format($row1['mobileinform']->personal1,2)),strval(number_format($row1['mobileinform']->business1,2)));
							$sheet->row($row_num, $row2);
							$row_num++;

						}

					}
					$row_num++;

				}
			}
			//$row_num++;

		$row_num++;
		}
	}
		return $row_num;
	}

	private function outputAgentCallcenterReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Agent Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Agent Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num += 2;
		if( $data['report_type'] == 'Summary') {
			$sheet->cell('A' . $row_num . ':L' . $row_num, function ($cell) {
				//$cell->setFontColor('#ffffff');
				//$cell->setBackground('#2c3e50');
			});
			$table_header = array('Answered', 'Abandoned', 'Missed','Outgoing', 'Dropped', 'Callback', 'Total Calls', 'Peak Hour', 'Time to Answer', 'Avg Talk Time', 'Agent Utilization %', 'Call Answered %');
			$sheet->row($row_num, $table_header);
			$row_num++;

			$date_val = '' ;
			$row = array(
				strval($data['answered']),strval($data['abandoned']), strval($data['missed']),
				strval($data['outgoing']),strval($data['dropped']),strval($data['callback']),strval($data['totalcall']));
			$sheet->row($row_num, $row);
			}
			$row_num++;
			$row_num++;
			$sheet->cell('A' . $row_num . ':N' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('Agent', 'Answered', 'Abandoned', 'Callback','Outgoing', 'Dropped', 'Available', 'Idle', 'Busy', 'Wrap Up',
				'On Break','Online','Total on time on call','Ave TTA');
			$sheet->row($row_num, $table_header);
			$row_num++;
			foreach ($data['summary'] as $key => $row) {
				if(!empty($row->userinform1->tta)){
				$row = array(
					strval($row->agent), strval($row->userinform1->answered), strval($row->userinform1->abandoned), 
					strval($row->userinform1->callback), strval($row->userinform1->outgoing), strval($row->userinform1->dropped),
					strval($row->historyinform->available),strval($row->historyinform->idle),strval($row->historyinform->busy), strval($row->historyinform->wrapup),
					strval($row->historyinform->onbreak), strval($row->historyinform->online), strval($row->userinform1->totaltime),strval($row->userinform1->tta));
				$sheet->row($row_num, $row);
				$row_num++;
			}
			}
			$row = array(
				strval($data['total']), strval($data['answered']), strval($data['abandoned']), 
				strval($data['callback']),strval($data['outgoing']),strval($data['dropped']), strval($data['available']),
				strval($data['idle']),strval($data['busy']), strval($data['wrapup']),strval($data['onbreak']), strval($data['online']),
				strval($data['totaltime']),strval($data['tta']));
			$sheet->row($row_num, $row);
			$row_num++;
			$row_num++;


		if( $data['report_type'] == 'Detailed') {


			$date_val = '';
		foreach ($data['summary_hour'] as $key => $row) {
			$hr= $row->hour;
			if($date_val != $row->date) {
				$date_val = $row->date;
				$row = array($row->date);
				$sheet->row($row_num, $row);
				$row_num += 2;

				$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');
				});
				$table_header = array('Per Hour', 'Answered', 'Abandoned', 'Callback', 'Missed');
				$sheet->row($row_num, $table_header);
				$row_num++;
			if((!empty($row->dateform1)))
			{
				foreach ($row->dateform1 as $key1 => $row1) {
					$row2 = array(
						$row->hour, $row1->answered, $row1->abandoned, $row1->callback, $row1->missed);
					$sheet->row($row_num, $row2);
					$row_num++;
				}
			}
			else{
				$row2 = array(
					$hr, 0, 0, 0, 0);
				$sheet->row($row_num, $row2);
				$row_num++;
			}
			}else {
				if((!empty($row->dateform1)))
			{
				foreach ($row->dateform1 as $key1 => $row1) {
					$row = array(
						$row->hour, $row1->answered, $row1->abandoned, $row1->callback, $row1->missed);
					$sheet->row($row_num, $row);
					$row_num++;
				}
			}
			else
			{
				$row = array(
					$row->hour, 0, 0, 0, 0);
				$sheet->row($row_num, $row);
				$row_num++;
			}
			}
		}

		
		$row = array(
			$data['total_hour'], $data['answered_hour'], $data['abandoned_hour'], $data['callback_hour'],$data['missed_hour']);
		$sheet->row($row_num, $row);
		$row_num +=2;









			foreach ($data['detailed'] as $key => $row) {
				$row_num++;
				if(!empty($row->userinform)) {
				$row_v = array($row->agent);
				$sheet->row($row_num, $row_v);
				$row_num++;
				$date_val = '' ;
				
					$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Time', 'Caller ID', 'Origin', 'Call Type', 'Channel','Type', 'Taken By', 'Status', 'Duration', 'TTA',
						'Time on queue');
					$sheet->row($row_num, $table_header);
					$row_num++;

					foreach ($row->userinform as $key1 => $row1) {
						$time = '';
						if ($date_val != $row1->date) {
							$time = $row1->date . " " . $row1->time;
							$date_val = $row1->date;
						} else {
							$time ="                     ".$row1->time;
						}
						if ($row1->callback_flag==2 || $row1->missed_flag==2 || $row1->abandon_flag==2){
							$agent = $row1->agent_taken;
						}
						else{
							$agent = " ";
						}

						$row_v1 = array(
							$time, strval($row1->callerid), strval($row1->origin), $row1->calltype, strval($row1->channel),$row1->type,$agent, $row1->status,
							strval($row1->duration), strval($row1->tta), strval($row1->queue));
						$sheet->row($row_num, $row_v1);
						$row_num++;
					}
				}

			}
			if(!empty($data['noagent'])) {
				$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');
				});
				$table_header = array('Time', 'Caller ID', 'Origin', 'Call Type', 'Channel','Type', 'Taken By', 'Status', 'Duration', 'TTA',
					'Time on queue');
				$sheet->row($row_num, $table_header);
				$row_num++;

				foreach ($data['noagent'] as $key1 => $row1) {
					$time = '';
					if ($date_val != $row1->date) {
						$time = $row1->date . " " . $row1->time;
						$date_val = $row1->date;
					} else {
						$time ="                     ".$row1->time;
					}
					if ($row1->callback_flag==2 || $row1->missed_flag==2 || $row1->abandon_flag==2){
						$agent = $row1->agent_taken;
					}
					else{
						$agent = " ";
					}

					$row_v1 = array(
						$time, strval($row1->callerid), strval($row1->origin), $row1->calltype, strval($row1->channel),$row1->type,$agent, $row1->status,
						strval($row1->duration), strval($row1->tta), strval($row1->queue));
					$sheet->row($row_num, $row_v1);
					$row_num++;
				}
			}

		}
		return $row_num;
	}

	private function outputWakeupCallReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$report_by = $data['report_by'];
		$sheet->mergeCells('B' . $row_num . ':F' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('AWC Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) use ($report_by) {
				$cell->setValue('AWC Detailed Report by ' . $report_by);
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}
		if( $data['report_type'] == 'Summary')
		{
		$row_num += 2;
		$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('   Building   ', '   Success  ', '   Failed   ', '   Canceled   ', '   Total   ');
		$sheet->row($row_num, $table_header);
		$row_num++;
		foreach ($data['building'] as $key => $row) {
			$row = array(
				$row->name, strval($row->success), strval($row->failed), strval($row->canceled), strval($row->total));
			$sheet->row($row_num, $row);
			$row_num++;
		}

		$row_num += 2;
		$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('  Room  ', '  Success  ', '   Failed   ', '   Canceled  ', '   Total   ');
		$sheet->row($row_num, $table_header);
		$row_num++;
		foreach ($data['room'] as $key => $row) {
			$row = array(
				strval($row->room), strval($row->success), strval($row->failed), strval($row->canceled), strval($row->total));
			$sheet->row($row_num, $row);
			$row_num++;
		}
		}

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['wakeup_list'] as $key => $data_group) {
				$sheet->mergeCells('A' . $row_num . ':H' . $row_num);
				$sheet->cell('A' . $row_num, function ($cell) use ($key, $data, $data_group) {
					if ($data['report_by'] != 'Date')
					{
						$cell->setValue($data['report_by'] . ' : ' . $key);
					}
					else
					{
						$cell->setValue($data['report_by'] . ' : ' . date("d-M-Y", strtotime($data_group[0]->time)));
					}
					$cell->setFont(array(
							'bold' => true
					));
				});
			$row_num += 2;
			$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('   ID   ', '   DateTime  ', '   Guest   ', '   Room   ', '   Set Time   ', '   Set-By   ','	Attempts ','	Status	');
			$sheet->row($row_num, $table_header);
			$row_num++;
			foreach ($data_group as $row) {
				$row = array(
					strval($row->id), strval($row->time), strval($row->guest_name), strval($row->room),strval($row->date) . ' ' . strval($row->set_time), strval($row->set_by), strval($row->attempts), strval($row->status));
				$sheet->row($row_num, $row);
				$row_num++;
			}

		}
		}
		return $row_num;
	}

	private function outputComplaintFrequencyReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('A' . $row_num . ':C' . $row_num);
		if($title == 'Frequency') {
			$sheet->cell('A' . $row_num, function ($cell) {
				$cell->setValue('Frequency Report By Complaint');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		if( $data['report_type'] == 'Frequency')
		{
			// Summary Label
			$row_num += 2;
			$sheet->cell('A' . $row_num, function ($cell) {
				$cell->setValue('Summary');
			});

			// Summary Table
			$row_num += 1;
			$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('   Name   ', '   Frequency  ', '   Cost   ');
			$sheet->row($row_num, $table_header);
			$row_num++;
			foreach ($data['freq_list'] as $key => $row) {
				$data1 = array(
					$row->name, strval($row->count), strval($row->cost));
				$sheet->row($row_num, $data1);
				$row_num++;
			}

			// Detail Label
			$row_num += 2;
			$sheet->cell('A' . $row_num, function ($cell) {
				$cell->setValue('Detail');
			});

			// Detail Table
			foreach ($data['freq_list'] as $key => $row)
			{
				if(count($row->comp_list) > 0)
				{
					// Category Name - Count
					$row_num += 2;
					$data = array($row->name .' - ' . $row->count);
					$sheet->row($row_num, $data);

					$row_num += 1;
					$sheet->cell('A' . $row_num . ':D' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});

					$table_header = array('   Complaint ID   ', '   Compensation  ', '   Location   ', '   Cost  ');
					$sheet->row($row_num, $table_header);

					foreach ($row->comp_list as $key1 => $row1)
					{
						$row_num += 1;
						$data = array(strval(sprintf('C%05d', $row1->complaint_id)), strval($row1->compensation), $row1->loc_name, strval($row1->cost));
						$sheet->row($row_num, $data);
					}
					$row_num += 1;
					$sheet->cell('D' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});

					$data = array('', '', '', strval($row->cost));
					$sheet->row($row_num, $data);
				}
			}
		}
	}

	private function outputComplaintCategoryReport($sheet, $row_num, $data) {
		$title = $data['report_type'];
		$sheet->mergeCells('A' . $row_num . ':C' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell) {
			$cell->setValue('Category Report By Complaint');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '16',
				'bold' => true
			));
		});

		// Table
		$row_num += 1;
		$sheet->cell('A' . $row_num . ':D' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array(' Category Name   ', '   Compensation  ', '  Cost  ', '  Location  ');
		$sheet->row($row_num, $table_header);
		$row_num++;
		foreach ($data['category_list'] as $key => $row) {
			$data = array(
				$row->name, strval($row->compensation), strval($row->cost), $row->loc_name);
			$sheet->row($row_num, $data);
			$row_num++;
		}
	}

	private function outputCallStatusCallcenterReport($sheet, $row_num, $data) {
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Call Status Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Call Status Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num+=2;
		$row_num++;
		$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('Date', 'Answered', 'Abandoned', 'Callback', 'Missed');
		$sheet->row($row_num, $table_header);
		$row_num++;
		foreach ($data['summary'] as $key => $row) {
			$row = array(
				$row->date, strval($row->dateform1->answered), strval($row->dateform1->abandoned), strval($row->dateform1->callback), strval($row->dateform1->missed) );
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row = array(
			strval($data['total']), strval($data['answered']), strval($data['abandoned']), strval($data['callback']), strval($data['missed']));
		$sheet->row($row_num, $row);
		$row_num +=2;


		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row) {
				$row_num++;
				$row_v = array($row->status);
				$sheet->row($row_num, $row_v);
				$row_num++;
				$date_val = '' ;
				if(!empty($row->userinform)) {
					$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Time', 'Agent', 'Caller ID', 'Origin', 'Call Type', 'Taken By', 'Duration', 'TTA',
						'Time on queue');
					$sheet->row($row_num, $table_header);
					$row_num++;


					foreach ($row->userinform as $key1 => $row1) {
						$time = '';
						if ($date_val != $row1->date) {
							$time = $row1->date . " " . $row1->time;
							$date_val = $row1->date;
						} else {
							$time = "                        ".$row1->time;
						}
						if ($row1->callback_flag==2 || $row1->missed_flag==2 || $row1->abandon_flag==2){
							$agent = $row1->agent_taken;
						}
						else{
							$agent = " ";
						}

						$row_v1 = array(
							$time, $row1->agent, strval($row1->callerid), strval($row1->origin), strval($row1->calltype), $agent,
							strval($row1->duration), strval($row1->tta), strval($row1->queue));
						$sheet->row($row_num, $row_v1);
						$row_num++;
					}
				}

			}

		}
		return $row_num;
	}
	private function outputDateCallcenterReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Date Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Date Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num+=2;
		$row_num++;
		$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('Date', 'Answered', 'Abandoned', 'Callback', 'Missed');
		$sheet->row($row_num, $table_header);
		$row_num++;
		foreach ($data['summary'] as $key => $row) {
			$row = array(
				$row->date, strval($row->dateform1->answered), strval($row->dateform1->abandoned), strval($row->dateform1->callback), strval($row->dateform1->missed) );
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row = array(
			strval($data['total']), strval($data['answered']), strval($data['abandoned']), strval($data['callback']), strval($data['missed']));
		$sheet->row($row_num, $row);
		$row_num +=2;


		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row) {
				$row_num++;
				$row_v = array($row->date);
				$sheet->row($row_num, $row_v);
				$row_num++;
				$date_val = '' ;
				if(!empty($row->userinform)) {
					$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Time', 'Agent', 'Caller ID', 'Status', 'Origin', 'Call Type', 'Taken By', 'Duration',
						'TTA','Time on queue');
					$sheet->row($row_num, $table_header);
					$row_num++;


					foreach ($row->userinform as $key1 => $row1) {
						$time = '';
						if ($date_val != $row1->date) {
							$time = $row1->date . " " . $row1->time;
							$date_val = $row1->date;
						} else {
							$time ="                        ". $row1->time;
						}
						if ($row1->callback_flag==2 || $row1->missed_flag==2 || $row1->abandon_flag==2){
							$agent = $row1->agent_taken;
						}
						else{
							$agent = " ";
						}
						$row_v1 = array(
							$time, $row1->agent, strval($row1->callerid), $row1->status, strval($row1->origin), $row1->calltype,
							$agent, strval($row1->duration), strval($row1->tta),strval($row1->queue));
						$sheet->row($row_num, $row_v1);
						$row_num++;
					}
				}

			}

		}
		return $row_num;
	}

	private function outputOriginCallcenterReport($sheet, $row_num, $data) {
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Origin Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Origin Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num+=2;
		$row_num++;
		$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('Date', 'Origin', 'Answered', 'Abandoned', 'Callback','Missed');
		$sheet->row($row_num, $table_header);
		$row_num++;
		foreach ($data['summary'] as $key => $row) {
			foreach ($row->dateform1 as $key1 => $row1) {
				$origin = '';
				if($row1->origin == '')
					$origin = 'Internal';
				else
                    $origin = $row1->origin;
				$row_v = array(
					$row->date, strval($origin), strval($row1->answered), strval($row1->abandoned), strval($row1->callback), strval($row1->missed));
				$sheet->row($row_num, $row_v);
				$row_num++;
			}
		}
		$row_v1 = array(
			strval($data['total']), '', strval($data['answered']), strval($data['abandoned']), strval($data['callback']),strval($data['missed']));
		$sheet->row($row_num, $row_v1);
		$row_num +=2;


		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row) {
				$orign = '';
				if(!empty($row->userinform)) {
					foreach ($row->userinform as $key => $row1) {
						if ($row1->origin == '') $origin = 'Internal';
						else $origin = $row1->origin;
						break;
					}
				}
				if(!empty($row->userinform)) {
					$row_v = array($origin);
					$sheet->row($row_num, $row_v);
					$row_num++;
					$date_val = '' ;

					$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Time', 'Agent', 'Caller ID', 'Status', 'Call Type', 'Taken By' ,'Duration','TTA','Time on queue');
					$sheet->row($row_num, $table_header);
					$row_num++;


					foreach ($row->userinform as $key1 => $row1) {
						$time = '';
						if ($date_val != $row1->date) {
							$time = $row1->date . " " . $row1->time;
							$date_val = $row1->date;
						} else {
							$time ="                        ". $row1->time;
						}
						if ($row1->callback_flag==2 || $row1->missed_flag==2 || $row1->abandon_flag==2){
							$agent = $row1->agent_taken;
						}
						else{
							$agent = " ";
						}
						$row_v1 = array(
							$time, $row1->agent, strval($row1->callerid), $row1->status, $row1->calltype, $agent,
							strval($row1->duration), strval($row1->tta), strval($row1->queue));
						$sheet->row($row_num, $row_v1);
						$row_num++;
					}
				}

			}

		}
		return $row_num;
	}

	private function outputPerHourCallcenterReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Per Hour Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Per Hour Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num+=2;
		$date_val = '';
		foreach ($data['summary'] as $key => $row) {
			$hr= $row->hour;
			if($date_val != $row->date) {
				$date_val = $row->date;
				$row = array($row->date);
				$sheet->row($row_num, $row);
				$row_num += 2;

				$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');
				});
				$table_header = array('Per Hour', 'Answered', 'Abandoned', 'Callback', 'Missed');
				$sheet->row($row_num, $table_header);
				$row_num++;
			if((!empty($row->dateform1)))
			{
				foreach ($row->dateform1 as $key1 => $row1) {
					$row2 = array(
						strval($row->hour), strval($row1->answered), strval($row1->abandoned), strval($row1->callback), strval($row1->missed));
					$sheet->row($row_num, $row2);
					$row_num++;
				}
			}
			else{
				$row2 = array(
					$hr, 0, 0, 0, 0);
				$sheet->row($row_num, $row2);
				$row_num++;
			}
			}else {
				if((!empty($row->dateform1)))
			{
				foreach ($row->dateform1 as $key1 => $row1) {
					$row = array(
						strval($row->hour), strval($row1->answered), strval($row1->abandoned), strval($row1->callback), strval($row1->missed));
					$sheet->row($row_num, $row);
					$row_num++;
				}
			}
			else
			{
				$row = array(
					$row->hour, 0, 0, 0, 0);
				$sheet->row($row_num, $row);
				$row_num++;
			}
			}
		}

		$table_header = array('Per Hour', 'Answered', 'Abandoned', 'Callback', 'Missed');
		$sheet->row($row_num, $table_header);
		$row_num++;
		$row = array(
			strval($data['total']), '', strval($data['answered']), strval($data['abandoned']), strval($data['callback']),strval($data['missed']));
		$sheet->row($row_num, $row);
		$row_num +=2;


		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row) {
				if(!empty($row->userinform)) {
				$date = "Date: ".$row->date."  Hour:".$row->hour;
				$row_date = array($date);
				$sheet->row($row_num, $row_date);
				$row_num++;

				$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');
				});
				$table_header = array('Time', 'Agent', 'Caller ID', 'Origin', 'Call Type','Status','Follow up','Duration','TTA', 'Time on queue');
				$sheet->row($row_num, $table_header);
				$row_num++;


					foreach ($row->userinform as $key1 => $row1) {
						$row = array(
							strval($row1->time), $row1->agent, strval($row1->callerid), strval($row1->origin), $row1->calltype, strval($row1->followup),
							strval($row1->duration), strval($row1->tta), strval($row1->queue));
						$sheet->row($row_num, $row);
						$row_num++;
					}
				}

			}
		}
		return $row_num;
	}

	private function outputCallTypeCallcenterReport($sheet, $row_num, $data) {
		$title = $data['report_type'];
		$row_num++;
		$col_num='A';

		$table_header=['Date'];
		foreach($data['call_type_names'] as $row1)
		{
			$col_num++;
			$table_header[]=$row1;
		}
		$sheet->mergeCells('B' . $row_num . ':'.$col_num. $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Call Type Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Call Type Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num+=2;
		$sheet->cell('A' . $row_num . ':'.$col_num. $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$sheet->row($row_num, $table_header);
		$row_num++;

		$date_val = '';
		// if(!empty($data['channel_total']))
		// {
		for($j=0;$j<count($data['call_type_each']); $j++)
		{
            if(!empty($data['summary'][$j]->dateform1)) {
				$row_v = [
						$data['summary'][$j]->date];


					 foreach($data['call_type_each'][$j] as $key)
					 {

					$row_v[]=$key;
					 }

					$sheet->row($row_num, $row_v);
					$row_num++;

			 }
		}

		$row = [
			$data['total']];
		foreach($data['call_type_total'] as $row2) {
			$row[]=$row2;
		}

		$sheet->row($row_num, $row);
		$row_num +=2;
/*
		$row_num+=2;
		$sheet->cell('C' . $row_num . ':F' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('','','Date', 'Booking', 'Inquiry', 'Others');
		$sheet->row($row_num, $table_header);
		$row_num++;

		$date_val = '';
		foreach ($data['summary'] as $key => $row) {
			if(!empty($row->dateform1)) {
					$booking = 0; if(!empty($row->dateform1->booking)) $booking = $row->dateform1->booking;
					$inquiry = 0; if(!empty($row->dateform1->inquiry)) $inquiry= $row->dateform1->inquiry;
					$other = 0; if(!empty($row->dateform1->other)) $other = $row->dateform1->other;
					$row_v = array('','',
						$row->date, $booking, $inquiry, $other);
					$sheet->row($row_num, $row_v);
					$row_num++;

			}
		}
		$row = array('','',
			$data['total'], $data['booking'], $data['inquiry'], $data['other']);
		$sheet->row($row_num, $row);
		$row_num +=2;

*/
		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row) {
				$row_num++;
				$row_v = array($row->type);
				$sheet->row($row_num, $row_v);
				$row_num++;
				$date_val = '' ;
				if(!empty($row->userinform)) {
					$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Time', 'Caller ID', 'Origin', 'Call Type','Type', 'Channel', 'Taken By', 'Status', 'Duration', 'TTA',
						'Time on queue');
					$sheet->row($row_num, $table_header);
					$row_num++;

					foreach ($row->userinform as $key1 => $row1) {
						$time = '';
						if ($date_val != $row1->date) {
							$time = $row1->date . " " . $row1->time;
							$date_val = $row1->date;
						} else {
							$time ="                     ".$row1->time;
						}
						if ($row1->callback_flag==2 || $row1->missed_flag==2 || $row1->abandon_flag==2){
							$agent = $row1->agent_taken;
						}
						else{
							$agent = " ";
						}
						$row_v1 = array(
							strval($time), strval($row1->callerid), strval($row1->origin), $row1->calltype, $row1->type, strval($row1->channel), $agent, $row1->status,
							strval($row1->duration), strval($row1->tta), strval($row1->queue));
						$sheet->row($row_num, $row_v1);
						$row_num++;
					}
				}

			}


		}
		return $row_num;
	}

    private function outputChannelTypeCallcenterReport($sheet, $row_num, $data) {
		$title = $data['report_type'];
		$row_num++;

		$col_num='A';
		//$col_num+=5;

		//$table_header = array('','','Date', 'Website','Email','Reference', 'Others');\
		$table_header=['Date'];
		foreach($data['channel_names'] as $row1)
		{
			$col_num++;
			$table_header[]=$row1;
		}
		//echo json_encode($table_header);
			$sheet->mergeCells('B' . $row_num . ':'.$col_num. $row_num);
		if($title == 'Summary') {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Channel Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('B' . $row_num, function ($cell) {
				$cell->setValue('Channel Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num+=2;
		$sheet->cell('A' . $row_num . ':'.$col_num. $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$sheet->row($row_num, $table_header);
		$row_num++;

		$date_val = '';
		// if(!empty($data['channel_total']))
		// {
		for($j=0;$j<count($data['channel_each']); $j++)
		{
            if(!empty($data['summary'][$j]->dateform1)) {
				$row_v = [
						$data['summary'][$j]->date];


					 foreach($data['channel_each'][$j] as $key)
					 {

					$row_v[]=$key;
					 }

					$sheet->row($row_num, $row_v);
					$row_num++;

			 }
		}
		// foreach ($data['summary'] as $key => $row) {
		// 	if(!empty($row->dateform1)) {

		// 			$website = ''; if(!empty($row->dateform1->website)) $website = $row->dateform1->website;
		// 			$email = ''; if(!empty($row->dateform1->email)) $email = $row->dateform1->email;
		// 			$ref = ''; if(!empty($row->dateform1->ref)) $ref = $row->dateform1->ref;
		// 			$others = ''; if(!empty($row->dateform1->others)) $others = $row->dateform1->others;
		// 			$row_v = array('','',
		// 				$row->date, $website, $email,$ref, $others);
		// 			$sheet->row($row_num, $row_v);
		// 			$row_num++;

		// 	}
		// }
		$row = [
			$data['total']];
			foreach($data['channel_total'] as $row2)
		{

			$row[]=$row2;
		}

		$sheet->row($row_num, $row);
		$row_num +=2;


 		if($data['report_type'] == 'Detailed')
 		{

			foreach ($data['detailed'] as $key => $row) {
				$row_num++;
				$row_v = array($row->channel);
				$sheet->row($row_num, $row_v);
				$row_num++;
				$date_val = '' ;
				if(!empty($row->userinform)) {
					$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Time', 'Caller ID', 'Origin', 'Call Type','Type', 'Channel', 'Taken By', 'Status', 'Duration', 'TTA',
						'Time on queue');
					$sheet->row($row_num, $table_header);
					$row_num++;

					foreach ($row->userinform as $key1 => $row1) {
						$time = '';
						if ($date_val != $row1->date) {
							$time = $row1->date . " " . $row1->time;
							$date_val = $row1->date;
						} else {
							$time ="                     ".$row1->time;
						}
						if ($row1->callback_flag==2 || $row1->missed_flag==2 || $row1->abandon_flag==2){
							$agent = $row1->agent_taken;
						}
						else{
							$agent = " ";
						}
						$row_v1 = array(
							$time, strval($row1->callerid), strval($row1->origin), $row1->calltype, $row1->type, strval($row1->channel), $agent, $row1->status,
							strval($row1->duration), strval($row1->tta), strval($row1->queue));
						$sheet->row($row_num, $row_v1);
						$row_num++;
					}
				}

			}


		}
// 		if( ($data['website'])>0)  {


// 			$sheet->cell('A' . $row_num, function ($cell) {
// 				$cell->setValue('Website');
// 				$cell->setAlignment('center');
// 				$cell->setFont(array(
// 					'size' => '12',
// 					'bold' => true
// 				));
// 			});
// 			$row_num +=2;
// 			foreach ($data['detailed'] as $key => $row) {
// 				if(!empty($row->userinform)) {
// 					$table_header = array('Date: '.$row->date);
// 					$sheet->row($row_num, $table_header);
// 					$row_num ++;

// 					$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
// 						$cell->setFontColor('#ffffff');
// 						$cell->setBackground('#2c3e50');
// 					});
// 					$table_header = array('Time', 'Agent', 'Caller ID', 'Origin','Type','Status','Follow up','Duration','TTA','Time on queue');
// 					$sheet->row($row_num, $table_header);
// 					$row_num++;

// 					foreach ($row->userinform as $key1 => $row1) {
// 						if($row1->channel=='Reference')
// 						{
// 						$time = "";
// 						if($date_val != $row1->date ) {
// 							$time = $row1->time;
// 							$date_val = $row1->date;
// 						}else {
// 							$time = $row1->time;
// 						}
// 						$row_v = array(
// 							$time, $row1->agent, $row1->callerid, $row1->origin, $row1->type, $row1->status, $row1->followup,
// 							$row1->duration, $row1->tta, $row1->queue);
// 						$sheet->row($row_num, $row_v);
// 						$row_num++;
// 					}
// 				}

// 				}

// 			}
// 			$row_num +=2;
// 		}


// 	if(($data['email'])>0) {

// 		$sheet->cell('A' . $row_num, function ($cell) {
// 			$cell->setValue('E-Mail');
// 			$cell->setAlignment('center');
// 			$cell->setFont(array(
// 				'size' => '12',
// 				'bold' => true
// 			));
// 		});
// 		$row_num +=2;
// 		foreach ($data['detailed'] as $key => $row) {
// 			if(!empty($row->userinform)) {
// 				$table_header = array('Date: '.$row->date);
// 				$sheet->row($row_num, $table_header);
// 				$row_num ++;

// 				$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
// 					$cell->setFontColor('#ffffff');
// 					$cell->setBackground('#2c3e50');
// 				});
// 				$table_header = array('Time', 'Agent', 'Caller ID', 'Origin','Type','Status','Follow up','Duration','TTA','Time on queue');
// 				$sheet->row($row_num, $table_header);
// 				$row_num++;

// 				foreach ($row->userinform as $key1 => $row1) {
// 					if($row1->channel=='E-mail')
// 					{
// 					$time = "";
// 					if($date_val != $row1->date ) {
// 						$time = $row1->time;
// 						$date_val = $row1->date;
// 					}else {
// 						$time = $row1->time;
// 					}
// 					$row_v = array(
// 						$time, $row1->agent, $row1->callerid, $row1->origin,$row1->type, $row1->status, $row1->followup,
// 						$row1->duration, $row1->tta, $row1->queue);
// 					$sheet->row($row_num, $row_v);
// 					$row_num++;
// 				}
// 			}

// 			}

// 		}
// 		$row_num +=2;
// 	}

// 	if( ($data['ref'])>0) {

// 		$sheet->cell('A' . $row_num, function ($cell) {
// 			$cell->setValue('Reference');
// 			$cell->setAlignment('center');
// 			$cell->setFont(array(
// 				'size' => '12',
// 				'bold' => true
// 			));
// 		});
// 		$row_num +=2;
// 		foreach ($data['detailed'] as $key => $row) {
// 			if(!empty($row->userinform)) {
// 				$table_header = array('Date: '.$row->date);
// 				$sheet->row($row_num, $table_header);
// 				$row_num ++;

// 				$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
// 					$cell->setFontColor('#ffffff');
// 					$cell->setBackground('#2c3e50');
// 				});
// 				$table_header = array('Time', 'Agent', 'Caller ID', 'Origin','Type','Status','Follow up','Duration','TTA','Time on queue');
// 				$sheet->row($row_num, $table_header);
// 				$row_num++;

// 				foreach ($row->userinform as $key1 => $row1) {
// 					if($row1->channel=='Reference')
// 					{
// 					$time = "";
// 					if($date_val != $row1->date ) {
// 						$time = $row1->time;
// 						$date_val = $row1->date;
// 					}else {
// 						$time = $row1->time;
// 					}
// 					$row_v = array(
// 						$time, $row1->agent, $row1->callerid, $row1->origin,$row1->type, $row1->status, $row1->followup,
// 						$row1->duration, $row1->tta, $row1->queue);
// 					$sheet->row($row_num, $row_v);
// 					$row_num++;
// 				}
// 			}

// 			}

// 		}
// 		$row_num +=2;
// 	}



// if( ($data['others'])>0) {

// 	$sheet->cell('A' . $row_num, function ($cell) {
// 		$cell->setValue('Others');
// 		$cell->setAlignment('center');
// 		$cell->setFont(array(
// 			'size' => '12',
// 			'bold' => true
// 		));
// 	});
// 	$row_num +=2;
// 	foreach ($data['detailed'] as $key => $row) {
// 		if(!empty($row->userinform)) {
// 			$table_header = array('Date: '.$row->date);
// 			$sheet->row($row_num, $table_header);
// 			$row_num ++;

// 			$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
// 				$cell->setFontColor('#ffffff');
// 				$cell->setBackground('#2c3e50');
// 			});
// 			$table_header = array('Time', 'Agent', 'Caller ID', 'Origin','Type','Status','Follow up','Duration','TTA','Time on queue');
// 			$sheet->row($row_num, $table_header);
// 			$row_num++;

// 			foreach ($row->userinform as $key1 => $row1) {
// 				if($row1->channel=='Others')
// 				{
// 				$time = "";
// 				if($date_val != $row1->date ) {
// 					$time = $row1->time;
// 					$date_val = $row1->date;
// 				}else {
// 					$time = $row1->time;
// 				}
// 				$row_v = array(
// 					$time, $row1->agent, $row1->callerid, $row1->origin, $row1->type, $row1->status, $row1->followup,
// 					$row1->duration, $row1->tta, $row1->queue);
// 				$sheet->row($row_num, $row_v);
// 				$row_num++;
// 				}
// 			}


// 		}

// 	}
// 	$row_num +=2;
// }

// }
            return $row_num;
    }







	private function outputAgentStatusCallcenterReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Agent Status Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		} else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Agent Status Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$date_val = '';
		foreach ($data['summary'] as $key => $row) {
			$row_num+=2;
			$table_header = array($row->date);
			$sheet->row($row_num, $table_header);
			$row_num++;

			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('Agent', 'Online', 'Available', 'Busy','Hold','Idle','On Break','Wrap up','Away');
			$sheet->row($row_num, $table_header);
			$row_num++;

			if(!empty($row->status)) {
				foreach ($row->status as $key1 => $row1) {
					foreach ($row1->dateform1 as $key2 => $row2) {
						$row_v = array(
							$row1->agent, strval($row2->online), strval($row2->available), strval($row2->busy), strval($row2->hold), strval($row2->idle),
							strval($row2->onbreak),strval($row2->wrapup),strval($row2->away));
						$sheet->row($row_num, $row_v);
						$row_num++;
					}
				}
			}
		}
		$row_num++;

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row){
			$row_num+=2;
			if(!empty($row->userinform)) {
				foreach($row->userinform as $key => $row1) {
					$agent = array($row1->agent);
					$sheet->row($row_num, $agent);
				   break;
				  }

			}
			$row_num++;

			$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('Date', 'Time', 'Extension', 'Status','Duration');
			$sheet->row($row_num, $table_header);
			$row_num++;
			$date_val = '';

			if(!empty($row->userinform)) {
				foreach ($row->userinform as $key1 => $row2) {
					if($date_val != $row2->date )
                            $date = $row2->date;
                    else
					$date = '';

						$row_v = array(
						$row2->date, strval($row2->time), strval($row2->extension), $row2->status, gmdate('H:i:s', $row2->duration));
						$sheet->row($row_num, $row_v);
						$row_num++;
						$date_val = $row2->date;
				}
			}
		}
		}
		return $row_num;
	}

	private function outputAutoAttendantCallcenterReport($sheet, $row_num, $data)
	{
		$title = $data['report_type'];
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		if($title == 'Summary') {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Auto Attendant Summary Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}else {
			$sheet->cell('C' . $row_num, function ($cell) {
				$cell->setValue('Auto Attendant Detailed Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '16',
					'bold' => true
				));
			});
		}

		$row_num+=2;

		if( $data['report_type'] == 'Detailed') {
			foreach ($data['detailed'] as $key => $row) {
				$row_num++;
				$row_v = array($row->date);
				$sheet->row($row_num, $row_v);
				$row_num++;
				$date_val = '' ;
				if(!empty($row->userinform)) {
					$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$table_header = array('Time', 'Extension', 'Description', 'Caller ID', 'Call Type', 'Status');
					$sheet->row($row_num, $table_header);
					$row_num++;


					foreach ($row->userinform as $key1 => $row1) {
						$time = '';
						if ($date_val != $row1->date) {
							$time = $row1->date . " " . $row1->time;
							$date_val = $row1->date;
						} else {
							$time ="                        ". $row1->time;
						}

						$row_v1 = array(
							$time, strval($row1->ext), $row1->description, strval($row1->callerid), $row1->calltype,
							strval($row1->status));
						$sheet->row($row_num, $row_v1);
						$row_num++;
					}
				}

			}

		}

		if( $data['report_type'] == 'Summary') {
			foreach ($data['summary_list'] as $key => $datagroup) {
				$row_num++;
				//$i++;

				$sheet->mergeCells('A'.$row_num.':C'.$row_num);
				$sheet->cell('A'.$row_num, function($cell) use ($data,$key) {
					$cell->setValue('Date :' . $key) ;
				});
				$row_num++;
				$tot = 0;
                $answered = 0;
                $noinput=0;
                $cancel=0;

				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');

				});
				$table_header = array('Department', 'Answered', 'Answered %', 'No Input', 'No Input %', 'Cancel', 'Cancel %', 'Total');
				$sheet->row($row_num, $table_header);
				$row_num++;
				foreach ($datagroup as $row) {


					$row_v1 = array(
						strval($row->group_key), strval($row->answered), 
						number_format($row->ans_per,2)  . '%', 
						strval($row->noinput), 
						number_format($row->inp_per,2) . '%',
						strval($row->cancel), number_format($row->can_per,2) . '%', strval($row->total));
					$sheet->row($row_num, $row_v1);
					$row_num++;

				$tot += $row->total;
                $answered += $row->answered;
                $noinput += $row->noinput;
                $cancel += $row->cancel;
				}
				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setAlignment('right');
					$cell->setFont(array(
						'bold'       =>  true
				));
				});
				$row_v2 = array(
					'Total', $answered, '', $noinput, '',
					$cancel, '', $tot);
				$sheet->row($row_num, $row_v2);
				$row_num++;
			}
		}
		return $row_num;
	}

	private function outputAbandonedCallcenterReport($sheet, $row_num, $data)
	{

			$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
			$sheet->cell('C' . $row_num, function($cell)  {
				$cell->setValue('Abandoned Calls Agent Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size'       => '16',
					'bold'       =>  true
				));
			});

			$row_num += 2;

			// table header
			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});

			$table_header = array('Date', 'Agent', 'Call Abandoned', '%Call Abandoned', 'Call Abandoned in 20 secs', '%Call Abandoned in 20 secs', 'Lognest Wait Abandoned' );
			$sheet->row($row_num, $table_header);

			$row_num++;
			$date_val = '' ;
			foreach ($data['detail'] as $key => $row) {
				if( $row->call_date != $date_val && $key != 0) {
					$sheet->row($row_num);
					$row_num++;
				}
				if($row->call_date != $date_val){
					$call_date_val = $row->call_date;
				}else {
					$call_date_val = '';
				}
				$date_val =  $row->call_date;
				$row = array(
					$call_date_val, $row->wholename, 
					strval($row->abandoned), 
					round($row->abandoned * 100 / $row->total_calls, 2).'%',
					strval($row->abandoned_20), 
					round($row->abandoned_20 * 100 / $row->total_calls, 2).'%', 
					strval($row->abandoned_max)
				);
				$sheet->row($row_num, $row);
				$row_num++;
			}
			$row_num++;
			$call_date_val = '';
			$total_count = '0';
			$total_count_20 = '0' ;
			foreach ($data['summary'] as $key => $row) {
				if( $key == 0 ) {
					$call_date_val = 'Report Summary';
					$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
				}
				else $call_date_val = '' ;
				if( $row->total_calls > 0 )
                    $total_count = round($row->abandoned * 100 / $row->total_calls, 2).'%';
				else
					$total_count = '0%' ;
				if( $row->total_calls > 0 )
					$total_count_20 = round($row->abandoned_20 * 100 / $row->total_calls, 2).'%';
				else
					$total_count_20 = '0%' ;
				$row = array(
					strval($call_date_val), $row->wholename, strval($row->abandoned), strval($total_count),
					strval($row->abandoned_20), strval($total_count_20) , strval($row->abandoned_max)
				);
				$sheet->row($row_num, $row);
				$row_num++;
			}
			$row_num++;
		return $row_num;
	}
	private function outputAgentCallDetailedReport($sheet, $row_num, $data)
	{

		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		$sheet->cell('C' . $row_num, function($cell) {
			$cell->setValue('Agent Call Detailed Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '16',
				'bold'       =>  true
			));
		});

		$row_num += 2;

		// table header
		$sheet->cell('A' . $row_num . ':L' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});

		$table_header = array('Agent', 'Call Start Time', 'Call End Time', 'Call Type', 'Caller ID', 'Wait Time in Queue',
						'Time To Answer','Talk Time', 'Hold Time','Inquiry' ,'Modify' ,'Reservation');
		$sheet->row($row_num, $table_header);

		$row_num++;
		$date_val = '' ;
		foreach ($data['detail'] as $key => $row) {
			$call_start_date = $row->call_start_date ;
			if( $call_start_date != $date_val ) {
				$row_num++;
				$row_1 = array($call_start_date,'','','','','','','','','','','');
				$sheet->row($row_num, $row_1);
				$row_num++;
			}
			$inquiry = '';
			if($row->type == 'Inquiry') { $inquiry = 'Y' ;} else {$inquiry = 'N' ;}
			$follow = $row->type;;
			if($row->type == 'Modify'){$follow = 'Y' ;}else{ $follow = 'N' ; }
			$booking = '' ;
			 if($row->type == 'Booking'){ $booking = 'Y' ;} else{ $booking = 'N' ; }
			$row_2 = array(
				$row->wholename, $row->call_start_time, $row->call_end_time, $row->call_type, strval($row->caller_id),
				strval($row->waiting),strval($row->time_to_answer),$row->talk_time,'', $inquiry,$follow,$booking);
			$sheet->row($row_num, $row_2);
			$date_val = $call_start_date;
			$row_num++;
		}
		$row_num++;
		$row_num++;

		$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('Agent', 'Avarege Time to Answer', 'Avarage Talk Time', 'Inquiry', 'Modify', 'Reservatiion');
		$sheet->row($row_num, $table_header);
		$row_num++;

		foreach ($data['summary'] as $key => $row) {

			$row = array(
				$row->wholename, strval($row->avg_time_answer), strval($row->avg_talk_time),
				$row->inquiry, $row->follow , strval($row->reservation)
			);
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row_num++;
		return $row_num;
	}

	private function outputAgentActivityReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		$sheet->cell('C' . $row_num, function($cell) use($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
					'size'       => '16',
					'bold'       =>  true
			));
		});

		$row_num += 2;

		// table header
		$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});

		$table_header = array('Agent ID', 'Agent Name', 'Activity Time', 'Activity Type', 'Activity Detail', 'Call Type', 'Caller Number' );
		$sheet->row($row_num, $table_header);

		$row_num++;

		foreach ($data['detail'] as $key => $row) {
			if( $row->status == 'Ringing' || $row->status == 'Answered' || $row->status == 'Abandoned' || $row->status == 'Callback' || $row->status == 'Modify' )
				$status = 'CALL';
			else
				$status = 'STATE';

			$row = array(
				strval($row->id), $row->wholename, $row->created_at, $status, $row->status, $row->call_type, strval($row->callerid)
			);

			$sheet->row($row_num, $row);
			$row_num++;
		}

		$row_num += 2;


		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		$sheet->cell('C' . $row_num, function($cell) use($data) {
			$cell->setValue('Agent Activity Duration');
			$cell->setAlignment('center');
		});

		$row_num += 2;
		$column_name = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];

		// table header
		$table_header = [];
		$count = 0;
		foreach($data['summary'] as $row) {
			$table_header[] = $row->status;
			$count++;
		}
		$sheet->row($row_num, $table_header);

		if( $count > 0 )
		{
			$sheet->cell('A' . $row_num . ':' . $column_name[$count-1] . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
		}


		$row_num++;

		$row_value = [];
		foreach($data['summary'] as $row) {
			$row_value[] = $row->duration;
		}

		$sheet->row($row_num, $row_value);
		$row_num++;

		return $row_num;
	}

	private function outputCallTypeSummaryByAgentReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		$sheet->cell('C' . $row_num, function($cell) use($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
					'size'       => '16',
					'bold'       =>  true
			));
		});

		$row_num += 2;

		// table header
		$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});

		$table_header = array('Date', 'Agent', 'Calls for Reservation', 'Calls for Enquiry', 'Calls for Followup', 'Calls for Others', 'Total' );
		$sheet->row($row_num, $table_header);

		$row_num++;
		$date_val = '';
		foreach ($data['detail'] as $key => $row) {
			$call_date = $row->call_date ;
			$call_date_set =$call_date;
			if($call_date == $date_val ){
				$call_date_set = '';
			}
			$row = array(
					$call_date_set, $row->wholename, strval($row->booking), strval($row->inquiry), strval($row->followup), $row->other, strval($row->total_calls)
			);

			if($date_val != $call_date) {
				$date_val = $call_date;
				if($key != 0) $row_num+=2;
			}
			$sheet->row($row_num, $row);
			$row_num++;
		}

		$row_num += 2;


		$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});

		foreach ($data['summary'] as $key => $row) {
			$call_date = "Report Summary";
			if( $key != 0 ) $call_date = "";
			$row = array(
					$call_date, $row->wholename, strval($row->booking), strval($row->inquiry),
					strval($row->followup), $row->other , strval($row->total_calls)
			);
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row_num++;
		return $row_num;
	}

	private function outputAgentActivitySummaryReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('B' . $row_num . ':F' . $row_num);
		$sheet->cell('B' . $row_num, function($cell) use($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
					'size'       => '16',
					'bold'       =>  true
			));
		});

		$row_num += 2;

		// table header
		$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});

		$table_header = array('Date', 'Agent', 'Online', 'Available', 'Unavailable', 'Talk', 'Hold', 'Idle' );
		$sheet->row($row_num, $table_header);

		$row_num++;
		$date_val = '';
		foreach ($data['detail'] as $key => $row) {
			$call_date = $row->call_date ;
			$call_date_set =$call_date;
			if($call_date == $date_val ){
				$call_date_set = '';
			}
			$row = array(
					$call_date_set, $row->wholename, strval($row->online), strval($row->available), strval($row->notavailable), 
					strval($row->busy), strval($row->hold), strval($row->idle)
			);

			if($date_val != $call_date) {
				$date_val = $call_date;
				if($key != 0) $row_num+=2;
			}
			$sheet->row($row_num, $row);
			$row_num++;
		}

		$row_num += 2;


		$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});

		foreach ($data['summary'] as $key => $row) {
			$call_date = "Report Summary";
			if( $key != 0 ) $call_date = "";
			$row = array(
					$call_date, $row->wholename, strval($row->online), strval($row->available),
					strval($row->notavailable), strval($row->busy) , strval($row->hold) , strval($row->idle)
			);
			$sheet->row($row_num, $row);
			$row_num++;
		}
		$row_num++;
		return $row_num;
	}


	private function getEmptyValue($value) {
		if( empty($value) )
			return 0;
		else
			return $value;
	}

	private function outputCallTimeTrafficReport($sheet, $row_num, $data)
	{
		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		$sheet->cell('C' . $row_num, function($cell) use($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
					'size'       => '16',
					'bold'       =>  true
			));
		});

		$row_num += 2;

		// table header
		$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
			$cell->setAlignment('center');
		});
		$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');

		$sheet->setMergeColumn(array(
				'columns' => array('A','B'),
				'rows' => array(
						array($row_num, $row_num + 1),
				)
		));

		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
		$sheet->mergeCells('F' . $row_num . ':I' . $row_num);
		$sheet->mergeCells('J' . $row_num . ':K' . $row_num);

		$table_header = array('Time', 'Total Calls', 'Answered Calls', '', '', 'Abandoned Calls', '', '', '', 'Outgoing Calls', '');
		$sheet->row($row_num, $table_header);

		$row_num++;

		$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
			$cell->setAlignment('center');
		});
		$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');

		$table_header = array('', '', 'Total Calls', 'Average duration', 'Averate Time to Answer', 'Total Calls', 'Queued Calls', '%Missed', 'Average Wait Time', '	Total Calls', 'Average Duration');
		$sheet->row($row_num, $table_header);

		$row_num++;

		foreach ($data['detail'] as $key => $row) {
			$row = array(
					$row['time_name'], strval($row['call_trafic']->total_calls),
					strval($this->getEmptyValue($row['call_trafic']->answered)),
					strval($this->getEmptyValue($row['call_trafic']->avg_duration)),
					strval($this->getEmptyValue($row['call_trafic']->avg_tta)),
					strval($this->getEmptyValue($row['call_trafic']->abandoned)),
					'', '',
					strval($this->getEmptyValue($row['call_trafic']->abandoned)),
					strval($this->getEmptyValue($row['call_trafic']->outgoing)),
					strval($this->getEmptyValue($row['call_trafic']->avg_outgoing_duration)),
			);

			$sheet->row($row_num, $row);
			$row_num++;
		}

		$row_num++;
		$sheet->cell('A' . $row_num . ':K' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
			$cell->setAlignment('center');
		});
		$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');

		$row = array(
				'Total',
				strval($this->getEmptyValue($data['summary']->total_calls)),
				strval($this->getEmptyValue($data['summary']->answered)),
				strval($this->getEmptyValue($data['summary']->avg_duration)),
				strval($this->getEmptyValue($data['summary']->avg_tta)),
				strval($this->getEmptyValue($data['summary']->abandoned)),
				'', '',
				strval($this->getEmptyValue($data['summary']->abandoned)),
				strval($this->getEmptyValue($data['summary']->outgoing)),
				strval($this->getEmptyValue($data['summary']->avg_outgoing_duration)),
		);

		$sheet->row($row_num, $row);
		$row_num++;

		$row_num += 2;
//
//
//		$sheet->mergeCells('C' . $row_num . ':E' . $row_num);
//		$sheet->cell('C' . $row_num, function($cell) use($data) {
//			$cell->setValue('Agent Activity Duration');
//			$cell->setAlignment('center');
//		});
//
//		$row_num += 2;
//		$column_name = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
//
//		// table header
//		$table_header = [];
//		$count = 0;
//		foreach($data['summary'] as $row) {
//			$table_header[] = $row->status;
//			$count++;
//		}
//		$sheet->row($row_num, $table_header);
//
//		if( $count > 0 )
//		{
//			$sheet->cell('A' . $row_num . ':' . $column_name[$count-1] . $row_num, function ($cell) {
//				$cell->setFontColor('#fcf9f9');
//				$cell->setBackground('#0a5bbe');
//			});
//		}
//
//
//		$row_num++;
//
//		$row_value = [];
//		foreach($data['summary'] as $row) {
//			$row_value[] = $row->duration;
//		}
//
//		$sheet->row($row_num, $row_value);
//		$row_num++;

		return $row_num;
	}


	public function getGuestserviceReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'Date');

		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);

		$report['department_tag'] = $request->get('department_tags','[]');
		$report['department_tags'] = json_decode($report['department_tag']);

		$report['department_function_tag'] = $request->get('department_function_tags','[]');
		$report['department_function_tags'] = json_decode($report['department_function_tag']);

		$report['item_tag'] = $request->get('item_tags','[]');
		$report['item_tags'] = json_decode($report['item_tag']);

		$report['staff_tag'] = $request->get('staff_tags','[]');
		$report['staff_tags'] = json_decode($report['staff_tag']);

		$report['category_tag'] = $request->get('category_tags','[]');
		$report['category_tags'] = json_decode($report['category_tag']);

		$report['location_tag'] = $request->get('location_tags','[]');
		$report['location_tags'] = json_decode($report['location_tag']);

		$report['floor_tag'] = $request->get('floor_tags','[]');
		$report['floor_tags'] = json_decode($report['floor_tag']);

		$report['build_tag'] = $request->get('build_tags','[]');
		$report['build_tags'] = json_decode($report['build_tag']);


		$report['status_tag'] = $request->get('status_tags','[]');
		$report['status_tags'] = json_decode($report['status_tag']);

		$report['ticket_type'] = $request->get('ticket_type_tags', '[]');
		$report['ticket_types'] = json_decode($report['ticket_type']);

		$report['orderby'] = $request->get('field', 'st.id');
		$report['sort'] = $request->get('sort', 'asc');
		$report['property_id'] = $request->get('property_id', '4');

		$report['escalate_flag'] = $request->get('escalated_flag', 'false');
		$report['filter_id'] = $request->get('id');

		$report['chart_graph_flag'] = $request->get('chart_graph_flag', 'true');

		return $this->makeGuestserviceReportData($report);
	}

	public function makeGuestserviceReportData($report)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		if( !isset($report['chart_graph_flag']) )
			$report['chart_graph_flag'] = 'true';

		if($report_by == "Staff") {
			$ret = $this->makeGuestserviceReportDataByOther($report);
		}else if($report_by == "Amenities") {
			$ret = $this->makeGuestserviceReportDataByAmenities($report);
		}
		else if($report_by == "Floor") {
			$ret = $this->makeGuestserviceReportDataByFloor($report);
		}
		else if($report_by == "Complete Comments") {
			$ret = $this->makeGuestserviceReportDataByCompComment($report);
		}
		else {
			$ret = $this->makeGuestserviceReportDataByOther($report);
		}

		$ret['chart_graph_flag'] = $report['chart_graph_flag'];

		return $ret;
	}

	public function makeGuestserviceReportDataByFloor($report){

		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$department_tag = $report['department_tag'];
		$department_tags = $report['department_tags'];

		$department_function_tag = $report['department_function_tag'];
		$department_function_tags = $report['department_function_tags'];

		$item_tag = $report['item_tag'];
		$item_tags = $report['item_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];


		$floor_tags = $report['floor_tags'];

		$build_tags = $report['build_tags'];

		$escalate_flag = $report['escalate_flag'];
		$filter_id = $report['filter_id'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$ticket_type = $report['ticket_type'];
		$ticket_types = $report['ticket_types'];

		$staff_tags = $report['staff_tags'];

		$category_tags = $report['category_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$ret = [];

		$new_status_tags = [];
		$escalated_flag = false;

		$status_name = array('Completed', 'Open', 'Escalated', 'Timeout', 'Canceled', 'Scheduled', 'Unassigned');
		$ticket_type_name = array('', 'Guest Request', 'Department Request', 'Complaint', 'Managed Task');


		// Guest request
		$summary_query1 = DB::table('services_task as st')
							->leftJoin('services_task_list as tl', 'st.task_list', '=', 'tl.id')
							->join('services_task_group_members as tgm', 'tl.id', '=', 'tgm.task_list_id')
							->join('services_task_group as tg', 'tgm.task_grp_id', '=', 'tg.id')
							->leftJoin('services_task_category as tc', 'tl.category_id', '=', 'tc.id')
							->leftJoin('common_users as cu', 'st.dispatcher', '=', 'cu.id')
							->leftJoin('common_users as cu1', 'st.finisher', '=', 'cu1.id')
							->leftJoin('common_users as cu2', 'st.requester_id', '=', 'cu2.id')
							->leftJoin('services_dept_function as df', 'st.dept_func', '=', 'df.id')
							->leftJoin('common_guest as cg', function($join) {
								$join->on('st.guest_id', '=', 'cg.guest_id');
								$join->on('st.property_id', '=', 'cg.property_id');
							})
							->leftJoin('common_department as cd', 'st.department_id', '=', 'cd.id')
							->leftJoin('services_location as sl', 'st.location_id', '=', 'sl.id')
							->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
							->leftJoin('common_floor as cf', 'sl.floor_id', '=', 'cf.id')
							->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id');

		$summary_query1->whereBetween('st.start_date_time', array($start_time, $end_time));
		if (count($department_tags) > 0)
			$summary_query1->whereIn('cd.department', $department_tags);

		if (count($department_function_tags) > 0)
			$summary_query1->whereIn('df.function', $department_function_tags);

		if (count($item_tags) > 0)
			$summary_query1->whereIn('tl.task', $item_tags);

		if (count($floor_tags) > 0)
			$summary_query1->whereIn('cf.description', $floor_tags);

		if (count($build_tags) > 0)
			$summary_query1->whereIn('cb.name', $build_tags);



		if (count($location_tags) > 0) {
			$ids = $this->getLocationIds($location_tags);
			$summary_query1->whereIn('st.location_id', $ids);
		}

		if (count($category_tags) > 0)
			$summary_query1->whereIn('tc.id', $category_tags);

		if (count($status_tags) > 0) {
			if ($escalated_flag == false)
			$summary_query1->whereIn('st.status_id', $status_tags);
			else {
				$summary_query1->where(function ($subquery) use ($status_tags) {    // vacation period
					$subquery->whereIn('st.status_id', $status_tags)
						->orWhere('st.escalate_flag', '=', 1);
				});
			}
		} else {
			if ($escalated_flag == true)
			$summary_query1->where('st.escalate_flag', '=', 1);
		}

		if (count($ticket_types) > 0){
			$summary_query1->whereIn('st.type', $ticket_types);
		}
		$q = clone $summary_query1;

		$complete = $q
					->groupBy('cf.id')
					->groupBy('st.id')
					->groupBy('st.location_id')
					->select(DB::raw('st.department_id,cf.id,cf.floor, cb.name as building, st.id,st.type,st.status_id,st.running,st.location_id,tl.task,cd.department,st.start_date_time ,CONCAT_WS(" ", cu.first_name, cu.last_name) as attendant_wholename,
					st.escalate_flag, st.closed_flag,st.duration,tg.max_time, CONCAT_WS(" ", cu1.first_name, cu1.last_name) as finisher_wholename,
					sl.name as lgm_name, slt.type as lgm_type
					'))
					->get();

		$completed = [];

		foreach($complete as $row)
		{
			//$key = substr($row->start_date_time, 0, 10);
			$key = 'Building:' . $row->building . ' - Floor:' . $row->floor;
			$location = $row->lgm_type . '' . $row->lgm_name;

			if (($row->status_id == 1) && ($row->running == 0)){
				$row->status = 5;
			}
			else if ($row->escalate_flag == 1 && $row->status_id == 0){
				$row->status = 6;
			}
			else if ($row->closed_flag == 1 && $row->status_id == 3){
				$row->status = 7;
			}
			else{
				$row->status = $row->status_id;
			}

            $completed[$key]['floor'][$location]['location'][] = $row;
		}

		$ret['completed_floor'] = $completed;

		$summary_data = [];

		$group_field = 'cf.id';

		$summary = $summary_query1
			->groupBy(DB::raw('group_key'))
			->select(DB::raw('
			     					count(*) as total, cd.department, cf.floor as group_key1,cb.name as building,
			     					COALESCE(sum(st.status_id = 0), 0) as completed,
									 COALESCE(sum(st.status_id = 1), 0) as opened,
			     					COALESCE(sum(st.escalate_flag = 1 and st.status_id = 0), 0) as escalated,
									 COALESCE(sum(st.status_id = 3 and st.closed_flag = 0), 0) as timeout,
									 COALESCE(sum(st.closed_flag = 1 and st.status_id = 3), 0) as closed,
			     					COALESCE(sum(st.status_id = 4), 0) as canceled,
			     					COALESCE(sum(st.status_id = 5), 0) as scheduled,
			     					SEC_TO_TIME(ROUND(AVG(st.duration))) as completed_time,
			     					' . $group_field . ' as group_key,tc.name as category'))
			->distinct()
			->get();

			foreach ($summary as $row) {
				$group_key = $row->group_key;

				$summary_data[$group_key] = $row;

			}

		$ret['summary_data'] = $summary_data;


		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;

		if (count($ticket_types) > 0) {
			$label = '';
			for ($i = 0; $i < count($ticket_types); $i++) {
				if ($i > 0)
					$label = $label . ', ';
				$label = $label . $ticket_type_name[$ticket_types[$i]];
			}
			$ret['ticket_type'] = $label;
		} else
			$ret['ticket_type'] = '';

			if (count($status_tags) > 0) {
				$label = '';
				for ($i = 0; $i < count($status_tags); $i++) {
					if ($i > 0)
						$label = $label . ', ';
					$label = $label . $status_name[$status_tags[$i]];
				}
				$ret['status'] = $label;
			} else
				$ret['status'] = '';

				if (count($category_tags) > 0) {
					$label = '';
					for ($i = 0; $i < count($category_tags); $i++) {
						if ($i > 0)
							$label = $label . ', ';
						$label = $label . $category_tags[$i];
					}
					$ret['category'] = $label;
				} else
					$ret['category'] = '';

		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M H:i") . ' to ' . date_format(new DateTime($end_time), "d-M H:i");
		$ret['department'] = $department_tags;
		if ($report_type  == 'Summary' && $report_by == 'Department'){
			$ret['title'] = 'Executive Summary By Department';
		}
		else{
			$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		}
		$ret['location'] = $location_tags;
		$ret['item'] = $item_tags;
		//$ret['status'] = $status_tags;
		$start = microtime(true);
		$end = microtime(true);

		$ret['time'] = $end - $start;


		return $ret;

	}

	public function makeGuestserviceReportDataByCompComment($report){

		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$department_tag = $report['department_tag'];
		$department_tags = $report['department_tags'];

		$department_function_tag = $report['department_function_tag'];
		$department_function_tags = $report['department_function_tags'];

		$item_tag = $report['item_tag'];
		$item_tags = $report['item_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];


		$floor_tags = $report['floor_tags'];

		$build_tags = $report['build_tags'];

		$escalate_flag = $report['escalate_flag'];
		$filter_id = $report['filter_id'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$ticket_type = $report['ticket_type'];
		$ticket_types = $report['ticket_types'];

		$staff_tags = $report['staff_tags'];

		$category_tags = $report['category_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$ret = [];

		$new_status_tags = [];
		$escalated_flag = false;

		$status_name = array('Completed', 'Open', 'Escalated', 'Timeout', 'Canceled', 'Scheduled', 'Unassigned');
		$ticket_type_name = array('', 'Guest Request', 'Department Request', 'Complaint', 'Managed Task');


		// Guest request
		$summary_query1 = DB::table('services_task as st')
							->Join('services_task_list as tl', 'st.task_list', '=', 'tl.id')
							->join('services_task_group_members as tgm', 'tl.id', '=', 'tgm.task_list_id')
							->join('services_task_group as tg', 'tgm.task_grp_id', '=', 'tg.id')
							->Join('common_users as cu', 'st.dispatcher', '=', 'cu.id')
							->Join('common_users as cu1', 'st.finisher', '=', 'cu1.id')
							->Join('services_dept_function as df', 'st.dept_func', '=', 'df.id')
							->Join('services_task_log as stl', function($join) {
								$join->on('st.id', '=', 'stl.task_id');
								$join->where('stl.status', '=', 'Completed');
							})
							->Join('common_department as cd', 'st.department_id', '=', 'cd.id')
							->Join('services_location as sl', 'st.location_id', '=', 'sl.id')
							->Join('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
							->where('st.status_id' , 0);

		$summary_query1->whereBetween('st.start_date_time', array($start_time, $end_time));
		if (count($department_tags) > 0)
			$summary_query1->whereIn('cd.department', $department_tags);

		if (count($department_function_tags) > 0)
			$summary_query1->whereIn('df.function', $department_function_tags);

		if (count($item_tags) > 0)
			$summary_query1->whereIn('tl.task', $item_tags);

		if (count($floor_tags) > 0)
			$summary_query1->whereIn('cf.description', $floor_tags);

		if (count($build_tags) > 0)
			$summary_query1->whereIn('cb.name', $build_tags);



		if (count($location_tags) > 0) {
			$ids = $this->getLocationIds($location_tags);
			$summary_query1->whereIn('st.location_id', $ids);
		}

		if (count($ticket_types) > 0){
			$summary_query1->whereIn('st.type', $ticket_types);
		}
		$q = clone $summary_query1;

		$complete = $q
					->groupBy('date')
					->groupBy('cd.department')
					->groupBy('st.id')
					->select(DB::raw('st.department_id,st.id,st.type,st.status_id,st.running,st.location_id,tl.task,cd.department,DATE(st.start_date_time) as date,TIME(st.start_date_time) as time,CONCAT_WS(" ", cu.first_name, cu.last_name) as attendant_wholename,
					st.escalate_flag, st.closed_flag,st.duration,tg.max_time, CONCAT_WS(" ", cu1.first_name, cu1.last_name) as finisher_wholename,
					sl.name as lgm_name, slt.type as lgm_type, stl.comment
					'))
					->get();

		$completed = [];

		foreach($complete as $row)
		{

			$row->log_comment = $row->comment;
			$key = $row->date;
			$department = $row->department;


			if ($row->escalate_flag == 1){
				$row->status_id = 5;
			}

            $completed[$key]['date'][$department]['department'][] = $row;
		}

		$ret['completed_comment'] = $completed;





		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;

		if (count($ticket_types) > 0) {
			$label = '';
			for ($i = 0; $i < count($ticket_types); $i++) {
				if ($i > 0)
					$label = $label . ', ';
				$label = $label . $ticket_type_name[$ticket_types[$i]];
			}
			$ret['ticket_type'] = $label;
		} else
			$ret['ticket_type'] = '';

			if (count($status_tags) > 0) {
				$label = '';
				for ($i = 0; $i < count($status_tags); $i++) {
					if ($i > 0)
						$label = $label . ', ';
					$label = $label . $status_name[$status_tags[$i]];
				}
				$ret['status'] = $label;
			} else
				$ret['status'] = '';

				if (count($category_tags) > 0) {
					$label = '';
					for ($i = 0; $i < count($category_tags); $i++) {
						if ($i > 0)
							$label = $label . ', ';
						$label = $label . $category_tags[$i];
					}
					$ret['category'] = $label;
				} else
					$ret['category'] = '';

		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M H:i") . ' to ' . date_format(new DateTime($end_time), "d-M H:i");
		$ret['department'] = $department_tags;
		if ($report_type  == 'Summary' && $report_by == 'Department'){
			$ret['title'] = 'Executive Summary By Department';
		}
		else{
			$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		}
		$ret['location'] = $location_tags;
		$ret['item'] = $item_tags;
		//$ret['status'] = $status_tags;
		$start = microtime(true);
		$end = microtime(true);

		$ret['time'] = $end - $start;


		return $ret;

	}

	public function makeGuestserviceReportDataByAmenities($report){
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$department_tags = $report['department_tags'];
		$department_tag = $report['department_tag'];

		$department_function_tags = $report['department_function_tags'];
		$department_function_tag = $report['department_function_tag'];

		$item_tag = $report['item_tag'];
		$item_tags = $report['item_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];

		$escalate_flag = $report['escalate_flag'];
		$filter_id = $report['filter_id'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$ticket_type = $report['ticket_type'];
		$ticket_types = $report['ticket_types'];

		$staff_tags = $report['staff_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$new_status_tags = [];
		$escalated_flag = false;
		foreach ($status_tags as $value) {
			if ($value == 2)
				$escalated_flag = true;
			else
				$new_status_tags[] = $value;
		}

		$status_tags = $new_status_tags;

		$ret = [];

		$query = DB::table('services_task as st')
				->leftJoin('common_users as cu', 'st.dispatcher', '=', 'cu.id')
				->leftJoin('common_job_role as jr', 'jr.id', '=', 'cu.job_role_id')
				->leftJoin('common_department as de','cu.dept_id','=','de.id')
				->leftJoin('services_task_list as tl','tl.id','=','st.task_list')
				->leftJoin('common_guest as cg', function($join) {
					$join->on('st.guest_id', '=', 'cg.guest_id');
					$join->on('st.property_id', '=', 'cg.property_id');
				})
				->where('tl.cost', '!=', 0)
				->where('st.property_id', $property_id);

		if (count($item_tags) > 0)
			$query->whereIn('tl.task', $item_tags);

		if (count($location_tags) > 0) {
			$ids = $this->getLocationIds($location_tags);
			$query->whereIn('st.location_id', $ids);
		}
		if (count($status_tags) > 0) {
			if ($escalated_flag == false)
				$query->whereIn('st.status_id', $status_tags);
			else {
				$query->where(function ($subquery) use ($status_tags) {    // vacation period
					$subquery->whereIn('st.status_id', $status_tags)
							->orWhere('st.escalate_flag', '=', 1);
				});
			}
		} else {
			if ($escalated_flag == true)
				$query->where('st.escalate_flag', '=', 1);
		}
		$totallist = $query
			//	->where('st.dispatcher', '>', 0)
				->whereBetween('st.start_date_time', array($start_time, $end_time))
				->groupBy('st.task_list')
				->select(DB::raw('tl.task as task_name, SUM(st.quantity) as quality, tl.cost as cost'))
				->get();
		$query = DB::table('services_task as st')
				->leftJoin('common_users as cu', 'st.dispatcher', '=', 'cu.id')
				->leftJoin('common_users as cu1', 'st.finisher', '=', 'cu1.id')
				->leftJoin('common_room as cr', 'cr.id', '=', 'st.room')
				->leftJoin('common_job_role as jr', 'jr.id', '=', 'cu.job_role_id')
				->leftJoin('common_department as de','cu.dept_id','=','de.id')
				->leftJoin('services_task_list as tl','tl.id','=','st.task_list')
				->leftJoin('services_task_log as stl', function($join) {
					$join->on('st.id', '=', 'stl.task_id');
					$join->where('stl.log_type', 'like', 'Created');
				})
				->leftJoin('common_guest as cg', function($join) {
					$join->on('st.guest_id', '=', 'cg.guest_id');
					$join->on('st.property_id', '=', 'cg.property_id');
				})
				->where('tl.cost', '!=', 0)
				->where('st.property_id', $property_id);

		if (count($item_tags) > 0)
			$query->whereIn('tl.task', $item_tags);

		if (count($location_tags) > 0) {
			$ids = $this->getLocationIds($location_tags);
			$query->whereIn('st.location_id', $ids);
		}
		if (count($status_tags) > 0) {
			if ($escalated_flag == false)
				$query->whereIn('st.status_id', $status_tags);
			else {
				$query->where(function ($subquery) use ($status_tags) {    // vacation period
					$subquery->whereIn('st.status_id', $status_tags)
							->orWhere('st.escalate_flag', '=', 1);
				});
			}
		} else {
			if ($escalated_flag == true)
				$query->where('st.escalate_flag', '=', 1);
		}
		$detaillist = $query
			//	->where('st.dispatcher', '>', 0)
				->whereBetween('st.start_date_time', array($start_time, $end_time))
				//->groupBy('st.task_list')
				->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as staffname, CONCAT_WS(" ", cu1.first_name, cu1.last_name) as attendant_name, st.id, st.type, st.start_date_time, st.quantity, cr.room, tl.task as task_name, cg.guest_name, tl.cost as cost,stl.comment'))
				->orderby('st.start_date_time', 'asc')
				->get();

		$ret['detail_report'] = $detaillist;
		$ret['summary_report'] = $totallist;
		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['department'] = $department_tags;
		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");

		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';

		$staff_name = DB::table('common_users')
				->whereIn('id', $staff_tags)
				->select(DB::raw('CONCAT_WS(" ", first_name, last_name) as staffname'))
				->get();
		$ret['staff'] = $staff_name;


		if( $report['chart_graph_flag'] == 'true' )
		{
			//$ret['graph1'] = $this->makeGuestsericeStaffGraph($ret);
			//$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : 'style=width:80%';
		}

		return $ret;
	}
	public function makeGuestserviceReportDataByStaff($report)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$department_tags = $report['department_tags'];
		$department_tag = $report['department_tag'];

		$department_function_tags = $report['department_function_tags'];
		$department_function_tag = $report['department_function_tag'];

		$item_tag = $report['item_tag'];
		$item_tags = $report['item_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];

		$escalate_flag = $report['escalate_flag'];
		$filter_id = $report['filter_id'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$ticket_type = $report['ticket_type'];
		$ticket_types = $report['ticket_types'];

		$staff_tags = $report['staff_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('services_task as st')
			->leftJoin('common_users as cu', 'st.dispatcher', '=', 'cu.id')
			->leftJoin('common_job_role as jr', 'jr.id', '=', 'cu.job_role_id')
			->leftJoin('common_department as de','cu.dept_id','=','de.id')
			->where('st.property_id', $property_id);

		if(count($department_tag) > 0 )
			$query->whereIn('de.department', $department_tag);

		if(count($staff_tags) > 0)
			$query->whereIn('st.dispatcher', $staff_tags);

		$user_list = $query
			->where('st.dispatcher', '>', 0)
			->whereBetween('st.start_date_time', array($start_time, $end_time))
			->groupBy('st.dispatcher')
			->select(DB::raw('st.dispatcher as user_id, 
					CONCAT_WS(" ", cu.first_name, cu.last_name) as staffname, 
					cu.first_name,
					jr.job_role ,
					CAST(COALESCE(sum(st.status_id = 0 and st.duration <= st.max_time), 0) AS UNSIGNED) as ontime,
					CAST(COALESCE(sum(st.status_id = 0 and st.duration > st.max_time), 0) AS UNSIGNED) as delay,
					sum(st.duration) as totaltimeontask,
					CAST(COALESCE(sum(st.status_id >= 0), 0) AS UNSIGNED) as total'))
			->get();

		$detail_report = [];
		$summary_report = [];
		for($i = 0 ; $i < count($user_list) ; $i++) {
			$mobile_login_proper = '{"shift_change":{"id":';
			$data = DB::table('common_user_transaction')
				->whereBetween('created_at', array($start_time, $end_time))
				->where('user_id', $user_list[$i]->user_id)
				->get();

			$login_time = date_format(new DateTime($start_time), "Y-m-d H:i:s");

			$user_login_count = 0;
			$duration_sum = 0;
			$staff_name = '';
			$job_role = '';

			$total = $user_list[$i] ->total;
			$ontime = $user_list[$i] ->ontime;
			$delayed = $user_list[$i] ->delay;
			$first_name = $user_list[$i] ->first_name;
			$totaltimeontask = $user_list[$i] ->totaltimeontask;

			$percent = floor(100/$total*$ontime);
			$staff_name = $user_list[$i]->staffname;
			$job_role = $user_list[$i]->job_role;

			for($j = 0 ; $j < count($data) ; $j++) {

				//get created time from mobile iogin
				if($data[$j]->action == 'login'&& substr($data[$j]->detail,0, 22) === $mobile_login_proper) {

					if($user_login_count == 0) {
						$login_time = $data[$j]->created_at; // get first login time during many login times
					}
					$user_login_count++;
				}
				if($data[$j]->action == 'logout'&& $user_login_count > 0) {
					$logout_time = $data[$j]->created_at;
					$duration = strtotime($logout_time)- strtotime($login_time);
					$detail = [];

					$user_login_count = 0 ;
					$key = date_format(new DateTime($data[$j]->created_at), "Y-M-d");
					$detail['date'] = $key;

					$detail['staffname'] = $staff_name;
					$detail['job_role'] = $job_role;
					// $detail['total'] = $total;
					// $detail['ontime'] = $ontime;
					// $detail['percent'] = $percent;
					$detail['login_time'] = $login_time;
					$detail['logout_time'] = $logout_time;
					$detail['duration'] = $duration;

					if( !array_key_exists($key, $detail_report ))
						$detail_report[$key] = [];
                    $detail_report[$key][] = $detail;

					$summary = [];

					$summary['staffname'] = $staff_name;
					$summary['first_name'] = $first_name;
					$summary['job_role'] = $job_role;
					$summary['total'] = $total;
					$summary['ontime'] = $ontime;
					$summary['delayed'] = $delayed;
					$summary['percent'] = $percent;
					// $summary['duration'] = $duration;
					$summary['timeontask'] = $totaltimeontask;

					$summary_key =  $user_list[$i]->staffname;

					if( !array_key_exists($summary_key, $summary_report ) ) {
						$duration_sum = $duration;
						$summary['duration'] = $duration_sum;
					}else {
						$duration_sum = $duration_sum + $duration;
						$summary['duration'] = $duration_sum;
					}

					$utilization = floor(($totaltimeontask/$duration_sum)*100);
					$summary['utilization'] = $utilization;
					$summary_report[$summary_key] = $summary;
				}
			}

			//when have not logout,
			if($user_login_count > 0){
				$logout_time = date_format(new DateTime($end_time), "Y-m-d H:i:s");
				$duration = strtotime($logout_time)- strtotime($login_time);
				$detail = [];

				$user_login_count = 0 ;
				$key = date_format(new DateTime($end_time), "Y-m-d");
				$detail['date'] = $key;

				$detail['staffname'] = $staff_name;
				$detail['job_role'] = $job_role;
				// $detail['total'] = $total;
				// $detail['ontime'] = $ontime;
				// $detail['delayed'] = $delayed;
				// $detail['percent'] = $percent;
				$detail['login_time'] = $login_time;
				$detail['logout_time'] = $logout_time;
				$detail['duration'] = $duration;

				if( !array_key_exists($key, $detail_report))
					$detail_report[$key] = [];
                $detail_report[$key][] = $detail;

				$summary = [];
				$summary['staffname'] = $staff_name;
				$summary['first_name'] = $first_name;
				$summary['job_role'] = $job_role;
				$summary['total'] = $total;
				$summary['ontime'] = $ontime;
				$summary['delayed'] = $delayed;
				$summary['percent'] = $percent;
				// $summary['duration'] = $duration;
				$summary['timeontask'] = $totaltimeontask;
				$summary_key =  $staff_name;


				if( !array_key_exists($summary_key, $summary_report ) ) {
					$duration_sum = $duration;
					$summary['duration'] = $duration_sum;
				} else {
					$duration_sum = $duration_sum + $duration;
					$summary['duration'] = $duration_sum;
				}

				$utilization = floor(100/$duration_sum*$totaltimeontask);
				$summary['utilization'] = $utilization;
				$summary_report[$summary_key] = $summary;
			}
			//
		}


		$ret['detail_report'] = $detail_report;
		$ret['summary_report'] = $summary_report;
		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['department'] = $department_tag;
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';

		$staff_name = DB::table('common_users')
			->whereIn('id', $staff_tags)
			->select(DB::raw('CONCAT_WS(" ", first_name, last_name) as staffname'))
			->get();
		$ret['staff'] = $staff_name;

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeGuestsericeStaffGraph($ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : 'style=width:80%';
		}

		return $ret;
	}

	private function makeGuestsericeStaffGraph($ret) {
		$summarylist = $ret['summary_report'];

		// graph data
		$param = [];

		$param['type'] = 'png';
		$param['scale'] = 2;

		$width = 1000;
		$height = Functions::isSuperAgent() ? 400: 300;

		$options = [];
		$options['title'] = array('text' => 'Staff Efficiency');
		$options['chart'] = array('type' => 'column', 'width' => $width, 'height' => $height);
		$options['colors'] = ['#70ad47', '#ffc000', '#8ece4a', '#ff5151'];


		$categories = [];
		$series = [];

		foreach($summarylist as $key => $row) {
			$categories[] = $row['first_name'];
		}

		$list = [
			['On Time', 'ontime', 'column', 0],
			['Delayed', 'delayed', 'column', 0],
			['Efficiency(%)', 'percent', 'line', 1],
			['Utilization(%)', 'utilization', 'line', 1],
		];

		foreach($list as $key1 => $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['type'] = $row1[2];
			$item['yAxis'] = $row1[3];
			$item['data'] = [];

			foreach($summarylist as $key => $row) {
				$value = $row[$row1[1]];
				$value = (int)$value;
				$item['data'][] = $value;
			}

			$series[] = $item;
		}

		$options['xAxis'] = [array('categories' => $categories)];
		$options['yAxis'] = array('min' => 0, 'title' => null);

		$options['yAxis'] = [];

		$yaxis1 = array('title' => array('text' => 'Count'), 'labels' => array('format' => '{value}'), 'min' => 0);
		$options['yAxis'][] = $yaxis1;

		$yaxis2 = array('title' => array('text' => 'Percent'), 'labels' => array('format' => '{value}%'), 'opposite' => true, 'min' => 0);
		$options['yAxis'][] = $yaxis2;

		// $yaxis2 = array('title' => null);
		// $options['yAxis'][] = $yaxis2;

		$options['plotOptions'] = array('series' => array('stacking' => 'normal',
					'dataLabels' => array('enabled' => true,
											'style' => array('color' => '#555555', "textOutline" => null)))
										);
		$options['series'] = $series;
		$options['legend'] = array(
									'layout' => 'vertical',
									'align' => 'right',
									'verticalAlign' => 'middle');

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeGuestserviceReportDataByOther($report)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$department_tag = $report['department_tag'];
		$department_tags = $report['department_tags'];

		$department_function_tag = $report['department_function_tag'];
		$department_function_tags = $report['department_function_tags'];

		$item_tag = $report['item_tag'];
		$item_tags = $report['item_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];

		$escalate_flag = $report['escalate_flag'];
		$filter_id = $report['filter_id'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$ticket_type = $report['ticket_type'];
		$ticket_types = $report['ticket_types'];

		$staff_tags = $report['staff_tags'];

		$category_tags = $report['category_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];

		$ret = [];

		$new_status_tags = [];
		$escalated_flag = false;
		foreach ($status_tags as $value) {
			if ($value == 2)
				$escalated_flag = true;
			else
				$new_status_tags[] = $value;
		}

		$status_tags = $new_status_tags;

		// Guest request
		$data_query = DB::table('services_task_log as stl')
			->join('services_task as st', 'stl.task_id', '=', 'st.id')
			->leftJoin('services_location as sl', 'st.location_id', '=', 'sl.id')
			->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id');

		$summary_query = DB::table('services_task as st')
						->leftJoin('services_task_list as t', 'st.task_list', '=', 't.id')
						->leftJoin('services_task_category as c', 't.category_id', '=', 'c.id')
						->leftJoin('services_location as sl', 'st.location_id', '=', 'sl.id')
						->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id');
		if (count($category_tags) > 0)
			$summary_query->whereIn('c.id', $category_tags);

		$query_list = array($data_query, $summary_query);
		foreach ($query_list as $query) {
			$query->leftJoin('services_dept_function as df', 'st.dept_func', '=', 'df.id')
				->leftJoin('services_priority as sp', 'st.priority', '=', 'sp.id')
				->leftJoin('common_users as cu', 'st.dispatcher', '=', 'cu.id')
				->leftJoin('common_users as cu1', 'st.attendant', '=', 'cu1.id')
				->leftJoin('common_room as cr', 'st.room', '=', 'cr.id')
				->leftJoin('services_task_list as tl', 'st.task_list', '=', 'tl.id')
				->leftJoin('services_task_category as tc', 'tl.category_id', '=', 'tc.id')
				->leftJoin('common_department as cd', 'st.department_id', '=', 'cd.id')
				->leftJoin('common_job_role as jr', 'jr.id', '=', 'cu.job_role_id')
//				->leftJoin('common_guest as cg', 'st.guest_id', '=', 'cg.guest_id')
				->leftJoin('common_guest as cg', function($join) {
					$join->on('st.guest_id', '=', 'cg.guest_id');
					$join->on('st.property_id', '=', 'cg.property_id');
				})
				->leftJoin('common_users as cu2', 'st.user_id', '=', 'cu2.id')
				// ->leftJoin('services_shift_group_members as sgm', 'st.dispatcher', '=', 'sgm.user_id')
				// ->leftJoin('services_shift_group as sg', 'sgm.shift_group_id', '=', 'sg.id')
				// ->leftJoin('services_shifts as sh', 'sg.shift', '=', 'sh.id')
				->leftJoin('common_user_group as cug', 'st.group_id', '=', 'cug.id');

			//if ($report_by == 'Request Date') {
			$query->whereBetween('st.start_date_time', array($start_time, $end_time));
			//}
			if (count($department_tags) > 0)
				$query->whereIn('cd.department', $department_tags);

			if (count($department_function_tags) > 0)
				$query->whereIn('df.function', $department_function_tags);

			if (count($item_tags) > 0)
				$query->whereIn('tl.task', $item_tags);

			if (count($location_tags) > 0) {
				$ids = $this->getLocationIds($location_tags);
				$query->whereIn('st.location_id', $ids);
			}


			if (count($status_tags) > 0) {
				if ($escalated_flag == false)
					$query->whereIn('st.status_id', $status_tags);
				else {
					$query->where(function ($subquery) use ($status_tags) {    // vacation period
						$subquery->whereIn('st.status_id', $status_tags)
							->orWhere('st.escalate_flag', '=', 1);
					});
				}
			} else {
				if ($escalated_flag == true)
					$query->where('st.escalate_flag', '=', 1);
			}

			if (count($ticket_types) > 0)
				$query->whereIn('st.type', $ticket_types);
		}

		$data_query->leftJoin('common_users as cu3', 'stl.user_id', '=', 'cu3.id');
		$search_id = [];
		if ($escalate_flag == 'true') {
			//$userescalated_id = [];
			// get all teh ids which satisfy below where
			$userescalated_id = DB::table('services_task_log as stlt')
				->leftJoin('common_users as cu4', 'cu4.id', '=', 'stlt.user_id')
				->where('cu4.id', '=', $filter_id)
				->where('stlt.log_type', 'like', 'Escalated')
				->select(DB::raw('stlt.task_id'))
				->get();

			//edit data_query to add where id IN (ABoved ids)
			foreach ($userescalated_id as $id1) {

				$search_id[] = $id1->task_id;

			}
			$data_query->whereIn('st.id', $search_id);
		}

		$data_list = $data_query
			->orderBy($orderby, $sort)
			->select(DB::raw('st.*, df.function, sp.priority as priority_name, cu.username, cu1.username as attendant_name, cr.room,jr.job_role as job, 
								tl.task as task_name, cd.department, sl.name as lgm_name, slt.type as lgm_type,
								cg.guest_name, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, CONCAT_WS(" ", cu1.first_name, 
								cu1.last_name) as attendant_wholename, cu.mobile as device, CONCAT_WS(" ", cu2.first_name, 
								cu2.last_name) as manage_user_name, cu2.mobile as manage_user_mobile, cug.name as manage_user_group,
								 duration as proc_time, 
								 stl.comment as sub_comment, stl.log_type as sub_status, stl.log_time,
								 CONCAT_WS(" ", cu3.first_name, cu3.last_name) as sub_wholename,stl.comment'))
			->get();

		$summary_query1 = DB::table('services_task as st')
							->leftJoin('services_task_list as tl', 'st.task_list', '=', 'tl.id')
							->join('services_task_group_members as tgm', 'tl.id', '=', 'tgm.task_list_id')
							->join('services_task_group as tg', 'tgm.task_grp_id', '=', 'tg.id')
							->leftJoin('services_task_category as tc', 'tl.category_id', '=', 'tc.id')
							->leftJoin('common_users as cu', 'st.dispatcher', '=', 'cu.id')
							->leftJoin('common_users as cu1', 'st.finisher', '=', 'cu1.id')
							->leftJoin('common_users as cu2', 'st.requester_id', '=', 'cu2.id')
							->leftJoin('services_dept_function as df', 'st.dept_func', '=', 'df.id')
							->leftJoin('common_guest as cg', function($join) {
								$join->on('st.guest_id', '=', 'cg.guest_id');
								$join->on('st.property_id', '=', 'cg.property_id');
							})
							->leftJoin('common_department as cd', 'st.department_id', '=', 'cd.id')
							->leftJoin('services_location as sl', 'st.location_id', '=', 'sl.id')
							->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id');

		$summary_query1->whereBetween('st.start_date_time', array($start_time, $end_time));
		if (count($department_tags) > 0)
			$summary_query1->whereIn('cd.department', $department_tags);

		if (count($department_function_tags) > 0)
			$summary_query1->whereIn('df.function', $department_function_tags);

		if (count($item_tags) > 0)
			$summary_query1->whereIn('tl.task', $item_tags);

		if (count($location_tags) > 0) {
			$ids = $this->getLocationIds($location_tags);
			$summary_query1->whereIn('st.location_id', $ids);
		}

		if (count($category_tags) > 0)
			$summary_query1->whereIn('tc.id', $category_tags);

		if (count($status_tags) > 0) {
			if ($escalated_flag == false)
			$summary_query1->whereIn('st.status_id', $status_tags);
			else {
				$summary_query1->where(function ($subquery) use ($status_tags) {    // vacation period
					$subquery->whereIn('st.status_id', $status_tags)
						->orWhere('st.escalate_flag', '=', 1);
				});
			}
		} else {
			if ($escalated_flag == true)
			$summary_query1->where('st.escalate_flag', '=', 1);
		}

		if (count($ticket_types) > 0){
			$summary_query1->whereIn('st.type', $ticket_types);
		}
		$q = clone $summary_query1;

		$complete = $q
					->groupBy('date')
					->groupBy('st.id')
					->groupBy('cd.department')
					->select(DB::raw('st.department_id,st.id,st.type,st.status_id,st.running,st.location_id,tl.task,cd.department,DATE(st.start_date_time) as date,TIME(st.start_date_time) as time,CONCAT_WS(" ", cu.first_name, cu.last_name) as attendant_wholename,
					st.escalate_flag, st.closed_flag,st.duration,tg.max_time, CONCAT_WS(" ", cu1.first_name, cu1.last_name) as finisher_wholename,
					sl.name as lgm_name, slt.type as lgm_type
					'))
					->get();

		$completed = [];

		foreach($complete as $row)
		{
			//$key = substr($row->start_date_time, 0, 10);
			$key = $row->date;
			$department = $row->department;
			if (($row->status_id == 1) && ($row->running == 0)){
				$status = 5;
			}
			else if ($row->escalate_flag == 1 && $row->status_id == 0){
				$status = 6;
			}
			else if ($row->closed_flag == 1 && $row->status_id == 3){
				$status = 7;
			}
			else{
				$status = $row->status_id;
			}

            $completed[$key]['date'][$department]['department'][$status]['status'][] = $row;
		}

		$ret['completed'] = $completed;
		$w = clone $summary_query1;
		$task_list = $w
				->groupBy('st.start_date_time')
				->groupBy('st.id')
				->select(DB::raw('st.*, tl.task, tc.name as category, cg.guest_name, cg.vip, CONCAT_WS(" ", cu.first_name, cu.last_name) as assigned_wholename, sl.name as lgm_name, slt.type as lgm_type,
				CONCAT_WS(" ", cu1.first_name, cu1.last_name) as finished_wholename, SEC_TO_TIME(ROUND(AVG(st.duration))) as duration_time'))
				->get();

		$tasklist = [];
		foreach($task_list as $row){
			$category = $row->category;


			if (($row->status_id == 1) && ($row->running == 0)){
				$row->status = 5;
			}else{
				$row->status = $row->status_id;
			}

			$tasklist[$category][] = $row;
		}
		$ret['tasklist'] = $tasklist;

		$start = microtime(true);
		$location_cache = [];
		for ($i = 0; $i < count($data_list); $i++) {
			$job_role = $data_list[$i]->job;
			$location_id = $data_list[$i]->location_id;
			if ($location_id > 0) {
				if (isset($location_cache[$location_id]))
					$info = $location_cache[$location_id];
				else {
					$info = app('App\Http\Controllers\Frontend\GuestserviceController')->getLocationInfo($data_list[$i]->location_id);
					$location_cache[$location_id] = $info;
				}

				if (!empty($info)) {
					$data_list[$i]->lgm_name = $info->name;
					$data_list[$i]->lgm_type = $info->type;
				} else {
					$data_list[$i]->lgm_name = 'Unknown';
					$data_list[$i]->lgm_type = 'Unknown';
				}
			} else {
				$data_list[$i]->lgm_name = 'Unknown';
				$data_list[$i]->lgm_type = 'Unknown';
			}
			$ret['job'] = $job_role;
		}

		$end = microtime(true);

		$ticket_list = [];

		$omit_num = -1;
		$status_name = array('Completed', 'Open', 'Escalated', 'Timeout', 'Canceled', 'Scheduled', 'Unassigned');
		//	$ret['fields'] = array('ID', 'By','Location', 'Request', 'Status', 'Date', 'Time', 'Duration', 'Comment','Feedback', 'Created By', 'Assignee');
		$ret['fields'] = array('ID','Location', 'Request', 'Status', 'Date','Time','Comment&Feedback', 'User');
		$ret['widths'] = array('8%','16%', '18%', '18%', '10%','10%','22%', '16%');
		foreach ($data_list as $row) {
			switch ($report_by) {
				case 'Date':
					$group_key = substr($row->start_date_time, 0, 10);
					$omit_num = 5;
					break;
				case 'Status':
					if( $row->status_id > 6 )
						$row->status_id = 6;
					$group_key = $status_name[$row->status_id];
					$omit_num = -1;
					break;
				case 'Department':
					$group_key = $row->department;
					$omit_num = -1;
					break;
				case 'Staff':
					$group_key = $row->wholename;
					$omit_num = 10;
					break;
				case 'Item':
					$group_key = $row->task_name;
					$omit_num = 2;
					break;
				case 'Department Function':
					$group_key = $row->function;
					$omit_num = 1;
					break;
				case 'Location':
					$group_key = $row->lgm_name;
					$omit_num = 2;
					break;
				case 'Shift':
					$group_key = $row->sh_name;
					$omit_num = -1;
					break;
				case 'Room':
					$group_key = $row->room;
					$omit_num = 2;
					break;
				case 'Ticket Type':
					$group_key = $row->type;
					$omit_num = 1;
					break;
				default:
					$group_key = substr($row->start_date_time, 0, 10);
					$omit_num = 5;
					break;
			}

			$ticket_list[$group_key][] = $row;
		}

		$ret['ticket_list'] = $ticket_list;


		$group_field = 'DATE(st.start_date_time)';
		switch ($report_by) {
			case 'Date':
				$group_field = 'DATE(st.start_date_time)';
				break;
			case 'Status':
				$group_field = 'st.status_id';
				break;
			case 'Department':
				$group_field = 'cd.department';
				break;
			case 'Staff':
				$group_field = 'CONCAT_WS(" ", cu.first_name, cu.last_name)';
				break;
			case 'Item':
				$group_field = 'tl.task';
				break;
			case 'Ticket Type':
				$group_field = 'st.type';
				break;
			case 'Location':
				$group_field = 'st.location_id';
				break;
			case 'Service Category':
				$group_field = 'tl.task';
				break;
		}

		$count_query = clone $summary_query;

		$summary = $summary_query
			->groupBy(DB::raw('group_key'))
			->select(DB::raw('
			     					count(*) as total, cd.department,jr.job_role,
			     					COALESCE(sum(st.status_id = 0), 0) as completed,
									 COALESCE(sum(st.status_id = 1), 0) as opened,
			     					COALESCE(sum(st.escalate_flag = 1 and st.status_id = 0), 0) as escalated,
									 COALESCE(sum(st.status_id = 3 and st.closed_flag = 0), 0) as timeout,
									 COALESCE(sum(st.closed_flag = 1 and st.status_id = 3), 0) as closed,
			     					COALESCE(sum(st.status_id = 4), 0) as canceled,
			     					COALESCE(sum(st.status_id = 5), 0) as scheduled,
			     					SEC_TO_TIME(ROUND(AVG(st.duration))) as completed_time,
									SUM(st.duration) as completed_time1,
			     					' . $group_field . ' as group_key,tc.name as category'))
			->distinct()
			->get();


		$ticket_type_name = array('', 'Guest Request', 'Department Request', 'Complaint', 'Managed Task');
		//$status_name = array('Completed', 'Open', 'Escalated', 'Timeout', 'Canceled', 'Scheduled');
		$summary_data = [];

		foreach ($summary as $row) {
			$group_key = $row->group_key;
			switch ($report_by) {
				case 'Status':
					if( $group_key > 6 )
						$group_key = 6;
					$group_key = $status_name[$group_key];
					break;
				case 'Location':
					if ($group_key > 0) {
						$info = app('App\Http\Controllers\Frontend\GuestserviceController')->getLocationInfo($group_key);
						if (!empty($info))
							$group_key = $info->name;
						else
							$group_key = 'Unknown';
					} else
						$group_key = 'Unknown';

					break;
			}

			$summary_data[$group_key] = $row;

		}
		$summarylist = [];
		foreach ($summary as $row) {
		$category = $row->category;

		$summarylist[$category][] = $row;

		}

		$ret['summary_list'] = $summarylist;
		$ret['summary_data'] = $summary_data;


		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['omit_num'] = $omit_num;



		if (count($ticket_types) > 0) {
			$label = '';
			for ($i = 0; $i < count($ticket_types); $i++) {
				if ($i > 0)
					$label = $label . ', ';
				$label = $label . $ticket_type_name[$ticket_types[$i]];
			}
			$ret['ticket_type'] = $label;
		} else
			$ret['ticket_type'] = '';

			if (count($status_tags) > 0) {
				$label = '';
				for ($i = 0; $i < count($status_tags); $i++) {
					if ($i > 0)
						$label = $label . ', ';
					$label = $label . $status_name[$status_tags[$i]];
				}
				$ret['status'] = $label;
			} else
				$ret['status'] = '';

				if (count($category_tags) > 0) {
					$label = '';
					for ($i = 0; $i < count($category_tags); $i++) {
						if ($i > 0)
							$label = $label . ', ';
						$label = $label . $category_tags[$i];
					}
					$ret['category'] = $label;
				} else
					$ret['category'] = '';

		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M H:i") . ' to ' . date_format(new DateTime($end_time), "d-M H:i");
		$ret['department'] = $department_tags;
		if ($report_type  == 'Summary' && $report_by == 'Department'){
			$ret['title'] = 'Executive Summary By Department';
		}
		else{
			$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		}
		$ret['location'] = $location_tags;
		$ret['item'] = $item_tags;
		//$ret['status'] = $status_tags;


		$ret['time'] = $end - $start;

		if( $report['chart_graph_flag'] == 'true' )
		{
			switch ($report_by) {
				case 'Date':
					$ret['graph1'] = $this->makeGuestserviceDateGraph($count_query);
					break;
				case 'Status':
					$ret['graph1'] = $this->makeGuestserviceStatusGraph($count_query);
					break;
				case 'Department':
					$ret['graph1'] = $this->makeGuestserviceDepartmentGraph($count_query,$report_by);
					break;
				case 'Item':
					$ret['graph1'] = $this->makeGuestserviceItemGraph($count_query);
					break;
				default:
					$ret['graph1'] = '';
					break;
			}

			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}
		if ($report_by == 'Staff')
		{

			$query = DB::table('services_task as st')
			->leftJoin('common_users as cu', 'st.dispatcher', '=', 'cu.id')
			->leftJoin('common_job_role as jr', 'jr.id', '=', 'cu.job_role_id')
			->leftJoin('common_department as de','cu.dept_id','=','de.id')
			->where('st.property_id', $property_id);

		if(count($department_tags) > 0 )
			$query->whereIn('de.department', $department_tags);

		if(count($staff_tags) > 0)
			$query->whereIn('st.dispatcher', $staff_tags);

		$user_list = $query
			->where('st.dispatcher', '>', 0)
			->whereBetween('st.start_date_time', array($start_time, $end_time))
			->groupBy('st.dispatcher')
			->select(DB::raw('st.dispatcher as user_id, 
					CONCAT_WS(" ", cu.first_name, cu.last_name) as staffname, 
					cu.first_name,
					jr.job_role ,
					CAST(COALESCE(sum(st.status_id = 0 and st.duration <= st.max_time), 0) AS UNSIGNED) as ontime,
					CAST(COALESCE(sum(st.status_id = 0 and st.duration > st.max_time), 0) AS UNSIGNED) as delay,
					sum(st.duration) as totaltimeontask,
					CAST(COALESCE(sum(st.status_id >= 0), 0) AS UNSIGNED) as total'))
			->get();

		$detail_report = [];
		$summary_report = [];
		for($i = 0 ; $i < count($user_list) ; $i++) {
			$mobile_login_proper = '{"shift_change":{"id":';
			$data = DB::table('common_user_transaction')
				->whereBetween('created_at', array($start_time, $end_time))
				->where('user_id', $user_list[$i]->user_id)
				->get();

			$login_time = date_format(new DateTime($start_time), "Y-m-d H:i:s");

			$user_login_count = 0;
			$duration_sum = 0;
			$staff_name = '';
			$job_role = '';

			$total = $user_list[$i] ->total;
			$ontime = $user_list[$i] ->ontime;
			$delayed = $user_list[$i] ->delay;
			$first_name = $user_list[$i] ->first_name;
			$totaltimeontask = $user_list[$i] ->totaltimeontask;

			$percent = floor(100/$total*$ontime);
			$staff_name = $user_list[$i]->staffname;
			$job_role = $user_list[$i]->job_role;

			for($j = 0 ; $j < count($data) ; $j++) {

				//get created time from mobile iogin
				if($data[$j]->action == 'login'&& substr($data[$j]->detail,0, 22) === $mobile_login_proper) {

					if($user_login_count == 0) {
						$login_time = $data[$j]->created_at; // get first login time during many login times
					}
					$user_login_count++;
				}
				if($data[$j]->action == 'logout'&& $user_login_count > 0) {
					$logout_time = $data[$j]->created_at;
					$duration = strtotime($logout_time)- strtotime($login_time);
					$detail = [];

					$user_login_count = 0 ;
					$key = date_format(new DateTime($data[$j]->created_at), "Y-M-d");
					$detail['date'] = $key;

					$detail['staffname'] = $staff_name;
					$detail['job_role'] = $job_role;
					// $detail['total'] = $total;
					// $detail['ontime'] = $ontime;
					// $detail['percent'] = $percent;
					$detail['login_time'] = $login_time;
					$detail['logout_time'] = $logout_time;
					$detail['duration'] = $duration;

					if( !array_key_exists($key, $detail_report ))
						$detail_report[$key] = [];

                    $detail_report[$key][] = $detail;

					$summary = [];

					$summary['staffname'] = $staff_name;
					$summary['first_name'] = $first_name;
					$summary['job_role'] = $job_role;
					$summary['total'] = $total;
					$summary['ontime'] = $ontime;
					$summary['delayed'] = $delayed;
					$summary['percent'] = $percent;
					// $summary['duration'] = $duration;
					$summary['timeontask'] = $totaltimeontask;

					$summary_key =  $user_list[$i]->staffname;

					if( !array_key_exists($summary_key, $summary_report ) ) {
						$duration_sum = $duration;
						$summary['duration'] = $duration_sum;
					}else {
						$duration_sum = $duration_sum + $duration;
						$summary['duration'] = $duration_sum;
					}

					$utilization = floor(($totaltimeontask/$duration_sum)*100);
					$summary['utilization'] = $utilization;
					$summary_report[$summary_key] = $summary;
				}
			}

			//when have not logout,
			if($user_login_count > 0){
				$logout_time = date_format(new DateTime($end_time), "Y-m-d H:i:s");
				$duration = strtotime($logout_time)- strtotime($login_time);
				$detail = [];

				$user_login_count = 0 ;
				$key = date_format(new DateTime($end_time), "Y-m-d");
				$detail['date'] = $key;

				$detail['staffname'] = $staff_name;
				$detail['job_role'] = $job_role;
				// $detail['total'] = $total;
				// $detail['ontime'] = $ontime;
				// $detail['delayed'] = $delayed;
				// $detail['percent'] = $percent;
				$detail['login_time'] = $login_time;
				$detail['logout_time'] = $logout_time;
				$detail['duration'] = $duration;

				if( !array_key_exists($key, $detail_report))
					$detail_report[$key] = [];

                $detail_report[$key][] = $detail;
				$summary = [];
				$summary['staffname'] = $staff_name;
				$summary['first_name'] = $first_name;
				$summary['job_role'] = $job_role;
				$summary['total'] = $total;
				$summary['ontime'] = $ontime;
				$summary['delayed'] = $delayed;
				$summary['percent'] = $percent;
				// $summary['duration'] = $duration;
				$summary['timeontask'] = $totaltimeontask;
				$summary_key =  $staff_name;


				if( !array_key_exists($summary_key, $summary_report ) ) {
					$duration_sum = $duration;
					$summary['duration'] = $duration_sum;
				} else {
					$duration_sum = $duration_sum + $duration;
					$summary['duration'] = $duration_sum;
				}

				$utilization = floor(100/$duration_sum*$totaltimeontask);
				$summary['utilization'] = $utilization;
				$summary_report[$summary_key] = $summary;
			}
			//
		}


		$ret['detail_report'] = $detail_report;
		$ret['summary_report'] = $summary_report;
		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['department'] = $department_tags;
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';

		$staff_name = DB::table('common_users')
			->whereIn('id', $staff_tags)
			->select(DB::raw('CONCAT_WS(" ", first_name, last_name) as staffname'))
			->get();
		$ret['staff'] = $staff_name;

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeGuestsericeStaffGraph($ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : 'style=width:80%';
		}

		//$ret = $this->makeGuestserviceReportDataByStaff($report);
		}

		return $ret;
	}

	private function makeGuestserviceDateGraph($query) {
		$summarylist = $query
							->groupBy(DB::raw('group_key'))
		                    ->select(DB::raw('
		                    	DATE(st.start_date_time) as group_key,
		     					COALESCE(sum(st.status_id = 0), 0) as Completed,		     					
		     					COALESCE(sum(st.escalate_flag = 1), 0) as Escalated,
		     					COALESCE(sum(st.status_id = 3), 0) as Timeout,
		     					COALESCE(sum(st.status_id = 4), 0) as Canceled'
		     					))
			->get();

		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = ['text' => 'Ticket Per Date'];
		$options['chart'] = ['type' => 'line', 'width' => 1000, 'height' => 480];
		$options['colors'] = ['#27c24c', '#ffa500', '#E91E63', '#607D8B'];

		$categories = [];
		$series = [];

		foreach($summarylist as $row) {
			$categories[] = $row->group_key;
		}

		$list = [
			['Completed', 'Completed'],
			['Escalated', 'Escalated'],
			['Timeout', 'Timeout'],
			['Canceled', 'Canceled'],
		];

		foreach($list as $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['data'] = [];

			foreach($summarylist as $row) {
				$value = $row->{$row1[1]};
				$value = (int)$value;
				$item['data'][] = $value;
				// $item['data'][] = 100;
			}

			$series[] = $item;
		}

		$options['xAxis'] = ['categories' => $categories];
		$options['yAxis'] = ['min' => 0, 'title' => null];
		// $options['plotOptions'] = array('series' => array('stacking' => 'normal'));
		$options['series'] = $series;

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	private function makeGuestserviceStatusGraph($query) {
		$summarylist = $query->select(DB::raw('
		     					COALESCE(sum(st.status_id = 0), 0) as Completed,		     					
		     					COALESCE(sum(st.escalate_flag = 1), 0) as Escalated,
		     					COALESCE(sum(st.status_id = 3), 0) as Timeout,
		     					COALESCE(sum(st.status_id = 4), 0) as Canceled'
		     					))
			->first();

		// graph data
		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = ['text' => 'Ticket Status'];
		$options['chart'] = ['type' => 'pie', 'width' => 640, 'height' => 480];
		$options['colors'] = ['#27c24c', '#ffa500', '#E91E63', '#607D8B'];

		$series = [];

		$item = [];
		$item['name'] = '';
		$item['data'] = [];

		foreach($summarylist as $key => $row) {
			$value = (int)$row;
			$item['data'][] = ['name' => $key, 'y' => $value];
		}

		$series[] = $item;

		$options['plotOptions'] = array('series' => array('stacking' => 'normal', 'showInLegend' => true,
					'dataLabels' => array('enabled' => true, 'format' => '<b>{point.name}</b>: {point.percentage:.1f} %',
											'style' => array('color' => '#555555', "textOutline" => null)))
										);
		$options['series'] = $series;
		// $options['legend'] = array(
		// 							'layout' => 'vertical',
		// 							'align' => 'right',
		// 							'verticalAlign' => 'middle');

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	private function makeGuestserviceDepartmentGraph($query,$report_by) {
		$summarylist = $query
							->groupBy('st.department_id')
							->orderBy('cd.department')
		                    ->select(DB::raw('
		                    	cd.department,	
		                    	count(*) as total,
		                    	COALESCE(sum(st.status_id = 0 and st.duration <= st.max_time), 0) as ontime,
		     					COALESCE(sum(st.status_id = 0), 0) as completed,		     					
		     					COALESCE(sum(st.escalate_flag = 1), 0) as escalated,
		     					COALESCE(sum(st.status_id = 3), 0) as timeout,
		     					COALESCE(sum(st.status_id = 4), 0) as canceled'
		     					))
			->get();

		// graph data
		$param = [];

		$param['type'] = 'png';

		$width = 1000;
		$height = Functions::isSuperAgent() ? 400: 300;

		$options = [];
		$options['title'] = array('text' => 'Department');
		$options['chart'] = array('type' => 'column', 'width' => $width, 'height' => $height);
		$options['colors'] = ['#27c24c', '#ffa500', '#E91E63', '#607D8B', '#6dab43'];

		$categories = [];
		$series = [];

		foreach($summarylist as $key => $row) {
			if( !empty($row->department))
				$categories[] = $row->department;
			else
				$categories[] = 'Unknown';
		}

		$list = [
			['Completed', 'completed', 'column', 0],
			['Escalated', 'escalated', 'column', 0],
			['Timeout', 'timeout', 'column', 0],
			['Canceled', 'canceled', 'column', 0],
			// ['Utilization(%)', 'utilization', 'line', 1],
		];

		foreach($list as $key1 => $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['type'] = $row1[2];
			$item['yAxis'] = $row1[3];
			$item['data'] = [];

			foreach($summarylist as $key => $row) {
				$value = $row->{$row1[1]};
				$value = (int)$value;
				$item['data'][] = $value;
			}

			$series[] = $item;
		}

        if ($report_by == 'Complaint'){
            $filename = 'Guest_Feedback_Report_' . date('d_M_Y_H_i');
        } else {
            $filename = 'Complaint_Report_By_' . $report_by . '_' . date('d_M_Y_H_i');
        }
		//$param = $request->all();
		// percent
		$item = [];
		$item['name'] = 'Ontime';
		$item['type'] = 'line';
		$item['yAxis'] = 1;
		$item['data'] = [];

		foreach($summarylist as $key => $row) {
			$total = (int)$row->total;
			$ontime = (int)$row->ontime;
			if( $total > 0 )
				$value = floor($ontime * 100 / $total);
			else
				$value = 0;

			$item['data'][] = $value;
		}

		$series[] = $item;

		$options['xAxis'] = [array('categories' => $categories)];
		$options['yAxis'] = array('min' => 0, 'title' => null);

		$options['yAxis'] = [];

		$yaxis1 = array('title' => array('text' => 'Requests'), 'labels' => array('format' => '{value}'), 'min' => 0);
		$options['yAxis'][] = $yaxis1;

		$yaxis2 = array('title' => array('text' => 'On Time %'), 'labels' => array('format' => '{value}%'), 'opposite' => true, 'min' => 0);
		$options['yAxis'][] = $yaxis2;

		$options['plotOptions'] = array('series' => array('stacking' => 'normal',
					'dataLabels' => array('enabled' => true,
											'style' => array('color' => '#555555', "textOutline" => null)))
										);
		$options['series'] = $series;
		$options['legend'] = array(
									'layout' => 'vertical',
									'align' => 'right',
									'verticalAlign' => 'middle');

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	private function makeGuestserviceItemGraph($query) {
		$summarylist = $query
							->groupBy(DB::raw('group_key'))
							->orderBy('cnt', 'desc')
							->limit(10)
		                    ->select(DB::raw('
		                    	tl.task as group_key,
		                    	count(*) as cnt'
		     					))
			->get();

		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = array('text' => 'Item');
		$options['chart'] = array('type' => 'column', 'width' => 640, 'height' => 480);
		// $options['colors'] = ['#23b7e5', '#27c24c', '#6254b2', '#f05050', '#f89406', '#beb411'];

		$categories = [];
		$series = [];

		foreach($summarylist as $key => $row) {
			$item = [];
			$group_key = '';
			if( empty($row->group_key) || $row->group_key == null )
				$group_key = 'Unknown';
			else
				$group_key = $row->group_key;

			$item['name'] = $group_key;
			$item['data'] = [];

			$categories[] = $group_key;
			foreach($summarylist as $key1 => $row1) {
				if( $key != $key1 )
					$item['data'][] = 0;
				else
					$item['data'][] = (int)$row->cnt;
			}

			$series[] = $item;
		}

		$options['xAxis'] = array('categories' => $categories);
		$options['yAxis'] = array('min' => 0, 'title' => array('text' => null));

		$options['series'] = $series;
		$options['plotOptions'] = array('series' => array('stacking' => 'normal'));

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function getLocationIds($filter_array)
	{
		$ids = [];
		foreach($filter_array as $row)
		{
			if(!empty($row->id))
				$ids[] = $row->id;
		}

		return $ids;
	}

	public function generateGuestserviceReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);

		$data = $this->getGuestserviceReportData($request);
		$param = $request->all();
		$this->sendNotifyDownloadCompleted($param);

		return view('frontend.report.guestservice', compact('data'));
	}

	public function downloadGuestserviceExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getGuestserviceReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = 'Guest_Service_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		$param = $request->all();

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

			$excel->sheet('Guest Service Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputCallAccountLogo($sheet,$logo_path);
				$this->outputGuestServiceDescription($sheet, $data);

				$row_num = 6;

				if($data['report_by'] == 'Floor') {
					$row_num = $this->outputGuestServiceFloorReport($sheet, $row_num, $data);
				}
				if($data['report_by'] == 'Complete Comments') {
					$row_num = $this->outputGuestServiceCompCommentsReport($sheet, $row_num, $data);
				}
				if($data['report_type'] == 'Detailed' && $data['report_by'] != 'Floor' && $data['report_by'] != 'Complete Comments') {
					$row_num = $this->outputGuestServiceDetailReport($sheet, $row_num, $data);
				}

				if($data['report_type'] == 'Summary' && $data['report_by'] != 'Floor' && $data['report_by'] != 'Complete Comments') {
					$row_num = $this->outputGuestServiceSummaryReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	private function getCompare($origin, $new, $param) {
		if($origin == $new) return $param = '';
		else return $param;
	}

	function timetostr($duration) {
		$hour = 0;
		$min = 0;
		$sec = 0;

		if($duration <= 0 ) return '00:00:00';

		$hour = floor($duration / 3600);
		$mod = $duration % 3600;
		if($mod < 60) {
			$sec = $mod;
		}else  {
			$min = floor($mod / 60);
			$sec = $mod % 60 ;
		}
		if($hour == 0)  {
			if($min == 0) return "00:00:".$this->timeStr($sec);
			else return "00:".$this->timeStr($min).":".$this->timeStr($sec);
		}else {
			return $this->timeStr($hour).":".$this->timeStr($min).":".$this->timeStr($sec);
		}
	}

	function timeStr($val) {
		return sprintf("%'.02d", $val);
	}

	private function outputMinibarDetailReport($sheet, $row_num, $data) {
		$report_by = $data['report_by'];

		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_by) {
			$cell->setValue('Minibar Detailed '.$report_by.' Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});
		$row_num +=2;

//		$sheet->mergeCells('A'.$row_num.':B'.$row_num);
//		$sheet->cell('A' . $row_num , function ($cell)  {
//			$cell->setValue("Detail  Report");
//			$cell->setAlignment('left');
//			$cell->setFont(array(
//				'size' => '13',
//				'bold' => true
//			));
//		});
//		$row_num++;


		$omit_num = $data['omit_num'];
		$grand_total = 0;
		$grand_count = 0;
		$grand_lost_count = 0;
		$grand_lost_total = 0;

		foreach ($data['minibar_list'] as  $key => $data_group) {

			$title = array($key);
			$sheet->row($row_num, $title);
			$row_num++;
			$table_header = [];
			if ($data['report_type'] == "Detailed"){
			foreach ($data['fields'] as $key1 => $value) {
				if ($key1 != $omit_num)
					$table_header[] = $data['fields'][$key1];
			}
			$header = array('A', 'B', 'C', 'D', 'E' ,'F', 'G', 'H', 'I', 'J', 'K','L','M','N','O');
			$header_count = count($table_header);
			$sheet->cell('A' . $row_num . ':'.$header[$header_count-1] . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;
			}
			$total_count = 0;
			$price = 0;
			$total_count_lost = 0;
			$price_lost = 0;

			foreach ($data_group as $row) {
				$data_row = [];
				//if guest_id=0, checkout
				$name = $row->guest_name;
				if($row->guest_id == 0) $name = "Lost Posting";
				$data_row[] = $name;
				$data_row[] = substr($row->created_at, 0, 10);
				$data_row[] = $row->time;
				$data_row[] = $row->room;
				$data_row[] = $row->wholename;
/*
				$ids = json_decode($row->item_ids);
				$quantity = json_decode($row->quantity);

				$item = '';
				for ($i = 0; $i < count($ids); $i++) {
					if ($i > 0)
						$item = $item . ", ";
					if (!empty($data['item_list'][$ids[$i]])) {
						$item = $item . $data['item_list'][$ids[$i]]->item_name . ' - ' . $quantity[$i];
						if ($data['report_by'] != 'Service Item') {
							if($row->guest_id != 0)	$price += $data['item_list'][$ids[$i]]->charge;
							if($row->guest_id == 0)	$price_lost += $data['item_list'][$ids[$i]]->charge;
						}
						else {
							if ($data['item_list'][$ids[$i]]->item_name == $key) {
								if($row->guest_id != 0)	$price += $data['item_list'][$ids[$i]]->charge;
								if($row->guest_id == 0)	$price_lost += $data['item_list'][$ids[$i]]->charge;
							}
						}
					}
				}
*/
				//$data_row[] = $item;
				$data_row[] = $row->item_name;
                $data_row[] = $row->item_quantity;
                $data_row[] = $row->item_price;
                $data_row[] = $row->item_total;
				if($row->guest_id != 0 ){
					$total_count +=  $row->item_quantity ;
                    $price += $row->item_total;
				}
				if($row->guest_id == 0 ){
					$total_count_lost +=  $row->item_quantity;
                    $price_lost += $row->item_total;
				}

				$table_body = [];
				if ($data['report_type'] == 'Detailed') {
					foreach ($data_row as $key1 => $value) {
						if ($key1 != $omit_num)
							$table_body[] = $data_row[$key1];
					}
				}else {
					$table_body = array(" "," "," ");
				}

				$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body);
				$row_num++;

			}

			$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
				$cell->setBackground('#e0f5f9');
			});
			$table_header1 = array('Summary','Total Qty','Total Price');
			$sheet->row($row_num, $table_header1);
			$row_num++;

			$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
				$cell->setAlignment('right');
			});
			$table_body1 = array('',strval($total_count), $data['currency']. ' ' .$price);
			$sheet->row($row_num, $table_body1);
			$row_num++;

			$table_header2 = array(' ','Total Lost Posting','Total Lost Amount');
			$sheet->row($row_num, $table_header2);
			$row_num++;

			$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
				$cell->setAlignment('right');
			});
			$table_body2 = array('',strval($total_count_lost), $data['currency']. ' ' .$price_lost);
			$sheet->row($row_num, $table_body2);
			$row_num +=2;

			$grand_total += $price;
            $grand_count += $total_count;
            $grand_lost_total += $price_lost;
            $grand_lost_count += $total_count_lost;

		}

		$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
			$cell->setBackground('#DCDCDC');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$table_header1 = array('Summary','Total Qty','Total Price');
		$sheet->row($row_num, $table_header1);
		$row_num++;

		$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
			$cell->setAlignment('right');
		});
		$table_body1 = array('',strval($grand_count), $data['currency']. ' ' .$grand_total);
		$sheet->row($row_num, $table_body1);
		$row_num++;

		$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {

			$cell->setFont(array(
				'bold' => true
			));
		});

		$table_header2 = array(' ','Total Lost Posting','Total Lost Amount');
		$sheet->row($row_num, $table_header2);
		$row_num++;

		$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
			$cell->setAlignment('right');
		});
		$table_body2 = array('',strval($grand_lost_count), $data['currency']. ' ' .$grand_lost_total);
		$sheet->row($row_num, $table_body2);
		$row_num +=2;

		return $row_num;
	}
	private function outputMinibarStockReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];

		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_type) {
			$cell->setValue('Minibar Stock  Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});
		$row_num +=2;

		$omit_num = $data['omit_num'];
		$row_num++;
		$table_header = [];
			foreach ($data['fields1'] as $key1 => $value) {
				if ($key1 != $omit_num)
					$table_header[] = $data['fields1'][$key1];
			}
			$header = array('A', 'B', 'C', 'D', 'E' ,'F', 'G', 'H', 'I', 'J', 'K','L','M','N','O');
			$header_count = count($table_header);
			$sheet->cell('A' . $row_num . ':'.$header[$header_count-1] . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;


			foreach ($data['data_list1'] as $row) {
				$data_row = [];

				$data_row[] = $row->ivr_code;
				$data_row[] = $row->item_name;
				$data_row[] = $row->item_stock;
				$data_row[] = $row->charge;
				$data_row[] = $row->alarm_count;

				$table_body = [];
				if ($data['report_type'] == 'Stock') {
					foreach ($data_row as $key1 => $value) {
						if ($key1 != $omit_num)
							$table_body[] = $data_row[$key1];
					}
				}else {
					$table_body = array(" "," "," ");
				}

				$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body);
				$row_num++;

			}

		return $row_num;
	}

	private function outputMinibarSummaryReport($sheet, $row_num, $data) {
			$report_by = $data['report_by'];

		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_by) {
			$cell->setValue('Minibar Summary '.$report_by.' Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});
		$row_num +=2;
		$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
			$cell->setBackground('#DCDCDC');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$table_header1 = array('Item','Charge','Total Quantity', 'Total Amount', 'Total Lost Quantity', 'Total Lost Amount');
		$sheet->row($row_num, $table_header1);
		$row_num++;


		$grand_total = 0;
		$grand_count = 0;
		$grand_lost_count = 0;
		$grand_lost_total = 0;

		foreach ($data['minibar_list'] as  $key => $data_group) {


			$total_count = 0;
			$price = 0;
			$total_count_lost = 0;
			$price_lost = 0;

			foreach ($data_group as $row) {
				$data_row = [];

				$data_row[] = $row->item_name;

				if($row->guest_id != 0 ){
					$total_count +=  $row->item_quantity ;
                    $price += $row->item_total;
				}
				if($row->guest_id == 0 ){
					$total_count_lost +=  $row->item_quantity;
                    $price_lost += $row->item_total;
				}



			}
			$table_body = [];

					foreach ($data_row as $key1 => $value) {

						$table_body = array($data_row[$key1],$data['currency']. ' ' .$row->item_price,$total_count,$data['currency']. ' ' .$price, $total_count_lost, $data['currency']. ' ' .$price_lost);
					}

				$sheet->cell('A' . $row_num . ':F' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body);
				$row_num++;


			$grand_total += $price;
            $grand_count += $total_count;
            $grand_lost_total += $price_lost;
            $grand_lost_count += $total_count_lost;

		}

		$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
			$cell->setBackground('#DCDCDC');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$table_header1 = array('Summary','Total Qty','Total Price');
		$sheet->row($row_num, $table_header1);
		$row_num++;

		$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
			$cell->setAlignment('right');
		});
		$table_body1 = array('',strval($grand_count), $data['currency']. ' ' .$grand_total);
		$sheet->row($row_num, $table_body1);
		$row_num++;

		$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {

			$cell->setFont(array(
				'bold' => true
			));
		});

		$table_header2 = array(' ','Total Lost Posting','Total Lost Amount');
		$sheet->row($row_num, $table_header2);
		$row_num++;

		$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
			$cell->setAlignment('right');
		});
		$table_body2 = array('',strval($grand_lost_count), $data['currency']. ' ' .$grand_lost_total);
		$sheet->row($row_num, $table_body2);
		$row_num +=2;

		return $row_num;
	}


	private function outputEngineeringWRReport($sheet, $row_num, $data) {
		$report_by = $data['report_by'];

		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_by, $data) {
			$cell->setValue('Engineering '. $data['report_type'] . ' '.$report_by.' Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});

		$row_num +=2;

		
		$table_header = array('Pending', 'Assigned','In Progress', 'On Hold', 'Completed', 'Closed', 'Rejected', 'Total');
									$sheet->cell('A' . $row_num . ':H' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
								
									$table_body2 = array(strval($data['subcount']->pending),
                        			strval($data['subcount']->assigned),
									strval($data['subcount']->progress),
									strval($data['subcount']->hold),
									strval($data['subcount']->completed),
									strval($data['subcount']->closed),
									strval($data['subcount']->rejected),
									strval($data['subcount']->total));
								$sheet->cell('A' . $row_num . ':H' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
								
		

		$row_num += 2;

		if ($data['report_type'] == 'Detailed'){

		if(!empty($data['datalist'])){

			$row_num++;
			$table_header = array('ID', 'Created Date','Requestor', 'Priority', 'Category', 'Location', 'Summary', 'Status', 'Start Date', 'End Date', 'Equipment', 'Assignee');
									$sheet->cell('A' . $row_num . ':L' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
								foreach ($data['datalist'] as $row){
									$table_body2 = array($row->wr_id ,
                        			$row->schedule_date,
                        			$row->requestor_name,
                        			$row->priority,
                        			$row->category_name,
									"$row->location_name - $row->location_type",
                        			$row->repair,
                        			$row->status_name,
                        			$row->status_name=='In Progress' || $row->status_name=='Completed' ? $row->start_date : '',
                        			$row->status_name=='Completed' ? $row->end_date : '',
                        			"$row->equip_id - $row->equip_name",
                        			$row->supplier_id > 0 ? $row->supplier : $row->assignee_name);
								$sheet->cell('A' . $row_num . ':L' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
								$row_num++;
								}

		}
		}
		$row_num++;
		if ($data['wo_flag'] == 'true'){

			$sheet->mergeCells('C'.$row_num.':G'.$row_num);
			$sheet->cell('C' . $row_num, function ($cell) use ($report_by, $data) {
				$cell->setValue('Engineering WorkOrder Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '12',
					'bold' => true
				));
			});
			$row_num +=2;

			$table_header = array('Pending','In Progress', 'On Hold', 'Completed', 'Total');
									$sheet->cell('A' . $row_num . ':E' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
								
									$table_body2 = array($data['subcount']->pending,
									$data['wo_subcount']->progress,
									$data['wo_subcount']->hold,
									$data['wo_subcount']->completed,
									$data['wo_subcount']->total);
								$sheet->cell('A' . $row_num . ':E' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
			$row_num +=2;

			if ($data['report_type'] == 'Detailed'){

			if(!empty($data['datalist'])){

				$row_num++;
				$table_header = array('ID', 'Name','Description', 'Priority', 'Type', 'WR ID', 'Status', 'Equipment', 'Location', 'Start Date', 'End Date', 'Total Time', 'Actual Time', 'Assigned Staff');
										$sheet->cell('A' . $row_num . ':N' .$row_num, function ($cell) {
											$cell->setFontColor('#ffffff');
											$cell->setBackground('#2c3e50');
									});
									$sheet->row($row_num, $table_header);
									$row_num++;
									foreach ($data['wo_datalist'] as  $key => $row){
										$table_body2 = array( $row->wo_id,
										$row->name,
										$row->description,
										$row->priority,
										$row->work_order_type,
										$row->ref_id,
										$row->status,
										"$row->eq_id - $row->equipment_name",
										"$row->location_name - $row->location_type",
										$row->status == 'In Progress' || $row->status == 'Completed' ? $row->start_date : '',
										$row->status == 'Completed' ? $row->end_date : '',
										$row->time_spent,
										$row->hold_time != '' ? gmdate('H:i:s' , $row->actual_time) : $row->time_spent,
										$row->assigne_list_names);
									$sheet->cell('A' . $row_num . ':N' .$row_num, function ($cell) {
										$cell->setAlignment('left');
									});
									$sheet->row($row_num, $table_body2);
									$row_num++;
									}

			}
			}
			
		}
		return $row_num;

		}

		private function outputEngineeringWOReport($sheet, $row_num, $data) {
			$report_by = $data['report_by'];

			$sheet->mergeCells('C'.$row_num.':G'.$row_num);
			$sheet->cell('C' . $row_num, function ($cell) use ($report_by, $data) {
				$cell->setValue('Engineering '. $data['report_type'] . ' '.$report_by.' Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '14',
					'bold' => true
				));
			});
			$row_num +=2;

			$table_header = array('Pending','In Progress', 'On Hold', 'Completed', 'Total');
									$sheet->cell('A' . $row_num . ':E' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
								
									$table_body2 = array($data['subcount']->pending,
									$data['subcount']->progress,
									$data['subcount']->hold,
									$data['subcount']->completed,
									$data['subcount']->total);
								$sheet->cell('A' . $row_num . ':E' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
			$row_num +=2;

			if ($data['report_type'] == 'Detailed'){

			if(!empty($data['datalist'])){

				$row_num++;
				$table_header = array('ID', 'Name','Description', 'Priority', 'Type', 'Status', 'Equipment', 'Location', 'Start Date', 'End Date', 'Total Time', 'Actual Time', 'Assigned Staff');
										$sheet->cell('A' . $row_num . ':M' .$row_num, function ($cell) {
											$cell->setFontColor('#ffffff');
											$cell->setBackground('#2c3e50');
									});
									$sheet->row($row_num, $table_header);
									$row_num++;
									foreach ($data['datalist'] as  $key => $row){
										$table_body2 = array( $row->wo_id,
										$row->name,
										$row->description,
										$row->priority,
										$row->work_order_type,
										$row->status,
										"$row->eq_id - $row->equipment_name",
										"$row->location_name - $row->location_type",
										$row->status == 'In Progress' || $row->status == 'Completed' ? $row->start_date : '',
										$row->status == 'Completed' ? $row->end_date : '',
										$row->time_spent,
										$row->hold_time != '' ? gmdate('H:i:s' , $row->actual_time) : $row->time_spent,
										$row->assigne_list_names);
									$sheet->cell('A' . $row_num . ':M' .$row_num, function ($cell) {
										$cell->setAlignment('left');
									});
									$sheet->row($row_num, $table_body2);
									$row_num++;
									}

			}
			}	
			return $row_num;

			}




	private function outputHskpDetailReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];

		$row_num +=2;
		$i = 8;

		$omit_num = $data['omit_num'];
		foreach ($data['hskp_list'] as  $key => $data_group)
		{
		$row_num++;
		//$i++;

		$sheet->mergeCells('A'.$row_num.':C'.$row_num);
		$sheet->cell('A'.$row_num, function($cell) use ($data,$key) {
			$cell->setValue($data['report_by'] . ':' . $key) ;
		});
		$row_num++;
		$table_header = [];
			foreach ($data['fields'] as $key1 => $value) {

				if ($key1 != $omit_num)
					$table_header[] = $data['fields'][$key1];
			}
			$header = array('A', 'B', 'C', 'D', 'E' ,'F', 'G', 'H', 'I', 'J', 'K','L','M','N','O');
			$header_count = count($table_header);
			$sheet->cell('A' . $row_num . ':'.$header[$header_count-1] . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;


			foreach ($data_group as $row)
			{
				$data_row = [];
				//$data_row[] = ' ';
				$data_row[] = substr($row->created_at, 0, 10);
				$data_row[] = $row->room;
				$data_row[] = $row->status;
				$data_row[] = $row->wholename;


				$table_body = [];
				if ($data['report_type'] == 'Detailed') {
					foreach ($data_row as $key1 => $value) {
						if ($key1 != $omit_num)
							$table_body[] = $data_row[$key1];
					}
				}else {
					$table_body = array(" "," "," ");
				}

				$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body);
				$row_num++;

			}
		}
		return $row_num;
		//$i = $i + $row_num;
		return $i;

	}


	private function outputHskpSummaryReport($sheet, $row_num, $data) {
		//$group_val = $data['group_by'];

		$header_list = [];
		$header_list[] = '';
		$row_num+=2;
		foreach ($data['summary_header'] as  $header) {
			$header_list[] = $header;
		}

		$sheet->row($row_num, $header_list);
		$sheet->cell('A' . $row_num . ':H' . $row_num, function($cell) {
			$cell->setFontColor('#fafbfb');
			$cell->setBackground('#2c3e50');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});
		$row_num++;

		foreach ($data['hskp_summary'] as  $key =>$obj)
		{
			//$cell_list = [$key];
			//foreach ($data['summary_header'] as  $header) {
				$cell_list = [
						$key,
						$obj[$data['summary_header'][0]],
						$obj[$data['summary_header'][1]],
						$obj[$data['summary_header'][2]],
						$obj[$data['summary_header'][3]],
						$obj[$data['summary_header'][4]],
						$obj[$data['summary_header'][5]],
						$obj[$data['summary_header'][6]],


				];

			//}
			$sheet->row($row_num, $cell_list);
			$row_num++;
		}

		return $row_num;
	}

	private function outputHskpRosterReport($sheet, $row_num, $data) {

		$row_num += 2;
		$sheet->cell('A' . $row_num . ':C' . $row_num, function ($cell) {
			$cell->setFontColor('#ffffff');
			$cell->setBackground('#2c3e50');
		});
		$table_header = array('   Device   ', '   Rooms Allocated  ', '   Total Rooms   ');
		$sheet->row($row_num, $table_header);
		$row_num++;

		foreach ($data['hskp_list'] as $key => $row) {
			$row = array(
				$row->name, $row->room_list, strval($row->count));
			$sheet->row($row_num, $row);
			$row_num++;
		}

		return $row_num;
	}

	private function outputHskpDiscrepancyReport($sheet, $row_num, $data) {

		$row_num += 2;

		foreach ($data['hskp_list'] as $key => $data_group) {
			$sheet->mergeCells('A'.$row_num.':C'.$row_num);
			$sheet->cell('A'.$row_num, function($cell) use ($key) {
				$cell->setValue('Room :' . $key) ;
			});
			$row_num++;
			$sheet->cell('A' . $row_num . ':F' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('Room', 'Guest Name', 'Posted By', 'Adult','Child','Created At');
			$sheet->row($row_num, $table_header);
			$row_num++;
			foreach($data_group as $row){
			$row = array(
				$row->room, $row->guest_name, $row->wholename, $row->adult, $row->child, $row->created_at);
			$sheet->row($row_num, $row);
			$row_num++;
			}
		}

		return $row_num;
	}

	private function outputHskpTaskSheetReport($sheet, $row_num, $data) {

		$row_num += 2;

		
			
			$sheet->cell('A' . $row_num . ':L' . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array('Room','Type','Room Status','FO Status','Credit','Res Status', 'Guest Name', 'VIP','Arrival','Departure', 'Adult','Child');
			$sheet->row($row_num, $table_header);
			$row_num++;
			foreach($data['room_list'] as $row){
			$row = array(
				$row->room, $row->type,$row->rm_state, $row->occupancy, $row->credits, $row->fo_state, $row->guest_name, $row->vip_name,$row->arrival, $row->departure, $row->adult, $row->chld);
			$sheet->row($row_num, $row);
			$row_num++;
			}
		

		return $row_num;
	}

	private function outputHskpStatusReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];

		$row_num +=2;
		$i = 8;


		foreach ($data['hskp_list'] as  $key => $data_group)
		{
		$row_num++;
		//$i++;

		$sheet->mergeCells('A'.$row_num.':G'.$row_num);
		$sheet->cell('A'.$row_num, function($cell) use ($data,$key) {
			$cell->setValue($key) ;
		});
		$row_num++;
		$table_header = [];
			foreach ($data['fields'] as $key1 => $value) {


					$table_header[] = $data['fields'][$key1];
			}
			$header = array('A', 'B', 'C', 'D', 'E' ,'F', 'G', 'H', 'I', 'J', 'K','L','M','N','O');
			$header_count = count($table_header);
			$sheet->cell('A' . $row_num . ':'.$header[$header_count-1] . $row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;


			foreach ($data_group as $row)
			{
				$data_row = [];
				//$data_row[] = ' ';
				$data_row[] = substr($row->created_at, 0, 10);
				$data_row[] = $row->room;
				$data_row[] = $row->status;
				$data_row[] = $row->wholename;
				$data_row[] = $row->start_time;
                $data_row[] = $row->end_time;
                $data_row[] = gmdate("H:i:s", $row->duration);



				$table_body = [];
				if ($data['report_type'] == 'Detailed') {
					foreach ($data_row as $key1 => $value) {

							$table_body[] = $data_row[$key1];
					}
				}else {
					$table_body = array(" "," "," ");
				}

				$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body);
				$row_num++;

			}
		}
		return $row_num;
		//$i = $i + $row_num;
		return $i;

	}

	private function outputHskpStatusSummaryReport($sheet, $row_num, $data) {
		//$group_val = $data['group_by'];

		$header_list = [];
		$header_list[] = '';
		$row_num+=2;
		foreach ($data['summary_header'] as  $header) {
			$header_list[] = $header;
		}

		$sheet->row($row_num, $header_list);
		$sheet->cell('A' . $row_num . ':F' . $row_num, function($cell) {
			$cell->setFontColor('#fafbfb');
			$cell->setBackground('#2c3e50');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});
		$row_num++;

		foreach ($data['hskp_summary'] as  $key =>$obj)
		{
			//$cell_list = [$key];
			//foreach ($data['summary_header'] as  $header) {
				$cell_list = [
						$key,
						$obj[$data['summary_header'][0]],
						$obj[$data['summary_header'][1]],
						$obj[$data['summary_header'][2]],
						gmdate("H:i:s", $obj[$data['summary_header'][3]]),
						gmdate("H:i:s", $obj[$data['summary_header'][4]]),



				];

			//}
			$sheet->row($row_num, $cell_list);
			$row_num++;
		}

		return $row_num;
	}

	private function outputGuestServiceFloorReport($sheet, $row_num, $data) {
		$report_by = $data['report_by'];

		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_by, $data) {
			$cell->setValue('Guest Service '. $data['report_type'] . ' '.$report_by.' Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});
		$row_num +=2;

		if(!empty($data['summary_data'])){

			$row_num++;
			$table_header = array('Floor', 'Building','On Time', 'Open', 'Escalated', 'Timeout', 'Closed', 'Canceled', 'Total');
									$sheet->cell('A' . $row_num . ':I' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
								foreach ($data['summary_data'] as $row){
									$table_body2 = array('Floor ' . $row->group_key1 ,
									$row->building,
									strval($row->completed),
									strval($row->opened),
									strval($row->escalated),
									strval($row->timeout),
									strval($row->closed),
									strval($row->canceled),
									strval($row->total));
								$sheet->cell('A' . $row_num . ':I' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
								$row_num++;


								}

		}
		if ($data['report_type'] == 'Detailed'){
		if (!empty($data['completed_floor']))
			{

				$row_num++;
				foreach ($data['completed_floor'] as $key => $datagroup){
					if(!empty($datagroup['floor'])){
						$row_num++;
					$sheet->mergeCells('A'.$row_num.':D'.$row_num);
					$sheet->cell('A' . $row_num, function ($cell) use($key) {
							$cell->setValue($key);
							$cell->setAlignment('left');
							$cell->setFont(array(
								'bold' => true
							));
						});
						$row_num++;
						foreach ($datagroup['floor'] as  $dept_key => $dept_group){
							$sheet->mergeCells('A'.$row_num.':D'.$row_num);
							$sheet->cell('A' . $row_num, function ($cell) use($dept_key) {
								$cell->setValue('Location : '.$dept_key);
								$cell->setAlignment('left');
								$cell->setFont(array(
									'bold' => true
								));
							});
							$row_num++;





								$table_header = array('ID', 'Request','Status', 'Created', 'Assignee', 'Assign Dur', 'Actual Dur', 'Completed By');
									$sheet->cell('A' . $row_num . ':H' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
								foreach ($dept_group['location'] as $row){
									if ($row->type == 1)
                    					$id = "G".$row->id;
               						else if ($row->type == 2)
                    					$id = "D".$row->id;
                					else if ($row->type == 3)
                    					$id = "C".$row->id;
                					else
										$id = "M".$row->id;

										if ( $row->status == 0)
									$state = 'On Time';
								else if ($row->status == 1)
									$state = 'Open';
								else if ($row->status == 2)
									$state = 'Escalated';
								else if ($row->status == 3)
									$state = 'Timeout';
								else if ($row->status == 4)
									$state = 'Canceled';
								else if  ($row->status == 6)
									$state = 'Escalated';
								else if  ($row->status == 7)
									$state = 'Closed';
								else
									$state = 'Hold';


									$table_body2 = array($id,
									$row->task,
									$state,
									$row->start_date_time,
									$row->attendant_wholename,
									gmdate("H:i:s", $row->max_time),
									gmdate("H:i:s", $row->duration),
									$row->finisher_wholename);
								$sheet->cell('A' . $row_num . ':H' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
								$row_num++;
								}

						}
					}
				}
			}
		}
			return $row_num;


		}

		private function outputGuestServiceCompCommentsReport($sheet, $row_num, $data) {
			$report_by = $data['report_by'];

			$sheet->mergeCells('C'.$row_num.':G'.$row_num);
			$sheet->cell('C' . $row_num, function ($cell) use ($report_by, $data) {
				$cell->setValue('Guest Service '. $data['report_type'] . ' '.$report_by.' Report');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '14',
					'bold' => true
				));
			});
			$row_num +=2;


			if ($data['report_type'] == 'Detailed'){
			if (!empty($data['completed_comment']))
				{

					$row_num++;
					foreach ($data['completed_comment'] as $key => $datagroup){
						if(!empty($datagroup['date'])){
							$row_num++;
						$sheet->mergeCells('A'.$row_num.':D'.$row_num);
						$sheet->cell('A' . $row_num, function ($cell) use($key) {
								$cell->setValue($key);
								$cell->setAlignment('left');
								$cell->setFont(array(
									'bold' => true
								));
							});
							$row_num++;
							foreach ($datagroup['date'] as  $dept_key => $dept_group){
								$sheet->mergeCells('A'.$row_num.':D'.$row_num);
								$sheet->cell('A' . $row_num, function ($cell) use($dept_key) {
									$cell->setValue('Department : '.$dept_key);
									$cell->setAlignment('left');
									$cell->setFont(array(
										'bold' => true
									));
								});
								$row_num++;





									$table_header = array('ID', 'Request','Location','On Time', 'Created Time', 'Assignee', 'Assign Dur', 'Actual Dur', 'Completed By', 'Complete Comment');
										$sheet->cell('A' . $row_num . ':J' .$row_num, function ($cell) {
											$cell->setFontColor('#ffffff');
											$cell->setBackground('#2c3e50');
									});
									$sheet->row($row_num, $table_header);
									$row_num++;
									foreach ($dept_group['department'] as $row){
										if ($row->type == 1)
											$id = "G".$row->id;
										   else if ($row->type == 2)
											$id = "D".$row->id;
										else if ($row->type == 3)
											$id = "C".$row->id;
										else
											$id = "M".$row->id;

											if ( $row->status_id == 0)
											$state = 'On Time';
										else
											$state = 'Escalated';

									if ($state == 'Escalated'){
										$table_body2 = array($id,
											$row->task,
											$row->lgm_type . ' ' .  $row->lgm_name,
											'No',
											$row->time,
											$row->attendant_wholename,
											gmdate("H:i:s", $row->max_time),
											gmdate("H:i:s", $row->duration),
											$row->finisher_wholename,
											$row->log_comment);
										}
										else{
										$table_body2 = array($id,
											$row->task,
											$row->lgm_type . ' ' .  $row->lgm_name,
											'Yes',
											$row->time,
											$row->attendant_wholename,
											gmdate("H:i:s", $row->max_time),
											gmdate("H:i:s", $row->duration),
											$row->finisher_wholename,
											$row->log_comment);

										}
									$sheet->cell('A' . $row_num . ':J' .$row_num, function ($cell) {
										$cell->setAlignment('left');
									});
									$sheet->row($row_num, $table_body2);
									$row_num++;
									}

							}
						}
					}
				}
			}
				return $row_num;


			}

	private function outputGuestServiceDetailReport($sheet, $row_num, $data) {
		$report_by = $data['report_by'];

		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_by) {
			$cell->setValue('Guest Service Detailed '.$report_by.' Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});
		$row_num +=2;
		if($report_by == "Staff") {
			$sheet->mergeCells('A'.$row_num.':B'.$row_num);
			$sheet->cell('A' . $row_num , function ($cell)  {
				$cell->setValue("Detail");
				$cell->setAlignment('left');
				$cell->setFont(array(
					'size' => '12',
					'bold' => false
				));
			});
			$row_num++;

			$table_header = array('Date', 'Staff', 'Job Role', 'Login Time', 'Logout Time','Duration');
			$sheet->cell('A' . $row_num . ':f' .$row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;


			foreach ($data['detail_report'] as $key => $data_group) {
				$before_key = '';
				$before_job_role = '';
				$before_staff = '';
				$count_number = 0;
				$duration_sum = 0 ;
				foreach ($data_group as $row) {
					if($before_key != $key) {
						$key1 = date("d-M-Y", strtotime($key));
					}else {
						$key1 = '';
					}

					if($before_staff != $row['staffname'] ) {
						$staffname = $row['staffname'];
					}else {
						$staffname = '';
					}

					if($before_job_role != $row['job_role'] ) {
						$job_role = $row['job_role'];
					}else if($before_staff != $row['staffname']) {
						$job_role = $row['job_role'];
					}else {
						$job_role = '';
					}

					$login_time = date("H:i:s", strtotime($row['login_time']));
					$logout_time = date("H:i:s", strtotime($row['logout_time']));
					$duration = $row['duration'];

					$table_body = array($key1,
						$staffname,
						$job_role,
						$login_time,
						$logout_time,
						$this->timetostr($duration));

					$sheet->cell('A' . $row_num . ':F' .$row_num, function ($cell) {
						$cell->setAlignment('right');
					});
					$sheet->row($row_num, $table_body);
					$row_num++;

					$duration_sum = $duration + $duration_sum;


					$table_body1 = [];
					if(!empty($data_group[$count_number+1]) && $row['staffname'] != $data_group[$count_number+1]['staffname']) {
						$table_body1 = array('', '', '', '', 'Total', $this->timetostr($duration_sum));
						$duration_sum = 0;
						$sheet->cell('A' . $row_num . ':F' .$row_num, function ($cell) {
							$cell->setBackground('#f3f2f2');
							$cell->setAlignment('right');
						});
						$sheet->row($row_num, $table_body1);
						$row_num++;
					}else if(count($data_group) == $count_number+1 ) {
						$table_body1 = array('', '', '', '', 'Total',$this->timetostr($duration_sum));
						$duration_sum = 0;
						$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
							$cell->setBackground('#f3f2f2');
							$cell->setAlignment('right');
						});
						$sheet->row($row_num, $table_body1);
						$row_num++;
					}

					$count_number++;
					$before_key = $key;
					$before_job_role = $row['job_role'];
					$before_staff = $row['staffname'];
				}
			}

			$sheet->mergeCells('A'.$row_num.':B'.$row_num);
			$sheet->cell('A' . $row_num , function ($cell)  {
				$cell->setValue("Summary");
				$cell->setAlignment('left');
				$cell->setFont(array(
					'size' => '12',
					'bold' => false
				));
			});
			$row_num++;

			$table_header = array('Staff', 'Job Role', 'Tasks Assigned','On time (%)', 'Duration', 'Time on Task','Utilization (%)');
			$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;

			foreach ($data['summary_report'] as $key2 => $data_group1) {
				$table_body2 = array($key2,
					$data_group1['job_role'],
					$data_group1['total'],
					$data_group1['ontime'].'('.$data_group1['percent'].'%)',
					$this->timetostr($data_group1['duration']),
					$this->timetostr($data_group1['timeontask']),
                    $data_group1['utilization'].'%');
				$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body2);
				$row_num++;
			}

		}
		if($report_by == "Amenities") {

			$sheet->mergeCells('A'.$row_num.':B'.$row_num);
			$sheet->cell('A' . $row_num , function ($cell)  {
				$cell->setValue("Summary");
				$cell->setAlignment('left');
				$cell->setFont(array(
						'size' => '12',
						'bold' => false
				));
			});
			$row_num++;
			$table_header = array('Amenities', 'Quantity', 'Cost','Total');
			$sheet->cell('A' . $row_num . ':D' .$row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;
			$globaltotal = 0;
			foreach ($data['summary_report'] as  $summary){
				$total = $summary->cost * $summary->quality;
				$globaltotal += $total;
				$table_body2 = array($summary->task_name,
						$summary->quality,
						$summary->cost,
						$total);
				$sheet->cell('A' . $row_num . ':D' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body2);
				$row_num++;
			}
			$table_body2 = array('',
					'',
					'Grand Total',
					$globaltotal);
			$sheet->cell('A' . $row_num . ':D' .$row_num, function ($cell) {
				$cell->setAlignment('right');
			});
			$sheet->row($row_num, $table_body2);
			$row_num++;
			$table_body2 = array('',
					'',
					'',
					'');
			$sheet->cell('A' . $row_num . ':D' .$row_num, function ($cell) {
				$cell->setAlignment('right');
			});
			$sheet->row($row_num, $table_body2);
			$row_num++;



			$sheet->mergeCells('A'.$row_num.':B'.$row_num);
			$sheet->cell('A' . $row_num , function ($cell)  {
				$cell->setValue("Deatil");
				$cell->setAlignment('left');
				$cell->setFont(array(
						'size' => '12',
						'bold' => false
				));
			});
			$row_num++;



			$globaltotal = 0;
			$olddate = '0000-00-00';
			foreach ($data['detail_report'] as  $detail){
				$key = date('Y-m-d', strtotime($detail->start_date_time));
				if($key != $olddate) {
					if ($olddate != '0000-00-00') {
						$table_body = array('', '','',
								'',
								'',
								'',
								'',
								'Total',
								$globaltotal);
						$sheet->cell('A' . $row_num . ':J' .$row_num, function ($cell) {
							$cell->setAlignment('right');
						});
						$sheet->row($row_num, $table_body);
						$row_num++;
						$globaltotal = 0;
						$table_body = array('','','',
								'',
								'',
								'',
								'',
								'',
								'');
						$sheet->cell('A' . $row_num . ':J' .$row_num, function ($cell) {
							$cell->setAlignment('right');
						});
						$sheet->row($row_num, $table_body);
						$row_num++;
					}
					
					$table_header = array('Date', 'ID', 'Guest Name','Room', 'Created', 'Completed', 'Quantity','Amenities', 'Comment', 'Cost');
					$sheet->cell('A' . $row_num . ':J' .$row_num, function ($cell) {
						$cell->setFontColor('#ffffff');
						$cell->setBackground('#2c3e50');
					});
					$sheet->row($row_num, $table_header);
					$row_num++;
					$olddate = $key;
				}
				$total = $detail->cost * $detail->quantity;
				$globaltotal += $total;
				$tid = $detail->id;
				switch ($detail->type) {
					case 1:
						$detail->ticketno1 = sprintf("G%05d", $tid);
						break;
					case 2:
						$detail->ticketno1 = sprintf("D%05d", $tid);
						break;
					case 3:
						$detail->ticketno1 = sprintf("C%05d", $tid);
						break;
					case 4:
						$detail->ticketno1 = sprintf("M%05d", $tid);
						break;
					case 5:
						$detail->ticketno1 = sprintf("R%05d", $tid);
						break;
				}
				$table_body = array($key, $detail->ticketno1,
						$detail->guest_name,
						$detail->room,
						$detail->attendant_name,
						$detail->staffname,
						$detail->quantity,
						$detail->task_name,
						$detail->comment,
						$detail->cost);
				$sheet->cell('A' . $row_num . ':J' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body);
				$row_num++;
			}
			$table_body = array('','','',
					'',
					'',
					'',
					'',
					'Total',
					$globaltotal);
			$sheet->cell('A' . $row_num . ':J' .$row_num, function ($cell) {
				$cell->setAlignment('right');
			});
			$sheet->row($row_num, $table_body);
			$row_num++;



		}elseif ($report_by == "Service Category"){
			$row_num += 2;
			if (!empty($data['summary_list'])) {
				foreach ($data['summary_list'] as $key => $datagroup){
					$sheet->mergeCells('A'.$row_num.':B'.$row_num);
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Category : '  . $key);
						$cell->setAlignment('left');
						$cell->setFont(array(
							'bold' => true
						));
					});
				$row_num++;
				$table_header = array('Task', 'Total','On Time', 'Open', 'Escalated', 'Timeout', 'Canceled');
									$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;

				$tot = 0;
                 $completed = 0;
                 $opened=0;
                 $escalated=0;
                 $timeout=0;
				 $canceled=0;

				 foreach ($datagroup as $row){
					$table_body2 = array(strval($row->group_key),
					strval($row->total),
					strval($row->completed),
					strval($row->opened),
					strval($row->escalated),
					strval($row->timeout),
					strval($row->canceled));
								$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
								$row_num++;
				$tot += $row->total;
                $completed += $row->completed;
                $opened += $row->opened;
                $escalated += $row->escalated;
                $timeout += $row->timeout;
                $canceled += $row->canceled;

				 }
				 $table_body3 = array('Total',
				 strval($tot),
				 strval($completed),
				 strval($opened),
				 strval($escalated),
				 strval($timeout),
				 strval($canceled));
			 $sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
				 $cell->setAlignment('left');
				 $cell->setBackground('#d3d3d3');
				 $cell->setFont(array(
					'bold' => true
				));
			 });
			 $sheet->row($row_num, $table_body3);
			 $row_num+= 2;

			}
			$row_num++;
		}
		if(!empty($data['tasklist'])){
			$row_num++;
			$sheet->mergeCells('F'.$row_num.':G'.$row_num);
			$sheet->cell('F' . $row_num, function ($cell) {
				$cell->setValue('Task List by Category');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'bold' => true
				));
			});
			$row_num++;
			foreach ($data['tasklist'] as $key => $datagroup){
			$sheet->mergeCells('A'.$row_num.':B'.$row_num);
				$sheet->cell('A' . $row_num, function ($cell) use ($key) {
					$cell->setValue('Category : '  . $key);
					$cell->setAlignment('left');
					$cell->setFont(array(
						'bold' => true
					));
				});
			$row_num++;
			$table_header = array('Ticket', 'Reported On','Reported By', 'Request', 'Quantity', 'Location', 'Guest Affected', 'VIP', 'Status','Completed By', 'Completed On', 'Assigned To', 'Resolution');
									$sheet->cell('A' . $row_num . ':M' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
			foreach ($datagroup as $row){
				if ($row->type == 1)
                    $id = "G".$row->id;
                else if ($row->type == 2)
                    $id = "D".$row->id;
                else if ($row->type == 3)
                    $id = "C".$row->id;
                else
                    $id = "M".$row->id;
                if ( $row->status == 0)
                    $state = 'Completed';
                else if ($row->status == 1)
                    $state = 'Open';
                else if ($row->status == 2)
                    $state = 'Escalated';
                else if ($row->status == 3)
                    $state = 'Timeout';
                else if  ($row->status == 4)
                    $state = 'Canceled';
                else
					$state = 'Hold';
				$table_body2 = array($id,
					$row->start_date_time,
					$row->requester_name,
					$row->task,
					$row->quantity,
					$row->lgm_type.' '. $row->lgm_name,
					$row->guest_name,
					$row->vip,
					$state,
					$row->finished_wholename,
					$row->end_date_time,
					$row->assigned_wholename,
					$row->duration_time);
				$sheet->cell('A' . $row_num . ':M' .$row_num, function ($cell) {
					$cell->setAlignment('left');
				});
				$sheet->row($row_num, $table_body2);
				$row_num++;
			}
			$row_num+=2;
			}
		}
		}else {
			if (!empty($data['ticket_type'])) {
				$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) use ($data) {
					$cell->setValue($data['ticket_type']);
					$cell->setAlignment('left');
				});
			}

			$ticket_type = array('', 'Guest Request', 'Department Request', 'Complaint', 'Managed Task');
			$status_name = array('Completed', 'Open', 'Escalated', 'Timeout', 'Canceled', 'Scheduled', 'Unassigned');
			$header_order_index = array('15_' => 'O', '14_' => 'N', '13_' => 'M', '12_' => 'L', '11_' => 'K', '10_' => 'J', '9_' => 'I'
			, '8_' => 'H', '7_' => 'G', '6_' => 'F', '5_' => 'E', '4_' => 'D', '3_' => 'C', '2_' => 'B', '1_' => 'A');
			$omit_num = $data['omit_num'];
			$count_number = [];
			$m = 0;

			foreach ($data['ticket_list'] as $key => $data_group) {
				$title_all = 0;
				$before_ticket_id = '0';
				foreach ($data_group as $row) {
					$ticket_id = sprintf('%05d', $row->id);
					if ($before_ticket_id != $ticket_id)
						$title_all++;
					$before_ticket_id = $ticket_id;
				}
				$count_number[] = $title_all;
			}

			foreach ($data['ticket_list'] as $key => $data_group) {
				$row_num++;
				$table_title = '';
				if ($data['report_by'] == 'Date')
					$table_title = date("d-M-Y", strtotime($key));
				else if ($data['report_by'] == 'Ticket Type')
					$table_title = $ticket_type[$key];
				else if ($data['report_by'] == 'Status')
					$table_title = $key . ' (' . $count_number[$m] . ' Tickets)';
				else if ($data['report_by'] == 'Staff')
					$table_title = $key . ' (' . $count_number[$m] . ' Tickets)';
				else
					$table_title = $key;

				$sheet->cell('A' . $row_num, function ($cell) use ($table_title) {
					$cell->setValue($table_title);
					$cell->setAlignment('left');
				});

				$row_num++;
				$table_header = [];
				foreach ($data['fields'] as $key1 => $value) {
					if ($key1 != $omit_num) {
                        $table_header[] = $data['fields'][$key1];
					}
				}

				//header section
				$header_key = count($table_header);
				$header_order = $header_order_index[$header_key . '_'];

				$sheet->cell('A' . $row_num . ':' . $header_order . $row_num, function ($cell) {
					$cell->setFontColor('#ffffff');
					$cell->setBackground('#2c3e50');
				});
				$sheet->row($row_num, $table_header);

				$row_num++;

				//body section start
				$before_ticket_id = '0';
				foreach ($data_group as $row) {
					$ticket_id = sprintf('%05d', $row->id);
					$data_row = [];
					$data_row[] = $this->getCompare($before_ticket_id, $ticket_id, $ticket_id);
				//	$data_row[] = $this->getCompare($before_ticket_id, $ticket_id, $ticket_type[$row->type]);
				if( !empty($row->lgm_name) ) {
					if($ticket_type[$row->type] == 'Guest Request')
					$data_row[] = $this->getCompare($before_ticket_id,$ticket_id,$row->lgm_name.' - '.$row->guest_name);
					else
					$data_row[] = $this->getCompare($before_ticket_id,$ticket_id,$row->lgm_name);
				}
				else
					$data_row[] = '';

					if (!empty($row->task_name))
						$data_row[] = $this->getCompare($before_ticket_id, $ticket_id, $row->task_name);
					else
						$data_row[] = '';

					if ($row->sub_status == 'Modify(Closed)')
                        $row->sub_status = 'Closed';
                    else if ($row->sub_status == 'Modify(Hold)')
                        $row->sub_status = 'Hold';
                    else if ($row->sub_status == 'Modify(Resume)')
                        $row->sub_status = 'Resume';

                    if ($row->sub_status == 'Resume'){

                        $hold_time = strtotime($row->log_time) - strtotime($hold_log_time);
					}

					if( $row->proc_time < 0 )
                        $proc_time = '00:00';
                    else
                        $proc_time = sprintf('%02d:%02d', ($row->proc_time/60), $row->proc_time%60);
                    if ($row->sub_status == 'Completed'){
                        $data_row[] = $row->sub_status . '('.  gmdate("H:i:s", $row->proc_time) . ')';
                    }
                    else  if ($row->sub_status == 'Resume'){
                        $data_row[] = $row->sub_status . '('.  gmdate("H:i:s", $hold_time) . ')';
                    }else{
                        $data_row[] = $row->sub_status;
                    }

                    $data_row[] = date("d-M-y H:i:s",  strtotime($row->log_time));
                    $data_row[] = date("d-M-y H:i:s",  strtotime($row->log_time));
                    $data_row[] = $row->comment;

				//	$data_row[] = $row->sub_status;

					if ($before_ticket_id != $ticket_id) {
					//	$data_row[] = date("d-M-Y", strtotime(substr($row->log_time, 0, 10)));
					//	$data_row[] = substr($row->log_time, 11, 10);
					//	if ($row->proc_time < 0)
					//		$proc_time = '00:00';
					//	else
					//		$proc_time = sprintf('%02d:%02d', ($row->proc_time / 60), $row->proc_time % 60);
					//	$data_row[] = $proc_time;
					//	$data_row[] = $row->comment;
						$data_row[] = $row->guest_feedback;
					//	$data_row[] = $row->attendant_wholename;
					//	$data_row[] = $row->wholename;
					} else {
					//	$data_row[] = date("d-M-Y", strtotime(substr($row->log_time, 0, 10)));
					//	if ($row->sub_status == 'Completed') {
					//		$data_row[] = substr($row->log_time, 11, 10);
					//		if ($row->proc_time < 0)
					//			$proc_time = '00:00';
					//		else
					//			$proc_time = sprintf('%02d:%02d', ($row->proc_time / 60), $row->proc_time % 60);
					//		$data_row[] = $proc_time;
					//	} else {
					//		$data_row[] = substr($row->log_time, 11, 10);
					//		$data_row[] = '';
					//	}
					//	$data_row[] = $row->comment;
						$data_row[] = '';
					//	$data_row[] = $row->attendant_wholename;
					//	$data_row[] = $row->sub_wholename;
					}
					$data_row[] = $row->sub_wholename;

                    if ($row->sub_status == 'Hold')
                            $hold_log_time = $row->log_time;
					$before_ticket_id = $ticket_id;// store to compare the previously displayed values.

					$table_body = [];
					foreach ($data_row as $key1 => $value) {
						if ($key1 != $omit_num) {
                            $table_body[] = $data_row[$key1];
						}
					}
					$body_key = count($table_body);
					$body_order = $header_order_index[$body_key . '_'];

					$sheet->cell('A' . $row_num . ':' . $body_order . $row_num, function ($cell) {
						$cell->setAlignment('left');
					});
					$sheet->row($row_num, $table_body);
					$row_num++;
				}
				//--body section end
				//bottom section start
				if (!(($data['report_type'] == 'Detailed') && ($data['report_by'] == 'Status'))) {
					$sheet->cell('A' . $row_num, function ($cell) {
						$cell->setValue('Summary');
						$cell->setAlignment('left');
						$cell->setFont(array(
							'size' => '14',
							'bold' => true
						));
					});
					$row_num++;
					$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
						$cell->setBackground('#e4e4e3');
					});
					$table_bottom_header = array('', '', 'Total', 'Completed', 'Opened', 'Escalated', 'Timeout'
					, 'Canceled', 'Scheduled', 'Complet Time');
					$sheet->row($row_num, $table_bottom_header);
					$row_num++;
					$table_bottom_body = array('', '', strval($data['summary_data'][$key]->total),
					strval($data['summary_data'][$key]->completed),
					strval($data['summary_data'][$key]->opened),
					strval($data['summary_data'][$key]->escalated),
					strval($data['summary_data'][$key]->timeout),
					strval($data['summary_data'][$key]->canceled),
					strval($data['summary_data'][$key]->scheduled),
					strval($data['summary_data'][$key]->completed_time));

					$sheet->cell('A' . $row_num . ':J' . $row_num, function ($cell) {
						$cell->setAlignment('right');
					});
					$sheet->row($row_num, $table_bottom_body);
					$row_num++;
				}
				//bottom section end
				$m++;
			}
		}
		return $row_num;
	}


	private function outputGuestServiceSummaryReport($sheet, $row_num, $data) {
		$report_by = $data['report_by'];
		if($report_by == 'Department'){
		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_by) {
			$cell->setValue('Executive Summary By Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});
	}
	else{
		$sheet->mergeCells('C'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($report_by) {
			$cell->setValue('Guest Service Summary '.$report_by.' Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});
	}
		$row_num +=2;
		if($report_by != 'Service Category'){
		if($report_by == "Staff") {
			$sheet->mergeCells('A'.$row_num.':B'.$row_num);
			$sheet->cell('A' . $row_num , function ($cell)  {
				$cell->setValue("Detail");
				$cell->setAlignment('left');
				$cell->setFont(array(
					'size' => '12',
					'bold' => false
				));
			});
			$row_num++;

			$table_header = array('Date', 'Staff', 'Job Role', 'Login Time', 'Logout Time','Duration');
			$sheet->cell('A' . $row_num . ':f' .$row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;


			foreach ($data['detail_report'] as $key => $data_group) {
				$before_key = '';
				$before_job_role = '';
				$before_staff = '';
				$count_number = 0;
				$duration_sum = 0 ;
				foreach ($data_group as $row) {
					if($before_key != $key) {
						$key1 = date("d-M-Y", strtotime($key));
					}else {
						$key1 = '';
					}

					if($before_staff != $row['staffname'] ) {
						$staffname = $row['staffname'];
					}else {
						$staffname = '';
					}

					if($before_job_role != $row['job_role'] ) {
						$job_role = $row['job_role'];
					}else if($before_staff != $row['staffname']) {
						$job_role = $row['job_role'];
					}else {
						$job_role = '';
					}

					$login_time = date("H:i:s", strtotime($row['login_time']));
					$logout_time = date("H:i:s", strtotime($row['logout_time']));
					$duration = $row['duration'];

					$table_body = array($key1,
						$staffname,
						$job_role,
						$login_time,
						$logout_time,
						$this->timetostr($duration));

					$sheet->cell('A' . $row_num . ':F' .$row_num, function ($cell) {
						$cell->setAlignment('right');
					});
					$sheet->row($row_num, $table_body);
					$row_num++;

					$duration_sum = $duration + $duration_sum;


					$table_body1 = [];
					if(!empty($data_group[$count_number+1]) && $row['staffname'] != $data_group[$count_number+1]['staffname']) {
						$table_body1 = array('', '', '', '', 'Total', $this->timetostr($duration_sum));
						$duration_sum = 0;
						$sheet->cell('A' . $row_num . ':F' .$row_num, function ($cell) {
							$cell->setBackground('#f3f2f2');
							$cell->setAlignment('right');
						});
						$sheet->row($row_num, $table_body1);
						$row_num++;
					}else if(count($data_group) == $count_number+1 ) {
						$table_body1 = array('', '', '', '', 'Total',$this->timetostr($duration_sum));
						$duration_sum = 0;
						$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
							$cell->setBackground('#f3f2f2');
							$cell->setAlignment('right');
						});
						$sheet->row($row_num, $table_body1);
						$row_num++;
					}

					$count_number++;
					$before_key = $key;
					$before_job_role = $row['job_role'];
					$before_staff = $row['staffname'];
				}
			}

			$sheet->mergeCells('A'.$row_num.':B'.$row_num);
			$sheet->cell('A' . $row_num , function ($cell)  {
				$cell->setValue("Summary");
				$cell->setAlignment('left');
				$cell->setFont(array(
					'size' => '12',
					'bold' => false
				));
			});
			$row_num++;

			$table_header = array('Staff', 'Job Role', 'Tasks Assigned','On time (%)', 'Duration', 'Time on Task','Utilization (%)');
			$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$sheet->row($row_num, $table_header);
			$row_num++;

			foreach ($data['summary_report'] as $key2 => $data_group1) {
				$table_body2 = array($key2,
					$data_group1['job_role'],
					strval($data_group1['total']),
					$data_group1['ontime'].'('.$data_group1['percent'].'%)',
					$this->timetostr($data_group1['duration']),
					$this->timetostr($data_group1['timeontask']),
                    $data_group1['utilization'].'%');
				$sheet->cell('A' . $row_num . ':C' .$row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				$sheet->row($row_num, $table_body2);
				$row_num++;
			}

		}
		$row_num +=2;
		if(!empty($data['ticket_type'])) {
			$sheet->cell('A' . $row_num.':E'.$row_num, function ($cell) use($data) {
				$cell->setValue($data['ticket_type']);
				$cell->setAlignment('left');
			});
		}

		$row_num++;
		$ticket_type = array('', 'Guest Request', 'Department Request', 'Complaint', 'Managed Task');
		$count_number = [];
		$m = 0;

		foreach ($data['ticket_list'] as $key => $data_group) {
			$title_all = 0;
			$before_ticket_id = '0';
			foreach ($data_group as $row ) {
				$ticket_id = sprintf('%05d', $row->id);
				if($before_ticket_id != $ticket_id)
					$title_all++;
				$before_ticket_id = $ticket_id;
			}
			$count_number[] = $title_all;
		}
		$all_count_number = count($data['ticket_list']);


		if($data['report_by'] != 'Staff'){
			$sheet->cell('A' . $row_num.':K'. $row_num, function ($cell)  {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
		$table_header = array($data['report_by'],'On Time %','Avg Time', 'Open', 'On Time', 'Escalated','Timeout','Closed'
		,'Canceled','Scheduled', 'Total');
		} else{
			$sheet->cell('A' . $row_num.':L'. $row_num, function ($cell)  {
				$cell->setFontColor('#ffffff');
				$cell->setBackground('#2c3e50');
			});
			$table_header = array($data['report_by'],'Department','Job Role','On Time %', 'Avg Time', 'Open', 'On Time','Escalated','Timeout','Closed'
		,'Canceled','Total');
		}
		$sheet->row($row_num, $table_header);
		$row_num++;
		$tot = 0;
		$completed = 0;
        $opened=0;
        $escalated=0;
		$timeout=0;
		$closed=0;
		$canceled=0;
		$per = 0;
		$percent = 0;
		$avg = 0;

		foreach ($data['ticket_list'] as  $key => $data_group) {
			$total = 0;
			$total_complete_time = 0;
			$complete_count = 0;
			$ticket_count = array(0, 0, 0, 0, 0, 0);
			$before_ticket_id = '0';
			foreach ($data_group as $row) {
				$ticket_id = sprintf('%05d', $row->id);
				if($before_ticket_id != $ticket_id) {
					$total++;
				//	$ticket_count[$row->status_id]++;
					if( $row->status_id == 0 && $row->proc_time >=0 )
					{
						$complete_count++;
						$total_complete_time += $row->proc_time;
					}
				}
				$before_ticket_id = $ticket_id;// store to compare the previously displayed values.
			}
			if( $complete_count > 0 )
			{
				$average_time = $total_complete_time / $complete_count;
				$average_time = sprintf('%02d:%02d', ($average_time/60), $average_time%60);
			}
			else
				$average_time = '--:--';
				$per  = $data['summary_data'][$key]->completed + $data['summary_data'][$key]->escalated + $data['summary_data'][$key]->timeout + $data['summary_data'][$key]->closed;

				if ($per != 0){
					$percent = ($data['summary_data'][$key]->completed /$per ) * 100;
					$avg = $data['summary_data'][$key]->completed_time1/$per;
				}
				else{
					$percent = 0;
					$avg = 0;
				}
			$table_first = '';
			if($data['report_by'] == 'Date')
				$table_first = date("d-M-Y",  strtotime($key));
			else if($data['report_by'] == 'Ticket Type')
				$table_first = $ticket_type[$key] ;
			else if($data['report_by'] == 'Status')
				$table_first =  $key.' ('.$count_number[$m].' Tickets)';
			else
				$table_first = $key;

			if($data['report_by'] != 'Staff'){
			$table_body = array(strval($table_first),
			strval(number_format($percent,2)),
				gmdate("H:i:s", $avg),
				strval($data['summary_data'][$key]->opened),
				strval($data['summary_data'][$key]->completed),
				strval($data['summary_data'][$key]->escalated),
				strval($data['summary_data'][$key]->timeout),
				strval($data['summary_data'][$key]->closed),
				strval($data['summary_data'][$key]->canceled),
				strval($data['summary_data'][$key]->scheduled),
				strval($data['summary_data'][$key]->total));
			} else
			{
				$table_body = array(strval($table_first),
				$data['summary_data'][$key]->department,
				$data['summary_data'][$key]->job_role,
				strval(number_format($percent,2)),
				gmdate("H:i:s", $avg),
				strval($data['summary_data'][$key]->opened),
				strval($data['summary_data'][$key]->completed),
				strval($data['summary_data'][$key]->escalated),
				strval($data['summary_data'][$key]->timeout),
				strval($data['summary_data'][$key]->closed),
				strval($data['summary_data'][$key]->canceled),
				strval($data['summary_data'][$key]->total),);
			}
			$sheet->cell('A' . $row_num.':I'. $row_num, function ($cell)  {
				$cell->setAlignment('right');
			});
			$sheet->row($row_num, $table_body);
			$row_num++;
			$m++;
			if($data['report_by'] == 'Staff'){
			$tot += $data['summary_data'][$key]->total;
			$completed += $data['summary_data'][$key]->completed;
			$opened += $data['summary_data'][$key]->opened;
			$escalated += $data['summary_data'][$key]->escalated;
			$timeout += $data['summary_data'][$key]->timeout;
			$closed += $data['summary_data'][$key]->closed;
			$canceled += $data['summary_data'][$key]->canceled;
		}
		}
		$row_num++;
	}
		if ($data['report_by'] == 'Department')
		{
			if (!empty($data['completed']))
			{

				$row_num++;
				foreach ($data['completed'] as $key => $datagroup){
					if(!empty($datagroup['date'])){
						$row_num++;
					$sheet->mergeCells('A'.$row_num.':D'.$row_num);
					$sheet->cell('A' . $row_num, function ($cell) use($key) {
							$cell->setValue('Date : '.date("d-M-y",  strtotime($key)));
							$cell->setAlignment('left');
							$cell->setFont(array(
								'bold' => true
							));
						});
						$row_num++;
						foreach ($datagroup['date'] as  $dept_key => $dept_group){
							$sheet->mergeCells('A'.$row_num.':D'.$row_num);
							$sheet->cell('A' . $row_num, function ($cell) use($dept_key) {
								$cell->setValue('Department : '.$dept_key);
								$cell->setAlignment('left');
								$cell->setFont(array(
									'bold' => true
								));
							});
							$row_num++;
							foreach ($dept_group['department'] as  $status_key => $status_group){
								if ( $status_key == 0)
									$state = 'On Time';
								else if ($status_key == 1)
									$state = 'Open';
								else if ($status_key == 2)
									$state = 'Escalated';
								else if ($status_key == 3)
									$state = 'Timeout';
								else if ($status_key == 4)
									$state = 'Canceled';
								else if  ($status_key == 6)
									$state = 'Escalated';
								else if  ($status_key == 7)
									$state = 'Closed';
								else
									$state = 'Hold';

								if ( $state == 'On Time'){
								$sheet->mergeCells('A'.$row_num.':D'.$row_num);
								$sheet->cell('A' . $row_num, function ($cell) use($state) {
									$cell->setValue($state . "  - (Requests that have been completed within the allotted duration)");
									$cell->setFontColor('#008000');
									$cell->setAlignment('left');
									$cell->setFont(array(
										'bold' => true
									));
								});
								$row_num++;}
								elseif ( $state == 'Hold'){
								$sheet->mergeCells('A'.$row_num.':D'.$row_num);
								$sheet->cell('A' . $row_num, function ($cell) use($state) {
									$cell->setValue($state);
									$cell->setFontColor('#ffa500');
									$cell->setAlignment('left');
									$cell->setFont(array(
										'bold' => true
									));
								});
								$row_num++;}
								else if ($state == 'Open'){
								$sheet->mergeCells('A'.$row_num.':D'.$row_num);
								$sheet->cell('A' . $row_num, function ($cell) use($state) {
									$cell->setValue($state);
									$cell->setFontColor('#0000b2');
									$cell->setAlignment('left');
									$cell->setFont(array(
										'bold' => true
									));
								});
								$row_num++;}
								else if ($state == 'Escalated'){
								$sheet->mergeCells('A'.$row_num.':D'.$row_num);
								$sheet->cell('A' . $row_num, function ($cell) use($state) {
									$cell->setValue($state);
									$cell->setFontColor('#ffa500');
									$cell->setAlignment('left');
									$cell->setFont(array(
										'bold' => true
									));
								});
								$row_num++;}
								else if ($state == 'Timeout'){
								$sheet->mergeCells('A'.$row_num.':D'.$row_num);
								$sheet->cell('A' . $row_num, function ($cell) use($state) {
									$cell->setValue($state . "  - (Requests that haven't been completed after the allotted duration and escalation)");
									$cell->setFontColor('#FF0000');
									$cell->setAlignment('left');
									$cell->setFont(array(
										'bold' => true
									));
								});
								$row_num++;}
								else if ($state == 'Closed'){
									$sheet->mergeCells('A'.$row_num.':D'.$row_num);
									$sheet->cell('A' . $row_num, function ($cell) use($state) {
										$cell->setValue($state . "  - (Requests that have been completed after getting timed-out)");
										$cell->setFontColor('#808080');
										$cell->setAlignment('left');
										$cell->setFont(array(
											'bold' => true
										));
									});
									$row_num++;}
								else{
								$sheet->mergeCells('A'.$row_num.':D'.$row_num);
								$sheet->cell('A' . $row_num, function ($cell) use($state) {
									$cell->setValue($state);
									$cell->setFontColor('#808080');
									$cell->setAlignment('left');
									$cell->setFont(array(
										'bold' => true
									));
								});
								$row_num++;}
								$table_header = array('ID', 'Request','Location', 'Created', 'Assignee', 'Assign Dur', 'Actual Dur', 'Completed By');
									$sheet->cell('A' . $row_num . ':H' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;
								foreach ($status_group['status'] as $row){
									if ($row->type == 1)
                    					$id = "G".$row->id;
               						else if ($row->type == 2)
                    					$id = "D".$row->id;
                					else if ($row->type == 3)
                    					$id = "C".$row->id;
                					else
                    					$id = "M".$row->id;
									$table_body2 = array(strval($id),
									$row->task,
									$row->lgm_type . ' ' . $row->lgm_name,
									$row->time,
									$row->attendant_wholename,
									gmdate("H:i:s", $row->max_time),
									gmdate("H:i:s", $row->duration),
									$row->finisher_wholename);
								$sheet->cell('A' . $row_num . ':H' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
								$row_num++;
								}
							}
						}
					}
				}
			}
		}
		if ($report_by == "Service Category"){
			$row_num += 2;
			if (!empty($data['summary_list'])) {
				foreach ($data['summary_list'] as $key => $datagroup){
					$sheet->mergeCells('A'.$row_num.':B'.$row_num);
					$sheet->cell('A' . $row_num, function ($cell) use ($key) {
						$cell->setValue('Category : '  . $key);
						$cell->setAlignment('left');
						$cell->setFont(array(
							'bold' => true
						));
					});
				$row_num++;
				$table_header = array('Task', 'Total','On Time', 'Open', 'Escalated', 'Timeout', 'Canceled');
									$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
										$cell->setFontColor('#ffffff');
										$cell->setBackground('#2c3e50');
								});
								$sheet->row($row_num, $table_header);
								$row_num++;

				$tot = 0;
                 $completed = 0;
                 $opened=0;
                 $escalated=0;
                 $timeout=0;
				 $canceled=0;

				 foreach ($datagroup as $row){
					$table_body2 = array(strval($row->group_key),
					strval($row->total),
					strval($row->completed),
					strval($row->opened),
					strval($row->escalated),
					strval($row->timeout),
					strval($row->canceled));
								$sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
									$cell->setAlignment('left');
								});
								$sheet->row($row_num, $table_body2);
								$row_num++;
				$tot += $row->total;
                $completed += $row->completed;
                $opened += $row->opened;
                $escalated += $row->escalated;
                $timeout += $row->timeout;
                $canceled += $row->canceled;

				 }
				 $table_body3 = array('Total',
				 strval($tot),
				 strval($completed),
				 strval($opened),
				 strval($escalated),
				 strval($timeout),
				 strval($canceled));
			 $sheet->cell('A' . $row_num . ':G' .$row_num, function ($cell) {
				 $cell->setAlignment('left');
				 $cell->setBackground('#d3d3d3');
				 $cell->setFont(array(
					'bold' => true
				));
			 });
			 $sheet->row($row_num, $table_body3);
			 $row_num+= 2;

			}
			$row_num++;
		}
		}
	if($data['report_by'] == 'Staff'){
		$table_body = array(" "," "," "," ", "Total",
		strval($opened),
		strval($completed),
		strval($escalated),
		strval($timeout),
		strval($closed),
		strval($canceled),
		strval($tot),);

		$sheet->cell('A' . $row_num.':L'. $row_num, function ($cell)  {
			$cell->setAlignment('right');
			$cell->setBackground('#CFD8DC');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$sheet->row($row_num, $table_body);
		$row_num++;
	}
		return $row_num;
	}

	public function generateComplaintreportReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		$data = $this->getComplaintreportReportData($request);

		return view('frontend.report.complaintreport', compact('data'));
	}


	public function generateFacilitiesExcelReport(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date("Y-m-d H:i:s");

 		$property_id = $request->get('property_id', 0);
 		$settings = [];
		$settings['guest_fac_report_time_interval'] = 6;
		$settings['guest_fac_report_recipients'] = '';
		$settings = PropertySetting::getPropertySettings($property_id, $settings);

		// calc start time based on hours
		$start_time = date('Y-m-d H:i:s', strtotime($cur_time) - $settings['guest_fac_report_time_interval'] * 3600);
		// $start_time = "2017-03-01 00:00:00";

		$this->getGuestReportData($property_id, $start_time, $cur_time, $settings);

		//return $this->makeITReportData($report);

	}
	public function downloadFacilitiesReportExcel(Request $request){

				ini_set('memory_limit','-1');
				ini_set('max_execution_time', 300);
				set_time_limit(0);
				date_default_timezone_set(config('app.timezone'));
				$cur_time = date('Y-M-d H:i:s');
				$cur_date = date('Y-M-d');

				$property_id = $request->get('property_id',4);
				$start_time = $request->get('start_time', $cur_date . ' 00:00:00');
				$end_time = $request->get('end_time', $cur_time);
				$data=$this->generateReportProc($property_id, $start_time, $end_time);
				//$property_id = $request->get('property_id',4);

				$property = DB::table('common_property')->where('id', $property_id)->first();
				if (empty($property)) {
					echo "Property does not exist";
					return;
				}
				$logo_path = $property->logo_path;

				$filename = $data['report_type'] .'_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
				//$folder_path = public_path() . '/uploads/reports/';
				// $path = $folder_path . $filename . '.html';
				// $pdf_path = $folder_path . $filename . '.xls';
				// ob_start();

			$param = $request->all();
			
			return Excel::download(new CommonExport, 'test.xlsx');
		// 	Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

		// 	$excel->sheet('Facilities Report', function($sheet) use ($data,$logo_path) {
		// 		$sheet->setOrientation('landscape');

		// 		$this->outputComplaintLogo($sheet,$logo_path);
		// 		$this->outputGuestDescription($sheet, $data);

		// 		$row_num = 4;

		// 		if($data['report_by'] == 'Facilities' ) {

		// 					if( $data['report_type'] == 'Detailed' )
		// 						$row_num = $this->outputGuestDetailReport($sheet, $row_num, $data);
		// 				}

		// 	});

		// 	$this->sendNotifyDownloadCompleted($param);

		// })->export(config('app.report_file_type'));


	}

	public function testFun ($event) {
		// dd($sheet);
		$sheet = $event->sheet;
		// $writer = $event->writer;
		$logo_path = public_path('uploads/logo/logo_1502609305.png');
		$sheet->setOrientation('landscape');

		$this->outputComplaintLogo($sheet,$logo_path);
		// $this->outputGuestDescription($sheet, $data);

		// $row_num = 4;

		// if($data['report_by'] == 'Facilities' ) {
		// 	if( $data['report_type'] == 'Detailed' )
		// 		$row_num = $this->outputGuestDetailReport($sheet, $row_num, $data);
		// }
	}

	public function getGuestReportData($property_id, $start_time, $end_time, $settings){

				// ini_set('memory_limit','-1');
				// ini_set('max_execution_time', 300);
				// set_time_limit(0);
				date_default_timezone_set(config('app.timezone'));
				$cur_time = date("Y-m-d H:i:s");

				$data=$this->generateReportProc($property_id, $start_time, $end_time);
				//$property_id = $request->get('property_id',4);
				$check_flag = CronLogs::checkDuplicates($cur_time,json_encode($data));

				if($check_flag==true)
				{
				$property = DB::table('common_property')->where('id', $property_id)->first();
				if (empty($property)) {
					echo "Property does not exist";
					return;
				}
				$logo_path = $property->logo_path;

				$filename = 'Hotlync_Guest_Facilities_Report_' . date('d_m_hA', strtotime($end_time));
				$folder_path = public_path() . '/uploads/reports/';
				// $path = $folder_path . $filename . '.html';
				// $pdf_path = $folder_path . $filename . '.xls';
				// ob_start();

				//$param = $request->all();

				$content = Excel::create($filename, function($excel) use ($data, $logo_path) {

					$excel->sheet('Facilities Report', function($sheet) use ($data,$logo_path) {
						$sheet->setOrientation('landscape');

						$this->outputComplaintLogo($sheet,$logo_path);
						$this->outputGuestDescription($sheet, $data);

						$row_num = 4;

						//$row_num = $this->outputITTitle($sheet, $data, $row_num);

						if($data['report_by'] == 'Facilities' ) {

							if( $data['report_type'] == 'Detailed' )
								$row_num = $this->outputGuestDetailReport($sheet, $row_num, $data);
						}

					});

					//$this->sendNotifyDownloadCompleted($param);

				})->store('xls', false, true);

				$content_path = $content['full'];



				//$request = [];



				$info = [];
				$info['start_time'] = date('H:i', strtotime($start_time));
				$info['end_time'] = date('H:i', strtotime($end_time));
				$info['date'] = date('d F Y', strtotime($end_time));
				$info['company_name'] = 'EnnovaTech Solutions';


				$smtp = Functions::getMailSetting($property_id, '');
				$recipients = $this->getPropertySetting($property_id, 'guest_fac_report_recipients');

				// $options = [];
				// $options['html'] = $path;
				// $options['paperSize'] = array('format' => 'A4', 'orientation' => 'portrait');
				// $request['options'] = $options;
				$message = [];
				$message['content'] = view('emails.facilities_report', ['info' => $info])->render();
				$message['attach'] = $content_path;
				$message['type'] ='fac_email';
				$message['smtp'] = $smtp;
				//$message['filename'] = '/var/www/html/hotel/CMS/public/uploads/reports/Hotlync_Guest_Facilities_Report_03_12_06PM.xls';
				//$message['content'] = $request;
			//	$message['to'] = Functions::getUserEmailArray($settings['guest_fac_report_recipients'], ";");
				$message['to'] = $recipients->value;
				$message['subject'] = 'HotLync Facilities Report';
				//$message['html'] = $path;

				Redis::publish('notify', json_encode($message));
				echo json_encode($message);
			}

	}

	function returnUserName($data, &$return_value ) {
        if( !empty($data) )
        {
            $userlist = DB::table('common_users')
                ->whereRaw("FIND_IN_SET(id, '".$data->value."')")

                ->select(DB::raw("CONCAT_WS(' ', first_name, last_name) as fullname"))
                ->get();

            foreach($userlist as $row)
            {
                $return_value[] = array('text' => $row->fullname);
            }
        }
	}

	public function generateReportProc($property_id, $start_time, $end_time)
	{
		$data = [];
		$data['report_type'] = 'Detailed';
	   $data['report_by'] = 'Facilities';
	   $data['property_id'] = $property_id;
	   $data['property'] = Property::find($property_id);
	   $data['start_date'] = $start_time;
	   $data['end_date'] = $end_time;

	   $data['fac_list'] = DB::table('common_guest_facility_log as cgf')
	   ->leftJoin('common_guest as cg', 'cg.id', '=', 'cgf.guest_id')
	   ->leftJoin('common_room as cr', 'cg.room_id', '=', 'cr.id')
	   ->where('cg.property_id', $property_id)
	   ->whereBetween('cgf.entry_time', array($start_time, $end_time))
	   ->select(DB::raw('cg.guest_name, cr.room, cgf.adults, cgf.kids, cgf.extra, cgf.created_at, cgf.location, cgf.comment, cgf.entry_time, cgf.exit_time'))
	   ->get();

	   $data['start_date'] = date('h:i A', strtotime($start_time));
	   $data['end_date'] = date('h:i A', strtotime($end_time));
	   $data['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
	   $data['title'] = $data['report_type'] . ' Report by ' . $data['report_by'] . ' ';
	  return $data;
	}


	public function downloadITReportExcel(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->getITReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = $data['report_type'] .'_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		$param = $request->all();

		$excel_type = $request->get('excel_type', 'excel');

        $excel_file_type = 'csv';
		if($excel_type == 'excel')
			$excel_file_type = config('app.report_file_type');


		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

			$excel->sheet('IT Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputComplaintLogo($sheet,$logo_path);
				$this->outputITDescription($sheet, $data);

				$row_num = 1;

				$row_num = $this->outputITTitle($sheet, $data, $row_num);

				if($data['report_by'] == 'IT' ) {

					if( $data['report_type'] == 'Detailed' )
						$row_num = $this->outputITDetailReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}
	public function downloadENGReportExcel(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);


		$data = $this->getENGReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = $data['report_type'] .'_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		$param = $request->all();

		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

			$excel->sheet('Engineering Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputComplaintLogo($sheet,$logo_path);
				$this->outputITDescription($sheet, $data);

				$row_num = 1;

				$row_num = $this->outputENGTitle($sheet, $data, $row_num);

				if($data['report_by'] == 'ENG' ) {

					if( $data['report_type'] == 'Detailed' )
						$row_num = $this->outputENGDetailReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export(config('app.report_file_type'));
	}
		public function generateFeedbackExcelReport(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date("Y-m-d H:i:s");
 		$property_id = $request->get('property_id', 0);
 		$settings = [];
		$settings['guest_feedback_report_interval'] = 6;
		$settings['guest_feedback_report_recipients'] = 'snehanyk05@gmail.com';
		$settings = PropertySetting::getPropertySettings($property_id, $settings);

		// calc start time based on hours
		//$setting_intervals=[];
		//$setting_recipients=[];
		//$settings=[];
		//$setting_intervals = explode("|", $setting['guest_feedback_report_interval']);
		//$setting_recipients = explode("|", $setting['guest_feedback_report_recipients']);
		//for( $i=0;$i<count($setting_intervals);$i++)
		//{
		//$settings['guest_feedback_report_interval']	=$setting_intervals[$i];
		//$settings['guest_feedback_report_recipients']	=$setting_recipients[$i];
        $start_time = date('Y-m-d H:i:s', strtotime($cur_time) - $settings['guest_feedback_report_interval'] * 3600);
		// $start_time = "2017-03-01 00:00:00";

		$this->getFeedbackReportData( $request, $property_id, $start_time, $cur_time, $settings);

		//}s



		//return $this->makeITReportData($report);

	}
	public function downloadFeedbackReportExcel(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$property_id = $request->get('property_id',4);
		//$start_time = $request->get('start_date', $cur_date . ' 00:00:00');
		//$end_time = $request->get('end_date', $cur_time);
		$data = $this->getFBReportData($request);
		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = $data['report_type'] .'_Guest Relations Log Report' . '_' . date('d_M_Y_H_i');

		$param = $request->all();

		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

			$excel->sheet('Guest Relations Log Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputComplaintLogo($sheet,$logo_path);
				$this->outputGuestDescription($sheet, $data);

				$row_num = 1;

				$row_num = $this->outputFBTitle($sheet, $data, $row_num);

				if($data['report_by'] == 'Summary' ) {

					if( $data['report_type'] == 'Summary' )
						$row_num = $this->outputFBSummaryReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export(config('app.report_file_type'));
	}
	public function getFeedbackReportData( Request $request, $property_id, $start_time, $end_time, $settings){

		// ini_set('memory_limit','-1');
		// ini_set('max_execution_time', 300);
		// set_time_limit(0);


		$data = $this->getFBReportEmail( $request, $property_id, $start_time, $end_time);
		//$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = 'Hotlync_Guest_Relations_Log_Report_' . date('d_m_hA', strtotime($end_time));
		$folder_path = public_path() . '/uploads/reports/';
		// $path = $folder_path . $filename . '.html';
		// $pdf_path = $folder_path . $filename . '.xls';
		// ob_start();

		//$param = $request->all();

		$content = Excel::create($filename, function($excel) use ($data, $logo_path) {

			$excel->sheet('Guest Relations Log Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputComplaintLogo($sheet,$logo_path);
				$this->outputGuestDescription($sheet, $data);

				$row_num = 4;

				$row_num = $this->outputFBTitle($sheet, $data, $row_num);

				if($data['report_by'] == 'Summary' ) {

					if( $data['report_type'] == 'Summary' )
						$row_num = $this->outputFBSummaryReport($sheet, $row_num, $data);
				}

			});

			//$this->sendNotifyDownloadCompleted($param);

		})->store('xls', false, true);

		$content_path = $content['full'];



		//$request = [];



		$info = [];
		$info['start_time'] = date('H:i', strtotime($start_time));
		$info['end_time'] = date('H:i', strtotime($end_time));
		$info['end_date'] = date('d F Y', strtotime($end_time));
		$info['start_date'] = date('d F Y', strtotime($start_time));
		$info['company_name'] = 'EnnovaTech Solutions';


		$smtp = Functions::getMailSetting($property_id, '');
		$recipients = $this->getPropertySetting($property_id, 'guest_feedback_report_recipients');
		// $options = [];
		// $options['html'] = $path;
		// $options['paperSize'] = array('format' => 'A4', 'orientation' => 'portrait');
		// $request['options'] = $options;
		$message = [];
		$message['content'] = view('emails.Guest_Feedback_report', ['info' => $info])->render();
		$message['attach'] = $content_path;
		$message['type'] ='feed_email';
		$message['smtp'] = $smtp;
		//$message['filename'] = '/var/www/html/hotel/CMS/public/uploads/reports/Hotlync_Guest_Facilities_Report_03_12_06PM.xls';
		//$message['content'] = $request;
	//	$message['to'] = Functions::getUserEmailArray($settings['guest_feedback_report_recipients'], ";");
		$message['to'] = $recipients->value;
		$message['subject'] = 'HotLync Guest Relations Log Report';
		//$message['html'] = $path;
		Redis::publish('notify', json_encode($message));
		echo json_encode($message);

	}
	public function getFBReportEmail(Request $request,$property_id, $start_time, $end_time) {

		$data = [];
		$data['report_type'] = 'Summary';
		$data['report_by'] = 'Summary';
		$data['filter'] = $request->get('filter', 'All');
		//$data['filter_value'] = $request->get('filter_value','');
	   	$data['property_id'] = $property_id;
	   	$data['property'] = Property::find($property_id);
	   	//$data['start_date'] = $start_time;
	   	//$data['end_date'] = $end_time;

		$date_range = sprintf("DATE(gr.created_at) >= '%s' AND DATE(gr.created_at) <= '%s'", $start_time, $end_time);

		$query =DB::table('services_complaint_gr as gr')
				->leftJoin('common_guest as cg', 'gr.guest_id', '=', 'cg.guest_id')
				->leftJoin('common_room as cr', 'cg.room_id', '=', 'cr.id')
				->leftJoin('common_room as crn', 'gr.room_id', '=', 'crn.id')
				->leftJoin('common_guest_profile as gp', 'gr.guest_id', '=', 'gp.id')
				->leftJoin('common_property as cp', 'gr.property_id', '=', 'cp.id')
				->leftJoin('services_complaint_gr_occasion as gro', 'gr.occasion_id', '=', 'gro.id')
				->leftJoin('common_employee as ce', 'gr.requestor_id', '=', 'ce.id')
				->whereRaw($date_range);
		$data_query = clone $query;

		$data_list = $data_query
			->orderBy('created_at', 'desc')
			->select(DB::raw('DATE(gr.created_at), gr.id, cp.name as property_name, gr.category, gr.sub_category, cr.room, crn.room, CONCAT_WS(" ", gp.guest_name, cg.guest_name) as guest_name, cg.arrival,cg.departure, gr.comment, gro.occasion, gr.created_at, CONCAT_WS(" ", ce.fname, ce.lname) as wholename'))
			->get();


		$data['datalist'] = $data_list;
		//$data['filter'] = $filter;
		//$data['start_date'] = date('h:i A', strtotime($start_time));
	    //$data['end_date'] = date('h:i A', strtotime($end_time));
		$data['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$data['title'] = $data['report_type'] . ' Guest Relations Log Report ' . ' ';
		$data['property'] = Property::find($property_id);
		return $data;
	}

	public function getITReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'IT');
		$report['filter'] = $request->get('filter', 'All');

		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);
		$report['property_id'] = $request->get('property_id', '4');


		$report['category_ids'] = $request->get('category_ids', []);
        $report['sub_cat_ids'] = $request->get('sub_cat_ids', []);
        $report['dept_ids'] = $request->get('dept_ids', []);
        $report['type_ids'] = $request->get('type_ids', []);
        $report['user_ids'] = $request->get('user_ids', []);
		$report['building_ids'] = $request->get('building_ids', []);
		$report['status_ids'] = $request->get('status_ids', []);

		return $this->makeITReportData($report);

	}

	public function makeITReportData($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$filter = $report['filter'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$property_id=$report['property_id'];


		$ret = [];

		if($report_by == 'IT')
			$this->getITReportBy($report, $ret);



		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['filter'] = $filter;


		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		$ret['property'] = Property::find($property_id);
		return $ret;
	}

	public function getITReportBy($report, &$ret) {

		$filter = $report['filter'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];


		$category_ids = $report['category_ids'] ;
        $sub_cat_ids = $report['sub_cat_ids'] ;
        $dept_ids = $report['dept_ids'];
        $type_ids = $report['type_ids'] ;
        $user_ids = $report['user_ids'] ;
		$building_ids = $report['building_ids'];
		$status_ids = $report['status_ids'];



		$query = DB::table('services_it_tasklog as sit')
		->join('services_it_requestor as cu', 'sit.requestor_id', '=', 'cu.id')
        ->join('common_job_role as jr', 'jr.id', '=', 'cu.job_role')
        ->join('common_department as cd', 'cu.department', '=', 'cd.id')
        ->join('services_it_severity as sis', 'sis.id', '=', 'sit.severity')
		->leftJoin('common_property as cp', 'sit.prop_id', '=', 'cp.id')
		->leftJoin('common_users as cu2', 'sit.updated_by', '=', 'cu2.id');


		 if( !empty($category_ids)){
		 	$category_list = explode(',', $category_ids);
			$query->whereIn('sit.category', $category_list);
		 }

		if( !empty($sub_cat_ids  )){
			$subcat_list = explode(',', $sub_cat_ids);
			$query->whereIn('sit.subcategory', $subcat_list);
		}

        if( !empty($dept_ids)){
			$dept_list = explode(',', $dept_ids);
			$query->whereIn('cd.id', $dept_list);
		}

        if( !empty($type_ids)){
			$type_list = explode(',', $type_ids);
			$query->whereIn('sit.type', $type_list);
		}

        if( !empty($building_ids)){
			$building_list = explode(',', $building_ids);
			$query->whereIn('sit.building_id', $building_list);
		}

		if( !empty($user_ids)){
			$user_list = explode(',', $user_ids);
			$query->whereIn('sit.requestor_id', $user_list);
		}

		if( !empty($status_ids)){
			$status_list = explode(',', $status_ids);
			$query->whereIn('sit.status', $status_list);
		}

        //$query->whereRaw(sprintf("DATE(el.maintenance_date) >= '%s' and DATE(el.maintenance_date) <= '%s'", $start_date, $end_date));
		//$query->where('sit.prop_id',$property_id);
		/*
        if( $filter != 'Total' )
		{
			if( $filter == 1 )	// On Route
				$query->where('sit.status', C_PENDINGG);
			if( $filter == 2 )
					$query->where('sit.status', C_INPROGG);
			if( $filter == 3 )
					$query->where('sit.status', C_RESOLVEDD);
			if( $filter == 4 )
					$query->where('sit.status', C_REOPENN);
			if( $filter == 5 )
					$query->where('sit.status', C_CLOSEDD);
			if( $filter == 6 )
					$query->where('sit.status', C_REJECTEDD);
			if( $filter == 7 )
					$query->where('sit.status', C_AWAITT);
			if( $filter == 8 )
					$query->where('sit.status', C_AWAITT2);
			if( $filter == 9 )
					$query->where('sit.status', C_AWAITT3);
			}
			*/
			$query->whereRaw(sprintf("DATE(sit.created_at) >= '%s' and DATE(sit.created_at) <= '%s'", $start_time, $end_time));


			  $data_query = clone $query;
        $it_list = $data_query
            ->select(DB::raw('DATE(sit.created_at), sit.id, cp.name as prop_name, sit.status, sis.severity as sev, sit.category, sit.subcategory,sit.subject,sit.issue,sit.created_at, CONCAT_WS(" ", cu.firstname, cu.lastname) as req_wholename, jr.job_role, cd.department, CONCAT_WS(" ", cu2.first_name, cu2.last_name) as up_wholename, sit.resolution,sit.resolved_duration, sit.reject'))
            ->get();

        	$ret['it_list'] = $it_list;
			//$ret['complaint_summary'] = $complaint_list_summary;
			//$ret['summary_header'] = $summary_header;
	}
	public function getENGReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'IT');
		$report['filter'] = $request->get('filter', 'All');

		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);
		$report['property_id'] = $request->get('property_id', '4');

		return $this->makeENGReportData($report);

	}


	public function makeENGReportData($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$filter = $report['filter'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$property_id=$report['property_id'];


		$ret = [];

		if($report_by == 'ENG')
			$this->getENGReportBy($report, $ret);



		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['filter'] = $filter;


		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		$ret['property'] = Property::find($property_id);
		return $ret;
	}

	public function getENGReportBy($report, &$ret) {

		$filter = $report['filter'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

			 $query = DB::table('services_eng_tasklog as sit')
        ->join('common_users as cu', 'sit.requestor_id', '=', 'cu.id')
        ->join('common_job_role as jr', 'jr.id', '=', 'cu.job_role_id')
        ->join('common_department as cd', 'cu.dept_id', '=', 'cd.id')
        ->join('services_eng_severity as sis', 'sis.id', '=', 'sit.severity')
		->leftJoin('common_property as cp', 'sit.prop_id', '=', 'cp.id')
		->leftJoin('common_users as cu2', 'sit.updated_by', '=', 'cu2.id');




        //$query->whereRaw(sprintf("DATE(el.maintenance_date) >= '%s' and DATE(el.maintenance_date) <= '%s'", $start_date, $end_date));
        //$query->where('sit.prop_id',$property_id);
        if( $filter != 'Total' )
		{
			if( $filter == 1 )	// On Route
				$query->where('sit.status', C_PENDINGG);
			if( $filter == 2 )
					$query->where('sit.status', C_INPROGG);
			if( $filter == 3 )
					$query->where('sit.status', C_RESOLVEDD);
			if( $filter == 4 )
					$query->where('sit.status', C_REOPENN);
			if( $filter == 5 )
					$query->where('sit.status', C_CLOSEDD);
			if( $filter == 6 )
					$query->where('sit.status', C_REJECTEDD);
			if( $filter == 7 )
					$query->where('sit.status', C_AWAITT);
			}

			$query->whereRaw(sprintf("DATE(sit.created_at) >= '%s' and DATE(sit.created_at) <= '%s'", $start_time, $end_time));


			  $data_query = clone $query;
        $eng_list = $data_query
            ->select(DB::raw('DATE(sit.created_at), sit.id, cp.name as prop_name, sit.status, sis.severity as sev,sit.location, sit.category, sit.subcategory,sit.subject,sit.request,sit.created_at, CONCAT_WS(" ", cu.first_name, cu.last_name) as req_wholename, jr.job_role, cd.department, CONCAT_WS(" ", cu2.first_name, cu2.last_name) as up_wholename, sit.resolution, sit.resolved_duration, sit.reject'))
            ->get();

        	$ret['eng_list'] = $eng_list;
			//$ret['complaint_summary'] = $complaint_list_summary;
			//$ret['summary_header'] = $summary_header;
	}

	public function getFBReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Summary');
		$report['report_by'] = $request->get('report_by', 'Summary');
		$report['filter'] = $request->get('filter', 'All');
		$report['filter_value'] = $request->get('filter_value','');
		$report['start_date'] =$request->get('start_date', $cur_date . ' 00:00:00');
		$report['end_date'] =  $request->get('end_date', $cur_time);
		$report['property_id'] = $request->get('property_id', '');

		return $this->makeFBReportData($report);

	}

	public function makeFBReportData($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$filter = $report['filter'];
		$filter_value = $report['filter_value'];
		$start_time = $report['start_date'];
		$end_time = $report['end_date'];
		$property_id=$report['property_id'];


		$ret = [];

		if($report_by == 'Summary')
			$this->getFBReportBy($report, $ret);



		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['filter'] = $filter;
		//$ret['start_date'] = date('h:i A', strtotime($start_time));
	    //$ret['end_date'] = date('h:i A', strtotime($end_time));

		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Guest Relations Log Report ' . ' ';
		$ret['property'] = Property::find($property_id);
		return $ret;
	}

	public function getFBReportBy($report, &$ret) {

		$filter = $report['filter'];
		$filter_value = $report['filter_value'];
		$start_time = $report['start_date'];
		$end_time = $report['end_date'];



		$date_range = sprintf("DATE(gr.created_at) >= '%s' AND DATE(gr.created_at) <= '%s'", $start_time, $end_time);

		$query =DB::table('services_complaint_gr as gr')
				->leftJoin('common_guest as cg', 'gr.guest_id', '=', 'cg.guest_id')
				->leftJoin('common_room as cr', 'cg.room_id', '=', 'cr.id')
				->leftJoin('common_room as crn', 'gr.room_id', '=', 'crn.id')
				->leftJoin('common_guest_profile as gp', 'gr.guest_id', '=', 'gp.id')
				->leftJoin('common_property as cp', 'gr.property_id', '=', 'cp.id')
				->leftJoin('services_complaint_gr_occasion as gro', 'gr.occasion_id', '=', 'gro.id')
				->leftJoin('common_employee as ce', 'gr.requestor_id', '=', 'ce.id')
				->whereRaw($date_range);

		if( $filter != 'Total' && $filter != '')
		{
			if( $filter == 1 || $filter == F_INTERACTION)	// On Route
				$query->where('gr.category', F_INTERACTION);
			if( $filter == 2 || $filter == F_COURTESY)
					$query->where('gr.category',F_COURTESY);
			if( $filter == 3 || $filter == F_INSPECTION )
					$query->where('gr.category', F_INSPECTION);
			if( $filter == 4 || $filter == F_ATTENTION )
					$query->where('gr.category', F_ATTENTION);
			if( $filter == 5 || $filter == F_ESCORTED)
					$query->where('gr.category', F_ESCORTED);

			}

		if($filter_value != '')
			{
				$query->where(function ($query) use ($filter_value) {
						$value = '%' . $filter_value . '%';
						$query->where('gr.id', 'like', $value)
							->orWhere('cr.room', 'like', $value)
							->orWhere('cp.name', 'like', $value)
							->orWhere('ce.fname', 'like', $value)
							->orWhere('ce.lname', 'like', $value)
							->orWhere('gp.guest_name', 'like', $value)
							->orWhere('cg.guest_name', 'like', $value);
					});
			}

		$data_query = clone $query;
		/*
		if ('gr.category' == 'Room Inspection')
		{
		$data_list = $data_query
			 ->orderBy('created_at', 'desc')
			->select(DB::raw('DATE(gr.created_at), gr.id, cp.name as property_name, gr.category, crn.room, gp.guest_name, cg.arrival,cg.departure, gr.comment, gro.occasion,gr.created_at, CONCAT_WS(" ", ce.fname, ce.lname) as wholename'))
			->get();
		}
		else
		{*/

		//}

		$data_list = $data_query
			->orderBy('created_at', 'desc')
		   ->select(DB::raw('DATE(gr.created_at), gr.id, cp.name as property_name, gr.category, gr.sub_category, cr.room, crn.room,CONCAT_WS(" ", gp.guest_name, cg.guest_name) as guest_name, cg.arrival,cg.departure, gr.comment,gr.loc_id, gro.occasion,gr.created_at, CONCAT_WS(" ", ce.fname, ce.lname) as wholename'))
		   ->get();

		foreach($data_list as $key => $row) {
		$info = app('App\Http\Controllers\Frontend\GuestserviceController')->getLocationInfo($row->loc_id);
			$location = '';
				if(!empty($info)) {
					 $location =  $info->name.'-'.$info->type;
				}
				$occasion = $row->occasion;
				$created_at = $row->created_at;
				$wholename = $row->wholename;
				unset($row->loc_id);
				unset($row->occasion);
				unset($row->wholename);
				unset($row->created_at);
				$row->location = $location;
				$row->occasion = $occasion;
				$row->created_at = $created_at;
				$row->wholename = $wholename;


		}
/*
		$data_list = $data_query
			->orderBy('created_at', 'desc')
		   ->select(DB::raw('DATE(gr.created_at), gr.id, cp.name as property_name, gr.category, cr.room, crn.room,CONCAT_WS(" ", gp.guest_name, cg.guest_name) as guest_name, cg.arrival,cg.departure, gr.comment,gr.loc_id, gro.occasion,gr.created_at, CONCAT_WS(" ", ce.fname, ce.lname) as wholename'))
		   ->get();
*/


		$ret['datalist'] = $data_list;
	}

	private function getComplaintExcelInstance($property_id, $filename, $data, $param)
	{
		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}

		$logo_path = $property->logo_path;

		return Excel::create($filename, function($excel) use ($logo_path, $data, $param) {

			$excel->sheet('Complaint Report', function($sheet) use ($data, $logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputComplaintLogo($sheet,$logo_path);
				$this->outputComplaintDescription($sheet, $data);
				if($data['report_type'] == 'Frequency')
				{
					$row_num = 7;
					$row_num = $this->outputComplaintFrequencyReport($sheet, $row_num, $data);
				}
				else if($data['report_type'] == 'Category')
				{
					$row_num = 7;
					$row_num = $this->outputComplaintCategoryReport($sheet, $row_num, $data);
				}
				else {
					$row_num = 1;
					$row_num = $this->outputComplaintTitle($sheet, $data, $row_num);
				}

				if($data['report_type'] == 'Summary' && $data['report_by'] == 'Sub-complaint' && $data['group_by'] == 'Location'  ) {
					$row_num = $this->outputLocationSubcategorySummaryReport($sheet, $row_num, $data);
				}
				else if($data['report_type'] == 'Summary' && $data['report_by'] == 'Sub-complaint' && $data['group_by'] == 'Response Rate'  ) {
					$row_num = $this->outputLocationReponseRateSummaryReport($sheet, $row_num, $data);
				}
				else if($data['report_type'] == 'Summary' && $data['report_by'] == 'Complaint' && $data['group_by'] == 'Monthly'  ) {
					$row_num = $this->outputComplaintMonthlySummaryReport($sheet, $row_num, $data);
				}
				else if($data['report_by'] == 'Complaint') {
					if( $data['report_type'] == 'Detailed' )
						$row_num = $this->outputComplaintDetailReport($sheet, $row_num, $data);
					if( $data['report_type'] == 'Summary' )
						$row_num = $this->outputComplaintSummaryReport($sheet, $row_num, $data);
					if( $data['report_type'] == 'Detailed' && $data['group_by'] == 'Category' )
						$row_num = $this->outputComplaintSummaryReport($sheet, $row_num, $data);
				}
				else if($data['report_by'] == 'Sub-complaint' ) {
					if( $data['report_type'] == 'Detailed' )
						$row_num = $this->outputSubComplaintDetailReport($sheet, $row_num, $data);
					if( $data['report_type'] == 'Summary' )
						$row_num = $this->outputComplaintSummaryReport($sheet, $row_num, $data);
					if( $data['report_type'] == 'Detailed' && $data['group_by'] == 'Category' )
						$row_num = $this->outputComplaintSummaryReport($sheet, $row_num, $data);
				}
				else if( $data['report_by'] == 'Compensation' )
				{
					if( $data['report_type'] == 'Detailed' )
						$row_num = $this->outputCompensationDetailReport($sheet, $row_num, $data);
					if( $data['report_type'] == 'Summary' )
						$row_num = $this->outputCompensationSummaryReport($sheet, $row_num, $data);
				}
				else if( $data['report_by'] == 'Periodical')
				{
					$row_num = $this->outputComplaintDailySummaryReport($sheet, $row_num, $data);
				}
				else if( $data['report_by'] == 'Consolidated' )
				{
					if( $data['excel_type'] == 'csv' )
					{
						$row_num = $this->outputComplaintConsolidatedReportCSV($sheet, $row_num, $data);
					}
					else
					{
						$row_num = $this->outputComplaintConsolidatedReportExcel($sheet, $row_num, $data);
					}
				}
			});

			$this->sendNotifyDownloadCompleted($param);

		});
	}
	public function downloadComplaintreportExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getComplaintreportReportData($request);
		$property_id = $request->get('property_id',4);

		$filename = 'Complaint_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		$param = $request->all();

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');
		$data['excel_type'] = $excel_file_type;

		$excel_instance = $this->getComplaintExcelInstance($property_id, $filename, $data, $param);
		$excel_instance->export($excel_file_type);
	}

	public function getComplaintreportReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'Complaint');
		$report['group_by'] = $request->get('group_by', 'Date');
		$report['report_date'] = $request->get('report_date', $cur_date);

		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);

		$report['status_tag'] = $request->get('status_tags','[]');
		$report['status_tags'] = json_decode($report['status_tag']);

		$report['sub_status_tag'] = $request->get('sub_status_tags','[]');
		$report['sub_status_tags'] = json_decode($report['sub_status_tag']);

		$report['guest_type_tag'] = $request->get('guest_type_tags','[]');
		$report['guest_type_tags'] = json_decode($report['guest_type_tag']);

		$report['property_tag'] = $request->get('property_tags','[]');
		$report['property_tags'] = json_decode($report['property_tag']);

		$report['building_tag'] = $request->get('building_tags','[]');
		$report['building_tags'] = json_decode($report['building_tag']);

		$report['location_tag'] = $request->get('location_tags','[]');
		$report['location_tags'] = json_decode($report['location_tag']);

		$report['location_type_tag'] = $request->get('location_type_tags','[]');
		$report['location_type_tags'] = json_decode($report['location_type_tag']);

		$report['feedback_type_tag'] = $request->get('feedback_type_tags','[]');
		$report['feedback_type_tags'] = json_decode($report['feedback_type_tag']);

		$report['feedback_source_tag'] = $request->get('feedback_source_tags','[]');
		$report['feedback_source_tags'] = json_decode($report['feedback_source_tag']);

		$report['department_tag'] = $request->get('department_tags','[]');
		$report['department_tags'] = json_decode($report['department_tag']);

		$report['serverity_tag'] = $request->get('serverity_tags','[]');
		$report['serverity_tags'] = json_decode($report['serverity_tag']);

		$report['main_category_tag'] = $request->get('main_category_tags','[]');
		$report['main_category_tags'] = json_decode($report['main_category_tag']);

		$report['category_tag'] = $request->get('category_tags','[]');
		$report['category_tags'] = json_decode($report['category_tag']);

		$report['sub_category_tag'] = $request->get('sub_category_tags','[]');
		$report['sub_category_tags'] = json_decode($report['sub_category_tag']);

		$report['guest_name_tag'] = $request->get('guest_name_tags','[]');
		$report['guest_name_tags'] = json_decode($report['guest_name_tag']);

		$report['guest_id_tag'] = $request->get('guest_id_tags','[]');
		$report['guest_id_tags'] = json_decode($report['guest_id_tag']);

		$report['guest_email_tag'] = $request->get('guest_email_tags','[]');
		$report['guest_email_tags'] = json_decode($report['guest_email_tag']);

		$report['guest_mobile_tag'] = $request->get('guest_mobile_tags','[]');
		$report['guest_mobile_tags'] = json_decode($report['guest_mobile_tag']);

		$report['orderby'] = $request->get('field', 'created_at');
		$report['sort'] = $request->get('sort', 'asc');
		$report['property_id'] = $request->get('property_id', '4');

		$report['excel_type'] = $request->get('excel_type', 'excel');

		return $this->makeComplaintreportReportData($report);

	}

	public function makeComplaintreportReportData($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$group_by = $report['group_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$sub_status_tag = $report['sub_status_tag'];
		$sub_status_tags = $report['sub_status_tags'];

		$guest_type_tag = $report['guest_type_tag'];
		$guest_type_tags = $report['guest_type_tags'];

		$property_tag = $report['property_tag'];
		$property_tags = $report['property_tags'];

		$building_tag = $report['building_tag'];
		$building_tags = $report['building_tags'];

		$feedback_type_tag = $report['feedback_type_tag'];
		$feedback_type_tags = $report['feedback_type_tags'];

		$feedback_source_tag = $report['feedback_source_tag'];
		$feedback_source_tags = $report['feedback_source_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];

		$location_type_tag = $report['location_type_tag'];
		$location_type_tags = $report['location_type_tags'];

		$department_tag = $report['department_tag'];
		$department_tags = $report['department_tags'];

		$serverity_tag = $report['serverity_tag'];
		$serverity_tags = $report['serverity_tags'];

		$main_category_tag = $report['main_category_tag'];
		$main_category_tags = $report['main_category_tags'];

		$category_tag = $report['category_tag'];
		$category_tags = $report['category_tags'];

		$sub_categoty_tag = $report['sub_category_tag'];
		$sub_category_tags = $report['sub_category_tags'];

		$guest_name_tag = $report['guest_name_tag'];
		$guest_name_tags = $report['guest_name_tags'];

		$guest_id_tag = $report['guest_id_tag'];
		$guest_id_tags = $report['guest_id_tags'];

		$guest_email_tag = $report['guest_email_tag'];
		$guest_email_tags = $report['guest_email_tags'];

		$guest_mobile_tag = $report['guest_mobile_tag'];
		$guest_mobile_tags = $report['guest_mobile_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];

		$ret = [];

		if( $report_by == 'Consolidated' )
		{
			app('App\Http\Controllers\Frontend\ComplaintController')->getComplaintConsolidated($report, $ret);
			$ret['title'] = $report_type . ' Report by ' . $report_by;
		}
		else if( $report_by == 'Periodical' )
		{
			$this->getComplaintDailySummaryData($report, $ret);

			// ignore period parameter
			$start_time = $ret['start_time'];
			$end_time = $ret['end_time'];
		}
		else if( $report_by == 'Compensation' && $report_type == 'Summary' )
		{
			$this->getCompensationSummaryData($report, $ret);
		}
		else if( $report_by == 'Sub-complaint' && $report_type == 'Summary' && $group_by == 'Location' )
		{
			$this->getLocationSubcategorySummaryData($report, $ret);
		}
		else if( $report_by == 'Sub-complaint' && $report_type == 'Summary' && $group_by == 'Response Rate' )
		{
			$this->getLocationResponseRateSummaryData($report, $ret);
		}
		else if( $report_by == 'Complaint' && $report_type == 'Summary' && $group_by == 'Monthly' )
		{
			$this->getComplaintMonthlySummaryData($report, $ret);
		}
		else
		{
			$this->getComplaintReportBy($report, $ret);
			$ret['title'] = $report_type . ' Report by ' . $report_by . ' Grouped by ' . $group_by;
		}

		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['group_by'] = $group_by;
		if(empty($property_tags)) {
			$property_data = DB::table('common_property as cp')
				->first();
			$property_id = $property_data->id;
		}else {
			$property_data = DB::table('common_property as cp')
				->whereIn('cp.name', $property_tags)
				->first();
			$property_id = $property_data->id;
		}

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$ret['currency'] = $currency->value;

		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");

		$ret['property'] = Property::find($property_id);
		$ret['status_tags'] = $status_tags;
		$ret['guest_type_tags'] = $guest_type_tags;
		$ret['property_tags'] = $property_tags;
		$ret['building_tags'] = $building_tags;
		$ret['feedback_type_tags'] = $feedback_type_tags;
		$ret['feedback_source_tags'] = $feedback_source_tags;
		$ret['location_tags'] = $location_tags;
		$ret['department_tags'] = $department_tags;
		$ret['serverity_tags'] = $serverity_tags;
		$ret['main_category_tags'] = $main_category_tags;
		$ret['category_tags'] = $category_tags;
		$ret['sub_category_tags'] = $sub_category_tags;

		// get department name list
		$dept_list = DB::table('common_department as cd')
			->whereIn('cd.id', $department_tags)
			->get();

		$ret['dept_list'] = implode(',', array_map(function($row) {
			return $row->department;
		}, $dept_list));

		// locations
		$location_list = [];
		if( count($location_tags) > 0 )
			$location_list = DB::table('services_location')->whereIn('id', $location_tags)->get();

		$ret['location_list'] = $location_list;

		return $ret;
	}

	public function getComplaintDailySummaryData($report, &$ret)
	{
		date_default_timezone_set(config('app.timezone'));
		/*
		if( $report['report_by'] == 'Daily' )
		{
			$start_time = date('Y-m-d 00:00:00', strtotime($report['report_date']));
			$end_time = date('Y-m-d 23:59:59', strtotime($report['report_date']));
		}
		else
		{
			$start_time = date('Y-m-01 00:00:00', strtotime($report['report_date']));
			$end_time = date('Y-m-t 23:59:59', strtotime($report['report_date']));
		}
*/

		$ret['start_time'] = $report['start_time'];
		$ret['end_time'] = $report['end_time'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
	//	$ret['start_time'] = $start_time;
	//	$ret['end_time'] = $end_time;
	//	$ret['report_date'] = $report['report_date'];

		$location_tags = $report['location_tags'];
		$location_type_tags = $report['location_type_tags'];
		$department_tags = $report['department_tags'];

		$query = DB::table('services_complaint_sublist as scs')
			->join('services_complaint_request as sc', 'scs.parent_id', '=', 'sc.id')
			->leftJoin('services_location as sl', 'scs.location_id', '=', 'sl.id')
			->where('sc.delete_flag', 0)
			->where('scs.delete_flag', 0)
			->whereBetween('scs.created_at', array($start_time, $end_time));

		$query1 = DB::table('services_complaint_sublist as scs')
			->join('services_complaint_request as sc', 'scs.parent_id', '=', 'sc.id')
			->leftJoin('services_location as sl', 'scs.location_id', '=', 'sl.id')
			->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
			->leftJoin('common_department as cd', 'scs.dept_id', '=', 'cd.id')
			->where('sc.delete_flag', 0)
			->where('scs.delete_flag', 0)
			->whereBetween('scs.created_at', array($start_time, $end_time));

		if(count($location_tags) > 0 ){
			$query->whereIn('scs.location_id', $location_tags);
			$query1->whereIn('scs.location_id', $location_tags);
		}
		if(count($location_type_tags) > 0 ){
			$query->whereIn('sl.type_id', $location_type_tags);
			$query1->whereIn('sl.type_id', $location_type_tags);
		}
		if(count($department_tags) >0){
			$query->whereIn('scs.dept_id', $department_tags);
			$query1->whereIn('scs.dept_id', $department_tags);
		}

		// Division - Department
		$dept_query = DB::table('common_department as cd');
		if(count($department_tags) > 0)
			$dept_query->whereIn('cd.id', $department_tags);

		$ret['dept_list'] = implode(',', array_map(function($row) {
			return $row->department;
		}, $dept_query->select(DB::raw('cd.*'))->get()));

		// Area - Location
		$location_query = DB::table('services_location as sl')
						->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id');
		if(count($location_tags) > 0)
			$location_query->whereIn('sl.id', $location_tags);

		if(count($location_type_tags) > 0 )
			$location_query->whereIn('sl.type_id', $location_type_tags);

		$ret['loc_list'] = $location_query->select(DB::raw('sl.*'))->get();

		$location_type_query =  DB::table('services_location_type as slt');
		if(count($location_type_tags) > 0 )
			$location_type_query->whereIn('slt.id', $location_type_tags);
		else if( count($department_tags) )
		{
			// loc_type_list
			$location_type_query = DB::table('services_location_type as slt')
				->join('services_complaint_dept_location_type_pivot as a', 'a.loc_type_id', '=', 'slt.id')
				->whereIn('a.dept_id', $department_tags)
				->groupBy('slt.id');
		}
		else
		{
			$location_type_query = clone $query;
			$location_type_query
				->join('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
				->groupBy('sl.type_id');
		}

		$ret['loc_type_list'] = implode(',', array_map(function($row) {
			return $row->type;
		}, $location_type_query->select(DB::raw('slt.*'))->get()));

		$ret['loc_name_list'] = implode(',', array_map(function($row) {
			return $row->name;
		}, $location_query->select(DB::raw('sl.*'))->get()));


		$dept_wise = clone $query1;
			$dep_wise = $dept_wise
					->groupBy('slt.type')
					->orderBy('cd.department')
					->select(DB::raw('slt.type, cd.department, COALESCE(SUM(scs.status != 2 AND scs.status != 3), 0) as open,
					COALESCE(SUM(scs.status != 3), 0) as total, COALESCE(SUM(scs.status = 2), 0) as closed'))->get();


		// total sub complaints
		$total_subcomplaint_query = clone $query;
		$ret['total_subcomplaint_count'] = $total_subcomplaint_query->count();

		// open sub complaints
		$open_subcomplaint_query = clone $query;
		$open_subcomplaint_query->whereIn('scs.status', array(1, 4, 5, 6));
		$ret['open_subcomplaint_count'] = $open_subcomplaint_query->count();

		// open sub complaints
		$closed_subcomplaint_query = clone $query;
		$closed_subcomplaint_query->where('scs.status', 2);
		$ret['closed_subcomplaint_count'] = $closed_subcomplaint_query->count();

		// open/closed sub complaint percent
		if( $ret['total_subcomplaint_count'] > 0 )
		{
			$ret['open_subcomplaint_percent'] = round($ret['open_subcomplaint_count'] * 100 / $ret['total_subcomplaint_count'], 1);
			$ret['closed_subcomplaint_percent'] = round($ret['closed_subcomplaint_count'] * 100 / $ret['total_subcomplaint_count'], 1);
		}
		else
		{
			$ret['open_subcomplaint_percent'] = 0;
			$ret['closed_subcomplaint_percent'] = 0;
		}

		// Report Date
	/*	if( $report['report_by'] == 'Daily' )
			$ret['report_time']	= '00:00 - 23:59';
		else
		{
			$start_date = date('01-M-Y', strtotime($report['report_date']));
			$end_date = date('t-M-Y', strtotime($report['report_date']));
			$ret['report_time']	= "$start_date - $end_date";
		}
*/
		$ret['report_time']	="$start_time - $end_time";

		// Occupancy
		$property_data = DB::table('common_property as cp')
			->first();

		$property_id = $property_data->id;

		$total_room = DB::table('common_room as cr')
			->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
			->where('cb.property_id', $property_id)
			->count();

		$end_date = date("Y-m-d");
		$occupancy = DB::table('common_room_occupancy')
							->where('property_id', $property_id)
							->where('check_date', '<', $end_date)
							->orderBy('check_date', 'desc')
							->first();

		$occupancy_percent = 0;
		if( !empty($occupancy) > 0 )
			$occupancy_percent = round($occupancy->occupancy * 100 / $total_room, 1);
		$ret['occupancy_percent'] = $occupancy_percent;

		// Total number of main complaint based on Department and Area selected.
		$total_maincomplaint_query = clone $query;
		$total_maincomplaint_data = $total_maincomplaint_query->select(DB::raw('COUNT(DISTINCT scs.parent_id) as cnt'))->first();
		$ret['total_maincomplaint_count'] = $total_maincomplaint_data->cnt;

		// total number of sub-complaints
		$total_subcomplaint_query = clone $query;
		$ret['total_subcomplaint_count'] = $total_subcomplaint_query->count();

		// total number of sub-complaints which Category is Overall Closure
		$temp_query = clone $query;
		$temp_query->join('services_complaint_category as scc', 'scs.category_id', '=', 'scc.id')
					->where('scc.name', '=', 'Overall Closure');

		$ret['total_subcomplaint_closure_count'] = $temp_query->count();
		$ret['total_subcomplaint_non_closure_count'] = $ret['total_subcomplaint_count'] - $ret['total_subcomplaint_closure_count'];


		// Total number of sub-complaints
		$total_subcomplaint_open_query = clone $query;
		$total_subcomplaint_open_query
					->whereIn('scs.status', array(1, 3, 4, 5, 6, 7));

		$ret['total_subcomplaint_open_count'] = $total_subcomplaint_open_query->count();

		// Total no. of open complaints (excluding "Overall Closure of Complaint")
		$temp_query = clone $query;
		$temp_query->whereIn('scs.status', array(1, 4, 5, 6));
		$ret['total_subcomplaint_non_closure_completed_count'] = $temp_query->count();

		// Total amount of compensation cost (AED)
		$comp_query = DB::table('services_complaint_sublist_compensation as scsc')
							->join('services_complaint_sublist as scs', 'scsc.sub_id', '=', 'scs.id')
							->leftJoin('services_location as sl', 'scs.location_id', '=', 'sl.id')
							->where('scs.delete_flag', 0)
							->whereBetween('scs.created_at', array($start_time, $end_time));

		if(count($location_tags) > 0 )
			$comp_query->whereIn('scs.location_id', $location_tags);

		if(count($location_type_tags) > 0 )
			$comp_query->whereIn('sl.type_id', $location_type_tags);

		if(count($department_tags) >0)
			$comp_query->whereIn('scs.dept_id', $department_tags);

		$temp_query = clone $comp_query;

		$comp_data = $temp_query
			->select(DB::raw('SUM(scsc.cost) as sub_total_cost, count(*) as total_count'))
			->first();

		if( empty($comp_data->sub_total_cost) )
		{
			$ret['total_subcomplaint_compensation_cost'] = 0;
			$ret['average_subcomplaint_compensation_cost'] = 0;
		}
		else
		{
			$ret['total_subcomplaint_compensation_cost'] = $comp_data->sub_total_cost;
			if( $ret['total_subcomplaint_count'] > 0 )
				$ret['average_subcomplaint_compensation_cost'] = round($comp_data->sub_total_cost / $ret['total_subcomplaint_count'], 2);
			else
				$ret['average_subcomplaint_compensation_cost'] = 0;
		}

		// main complaint compensation
		$temp_query = clone $comp_query;
		$main_complaint_comp_list = $temp_query
			->join('services_complaint_request as sc', 'scs.parent_id', '=', 'sc.id')
			->groupBy('scs.parent_id')
			->where('sc.delete_flag',0)
			->select(DB::raw('sc.compensation_total'))
			->get();

		$main_comp_total = 0;
		foreach($main_complaint_comp_list as $row)
		{
			$main_comp_total += $row->compensation_total;
		}

		$ret['total_subcomplaint_compensation_cost'] += $main_comp_total;


		// Average closure time per closed complaint
		$closed_query = clone $query;
		$closed_data = $closed_query->where('scs.status', 2)
			->select(DB::raw('SUM(TIME_TO_SEC(TIMEDIFF(scs.completed_at, scs.created_at))) as avg_days'))
			->get();

			$closed_count = $ret['total_subcomplaint_count'] - $ret['total_subcomplaint_open_count'];
		if( empty($closed_data->avg_days) )
		{
			$ret['closed_avg_days'] = 0;
		}
		else
		{
			$ret['closed_avg_days'] = $closed_data->avg_days / $closed_count;
		}

		// Total no. of Sub-Area (complaints) - Category
		$property_data = DB::table('common_property as cp')
				->first();
		$property_id = $property_data->id;

		// get category list for sub complaint
		$cat_list = DB::table('services_complaint_category as scc')->get();
		foreach($cat_list as $row)
		{
			$category_query = clone $query;
			$row->count = $category_query->where('scs.category_id', $row->id)->count();
		}
		$ret['sub_area_list'] = $cat_list;

		// get sub_category list for sub complaint
		$sub_cat_list = DB::table('services_complaint_subcategory as scc')->get();
		foreach($sub_cat_list as $row)
		{
			$category_query = clone $query;
			$row->count = $category_query->where('scs.subcategory_id', $row->id)->count();
		}
		$ret['attrib_list'] = $sub_cat_list;

		$ret['title'] = $report['report_by'] . " Summary Report";
		$ret['dept_wise'] = $dep_wise;
	}

	public function getCompensationSummaryData($report, &$ret)
	{
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$location_tags = $report['location_tags'];
		$location_type_tags = $report['location_type_tags'];
		$department_tags = $report['department_tags'];
		$guest_name_tags = $report['guest_name_tags'];
		$guest_id_tags = $report['guest_id_tags'];
		$guest_email_tags = $report['guest_email_tags'];
		$guest_mobile_tags = $report['guest_mobile_tags'];

		$query = DB::table('services_complaint_sublist_compensation as scsc')
						->join('services_complaint_sublist as scs', 'scsc.sub_id', '=', 'scs.id')
						->join('services_complaint_request as scr', 'scs.parent_id', '=', 'scr.id')
						->leftJoin('common_department as cd', 'scs.dept_id', '=', 'cd.id')
						->leftJoin('services_location as sl', 'scs.location_id', '=', 'sl.id')
						->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
						->leftJoin('common_guest_profile as gp', 'scr.guest_id', '=', 'gp.id')
		//				->leftJoin('common_guest as cg', 'gp.guest_id', '=', 'cg.guest_id')
						->leftJoin('common_guest as cg', function($join) {
							$join->on('gp.guest_id', '=', 'cg.guest_id');
							$join->on('scr.property_id', '=', 'cg.property_id');
						})
						->where('scs.delete_flag', 0)
						->where('scr.delete_flag', 0)
						->whereBetween('scs.created_at', array($start_time, $end_time));

		if( count($location_tags) > 0 )
			$query->whereIn('scs.location_id', $location_tags);

		if( count($location_type_tags) > 0 )
			$query->whereIn('sl.type_id', $location_type_tags);

		if( count($department_tags) > 0 )
			$query->whereIn('scs.dept_id', $department_tags);

		if(count($guest_name_tags) > 0 )
			$query->whereIn('cg.guest_name', $guest_name_tags);

		if(count($guest_id_tags) > 0 )
			$query->whereIn('cg.guest_id', $guest_id_tags);

		if(count($guest_email_tags) > 0 )
			$query->whereIn('cg.email', $guest_email_tags);

		if(count($guest_mobile_tags) > 0 )
			$query->whereIn('cg.mobile', $guest_mobile_tags);

		// department wise summary
		$temp_query = clone $query;

		$dept_comp_list = $temp_query
			->groupBy('scs.dept_id')
			->select(DB::raw('scs.dept_id, cd.department, 
						COALESCE(sum(scsc.cost), 0) as dept_cost'))
			->get();

		// get compensation total by location type per each department
		$total_cost = 0;
		foreach($dept_comp_list as $row)
		{
			$temp_query = clone $query;
			$loc_type_comp_list = $temp_query->where('scs.dept_id', $row->dept_id)
				->groupBy('sl.type_id')
				->select(DB::raw("COALESCE(slt.type, 'Unknown') as location_type,  
						COALESCE(sum(scsc.cost), 0) as loc_type_cost, count(*) as count"))
				->get();

			$row->loc_type_comp_list = $loc_type_comp_list;

			$total_cost += $row->dept_cost;
		}

		// main complaint compensation
		$query = DB::table('services_compensation_request as comp')
						->join('services_complaint_request as scr', 'comp.complaint_id', '=', 'scr.id')
						->leftJoin('common_guest_profile as gp', 'scr.guest_id', '=', 'gp.id')
						->leftJoin('common_guest as cg', function($join) {
							$join->on('gp.guest_id', '=', 'cg.guest_id');
							$join->on('scr.property_id', '=', 'cg.property_id');
						})
						->where('scr.delete_flag',0)
						->whereBetween('scr.created_at', array($start_time, $end_time));

		if(count($guest_name_tags) > 0 )
			$query->whereIn('cg.guest_name', $guest_name_tags);

		if(count($guest_id_tags) > 0 )
			$query->whereIn('cg.guest_id', $guest_id_tags);

		if(count($guest_email_tags) > 0 )
			$query->whereIn('cg.email', $guest_email_tags);

		if(count($guest_mobile_tags) > 0 )
			$query->whereIn('cg.mobile', $guest_mobile_tags);

		$main_comp = $query
			->select(DB::raw('
						COALESCE(sum(comp.cost), 0) as dept_cost'))
			->first();
		$main_comp->department = 'Main Complaint';
		$main_comp->loc_type_comp_list = [];

        $dept_comp_list[] = $main_comp;

		$total_cost += $main_comp->dept_cost;

		$ret['dept_comp_list'] = $dept_comp_list;
		$ret['dept_total_cost'] = $total_cost;

		$ret['title'] = $report['report_by'] . " Summary Report";
	}

	public function getLocationSubcategorySummaryData($report, &$ret)
	{
		$group_by = $report['group_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$department_tags = $report['department_tags'];
		$location_tags = $report['location_tags'];
		$location_type_tags = $report['location_type_tags'];
		$category_tags = $report['category_tags'];
		$sub_category_tags = $report['sub_category_tags'];

		$query = DB::table('services_complaint_sublist as scs')
						->join('services_complaint_request as scr', 'scs.parent_id', '=', 'scr.id')
						->leftJoin('common_department as cd', 'scs.dept_id', '=', 'cd.id')
						->leftJoin('services_location as sl', 'scs.location_id', '=', 'sl.id')
						->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
						->leftJoin('services_complaint_category as scc', 'scs.category_id', '=', 'scc.id')
						->leftJoin('services_complaint_subcategory as scsc', 'scs.subcategory_id', '=', 'scsc.id')
						->where('scs.delete_flag', 0)
						->where('scr.delete_flag',0)
						->whereBetween('scs.created_at', array($start_time, $end_time));

		if( count($location_tags) > 0 )
			$query->whereIn('scs.location_id', $location_tags);

		if( count($location_type_tags) > 0 )
			$query->whereIn('sl.type_id', $location_type_tags);

		if( count($department_tags) > 0 )
			$query->whereIn('scs.dept_id', $department_tags);

		if(count($category_tags) >0)
			$query->whereIn('scc.name', $category_tags);

		if(count($sub_category_tags) >0)
			$query->whereIn('scsc.name', $sub_category_tags);

		$temp_query = clone $query;

		// get department / location type
		$dept_list = $temp_query
							->groupBy('scs.dept_id')
							->select(DB::raw("scs.dept_id, cd.department"))
							->get();

		foreach($dept_list as $row)
		{
			$loc_type_list = DB::table('services_complaint_dept_location_type_pivot as a')
				->join('services_location_type as slt', 'a.loc_type_id', '=', 'slt.id')
				->where('a.dept_id', $row->dept_id)
				->select(DB::raw('slt.*'))
				->get();

			if( count($loc_type_list) < 1 )
			{
				$loc_type_list = DB::table('services_location_type as slt')
					->select(DB::raw('slt.*'))
					->get();
			}

			$row->loc_type_list = $loc_type_list;
			$row->loc_type_name_list = implode(",", array_map(function($item) {
				return $item->type;
			}, $row->loc_type_list));

			foreach($row->loc_type_list as $row1)
			{
				// calc count based on sub category
				$temp_query = clone $query;
				$row1->subcategory_count = $temp_query
							->where('scs.dept_id', $row->dept_id)
							->where('sl.type_id', $row1->id)
							->groupBy('scs.subcategory_id')
							->select(DB::raw("count(*) as cnt, COALESCE(scsc.name, 'X') as subcategory_name"))
							->get();

				// total count
				$total = 0;
				foreach($row1->subcategory_count as $row2)
					$total += $row2->cnt;

				$row1->subcategory_total_count = $total;

				// calculate percent
				foreach($row1->subcategory_count as $row2)
				{
					if( $total > 0 )
						$row2->percent = round($row2->cnt * 100 / $total, 2);
					else
						$row2->percent = 0;
				}

			}
		}

		$ret['dept_loctype_subcategory'] = $dept_list;


		$ret['title'] = $report['report_by'] . ' '. $report['group_by'] . " Report";;
	}

	public function getLocationResponseRateSummaryData($report, &$ret)
	{
		$group_by = $report['group_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$department_tags = $report['department_tags'];
		$location_tags = $report['location_tags'];
		$location_type_tags = $report['location_type_tags'];
		$category_tags = $report['category_tags'];
		$sub_category_tags = $report['sub_category_tags'];

		$query = DB::table('services_complaint_sublist as scs')
						->join('services_complaint_request as scr', 'scs.parent_id', '=', 'scr.id')
						->leftJoin('services_location as sl', 'scs.location_id', '=', 'sl.id')
						->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
						->leftJoin('services_complaint_category as scc', 'scs.category_id', '=', 'scc.id')
						->leftJoin('services_complaint_subcategory as scsc', 'scs.subcategory_id', '=', 'scsc.id')
						->leftJoin('services_complaint_type as sct', 'scs.severity', '=', 'sct.id')
						->where('scs.delete_flag', 0)
						->where('scr.delete_flag',0)
						->whereBetween('scs.created_at', array($start_time, $end_time));

		if( count($location_tags) > 0 )
			$query->whereIn('scs.location_id', $location_tags);

		if( count($location_type_tags) > 0 )
			$query->whereIn('sl.type_id', $location_type_tags);

		if( count($department_tags) > 0 )
			$query->whereIn('scs.dept_id', $department_tags);

		if(count($category_tags) >0)
			$query->whereIn('scc.name', $category_tags);

		if(count($sub_category_tags) >0)
			$query->whereIn('scsc.name', $sub_category_tags);

		$temp_query = clone $query;

		// get department / location type
		$list = $temp_query
							->groupBy('scs.location_id')
							->select(DB::raw("scs.location_id, sl.name as location_name, 
									COALESCE(SUM(scs.status = 1), 0) as open_cnt,
									COALESCE(SUM(scs.status = 7), 0) as reopen_cnt,
									COALESCE(SUM(scs.status = 2), 0) as closed_cnt,
									COALESCE(SUM(scs.status = 2 AND sct.type = 'Major'), 0) as major_total_cnt,
									COALESCE(SUM(scs.status = 2 AND sct.type = 'Major' 
										AND TIME_TO_SEC(TIMEDIFF(scs.completed_at, scs.created_at )) <= 86400), 0) as major_one_day_cnt,
									COALESCE(SUM(scs.status = 2 AND sct.type = 'Minor'), 0) as minor_total_cnt,
									COALESCE(SUM(scs.status = 2 AND sct.type = 'Minor' 
										AND DATEDIFF(scs.completed_at, scs.created_at ) <= 7), 0) as minor_seven_day_cnt,
									COALESCE(SUM(scs.status = 2 
										AND TIME_TO_SEC(TIMEDIFF(scs.completed_at, scs.created_at )) <= 86400), 0) as closed_one_day_cnt,	
									COALESCE(SUM(scs.status = 2 
										AND DATEDIFF(scs.completed_at, scs.created_at ) <= 7), 0) as closed_seven_day_cnt
									"))
							->get();

		// calculate percent
		foreach($list as $row)
		{
			if( $row->major_total_cnt > 0 )
				$row->major_one_day_percent = round($row->major_one_day_cnt * 100 / $row->major_total_cnt, 2);
			else
				$row->major_one_day_percent = 0;

			if( $row->minor_total_cnt > 0 )
				$row->minor_seven_day_percent = round($row->minor_seven_day_cnt * 100 / $row->minor_total_cnt, 2);
			else
				$row->minor_seven_day_percent = 0;

			if( $row->closed_cnt > 0 )
			{
				$row->closed_one_day_percent = round($row->closed_one_day_cnt * 100 / $row->closed_cnt, 2);
				$row->closed_seven_day_percent = round($row->closed_seven_day_cnt * 100 / $row->closed_cnt, 2);
			}
			else
			{
				$row->closed_one_day_percent = 0;
				$row->closed_seven_day_percent = 0;
			}
		}

		$ret['response_rate_data'] = $list;

		$ret['title'] =  $report['report_type'] . " Report by " . $report['group_by'];;
	}

	public function getComplaintMonthlySummaryData($report, &$ret)
	{
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$status_tags = $report['status_tags'];
		$guest_type_tags = $report['guest_type_tags'];
		$property_tags = $report['property_tags'];
		$building_tags = $report['building_tags'];
		$feedback_type_tags = $report['feedback_type_tags'];
		$feedback_source_tags = $report['feedback_source_tags'];
		$location_tags = $report['location_tags'];
		$location_type_tags = $report['location_type_tags'];
		$serverity_tags = $report['serverity_tags'];
		$main_category_tags = $report['main_category_tags'];
		$department_tags = $report['department_tags'];
		$category_tags = $report['category_tags'];
		$sub_category_tags = $report['sub_category_tags'];
		$guest_name_tags = $report['guest_name_tags'];
		$guest_id_tags = $report['guest_id_tags'];
		$guest_email_tags = $report['guest_email_tags'];
		$guest_mobile_tags = $report['guest_mobile_tags'];
		$null = 0;
		$orderby = $report['orderby'];
		$sort = $report['sort'];

		$comp_query = DB::table('services_compensation_request as comp')
							->join('services_complaint_request as sc', 'comp.complaint_id', '=', 'sc.id')
							->where('sc.delete_flag',0);

		$query = DB::table('services_complaint_request as sc')->where('sc.delete_flag',0);

		$query_list = [$query, $comp_query];

		foreach($query_list as $sub_query)
		{
			$sub_query->leftJoin('common_property as cp', 'sc.property_id', '=', 'cp.id')
				->leftJoin('common_room as cr', 'sc.room_id', '=', 'cr.id')
				->leftJoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->leftJoin('common_employee as ce', 'sc.requestor_id', '=', 'ce.id')
				->leftJoin('common_users as cu', 'ce.user_id', '=', 'cu.id')
				->leftJoin('common_job_role as jr', 'cu.job_role_id', '=', 'jr.id')
				->leftJoin('common_guest_profile as gp', 'sc.guest_id', '=', 'gp.id')
				->leftJoin('common_country as cc', 'gp.nationality', '=', 'cc.id')
	//				->leftJoin('common_guest as cg', 'gp.guest_id', '=', 'cg.guest_id')
				->leftJoin('common_guest as cg', function($join) {
					$join->on('gp.guest_id', '=', 'cg.guest_id');
					$join->on('sc.property_id', '=', 'cg.property_id');
				})
				->leftJoin('services_complaint_type as ct', 'sc.severity', '=', 'ct.id')
				->leftJoin('services_complaint_maincategory as sm', 'sc.category_id', '=', 'sm.id')
				->leftJoin('services_complaint_feedback_type as scft', 'sc.feedback_type_id', '=', 'scft.id')
				->leftJoin('services_complaint_feedback_source as scfs', 'sc.feedback_source_id', '=', 'scfs.id')
				->leftJoin('services_location as sl', 'sc.loc_id', '=', 'sl.id')
				->where('sc.delete_flag', 0)
				->whereBetween('sc.created_at', array($start_time, $end_time));

			$ret['title'] = $report['report_by'] . " Monthly Summary Report";

			if(count($property_tags) > 0 )
				$query->whereIn('cp.name', $property_tags);

			if(count($building_tags) > 0 )
				$query->whereIn('cb.name', $building_tags);

			if(count($feedback_type_tags) > 0 )
				$query->whereIn('scft.name', $feedback_type_tags);

			if(count($feedback_source_tags) > 0 )
				$query->whereIn('scfs.name', $feedback_source_tags);

			if(count($location_tags) > 0 && $report['report_by'] != 'Sub-complaint' )
				$query->whereIn('sc.loc_id', $location_tags);

			if(count($location_type_tags) > 0 && $report['report_by'] != 'Sub-complaint' )
				$query->whereIn('sl.type_id', $location_type_tags);

			if(count($serverity_tags) > 0 )
				$query->whereIn('ct.type', $serverity_tags);

			if(count($main_category_tags) > 0 )
				$query->whereIn('sm.name', $main_category_tags);

			if(count($guest_name_tags) > 0 )
				$query->whereIn('cg.guest_name', $guest_name_tags);

			if(count($guest_id_tags) > 0 )
				$query->whereIn('cg.guest_id', $guest_id_tags);

			if(count($guest_email_tags) > 0 )
				$query->whereIn('cg.email', $guest_email_tags);

			if(count($guest_mobile_tags) > 0 )
				$query->whereIn('cg.mobile', $guest_mobile_tags);
		}

		$temp_query = $query;

		$ret['monthly_data_list'] = $temp_query
			->groupBy('year_month1')
			->orderBy('sc.created_at')
			->select(DB::raw("DATE_FORMAT(sc.created_at, '%Y-%b') as year_month1,
				count(*) as total_cnt,
				COALESCE(SUM(sc.guest_type = 'In-House'), 0) as inhouse_cnt,
				COALESCE(SUM(sc.guest_type = 'Walk-in'), 0) as walkin_cnt,
				COALESCE(SUM(sc.guest_type = 'Checkout'), 0) as checkout_cnt,
				COALESCE(SUM(sc.guest_type = 'In-House' AND sc.closed_flag = 1), 0) as inhouse_closed_cnt,
				COALESCE(SUM(sc.guest_type = 'Walk-in' AND sc.closed_flag = 1), 0) as walkin_closed_cnt,
				COALESCE(SUM(sc.guest_type = 'Checkout' AND sc.closed_flag = 1), 0) as checkout_closed_cnt,
				COALESCE(SUM(sc.guest_type = 'House Complaint' AND sc.closed_flag = 1), 0) as housecomplaint_closed_cnt,
				COALESCE(SUM(sc.guest_type = 'Arrival' AND sc.closed_flag = 1), 0) as arrival_closed_cnt,

				COALESCE(SUM(sc.guest_type = 'In-House' AND sc.closed_flag = 1
					AND TIME_TO_SEC(TIMEDIFF(sc.closed_time, sc.created_at )) <= 86400), 0) as inhouse_within_closed_cnt,
				COALESCE(SUM(sc.guest_type = 'Walk-in' AND sc.closed_flag = 1
					AND TIME_TO_SEC(TIMEDIFF(sc.closed_time, sc.created_at )) <= 86400), 0) as walkin_within_closed_cnt,	
				COALESCE(SUM(sc.guest_type = 'Checkout' AND sc.closed_flag = 1
					AND TIME_TO_SEC(TIMEDIFF(sc.closed_time, sc.created_at )) <= 86400), 0) as checkout_within_closed_cnt,		
				COALESCE(SUM(sc.guest_type = 'House Complaint' AND sc.closed_flag = 1
					AND TIME_TO_SEC(TIMEDIFF(sc.closed_time, sc.created_at )) <= 86400), 0) as housecomplaint_within_closed_cnt,
				COALESCE(SUM(sc.guest_type = 'Arrival' AND sc.closed_flag = 1
					AND TIME_TO_SEC(TIMEDIFF(sc.closed_time, sc.created_at )) <= 86400), 0) as arrival_within_closed_cnt,	
				COALESCE(SUM(sc.closed_flag = 1
					AND TIME_TO_SEC(TIMEDIFF(sc.closed_time, sc.created_at )) <= 86400), 0) as total_within_closed_cnt,						

				COALESCE(SUM(sc.closed_flag != 1), 0) as open_cnt,
				COALESCE(SUM(sc.closed_flag = 1), 0) as total_closed_cnt,
				COALESCE(SUM(TIME_TO_SEC(TIMEDIFF(sc.closed_time, sc.created_at )) * (sc.closed_flag = 1)), 0) as closed_total_time
			"))
			->get();

		$key_list = ['inhouse', 'walkin', 'checkout', 'housecomplaint', 'arrival', 'total'];

		foreach($ret['monthly_data_list'] as $row)
		{
			$temp_query = $comp_query;

			$comp_data = $temp_query
				->whereRaw("DATE_FORMAT(sc.created_at, '%Y-%b') = '$row->year_month1'")
				->select(DB::raw("
					COALESCE(SUM(comp.cost), 0) as total_cost
				"))
				->first();

			$row->avg_comp = 0;
			$row->avg_inhouse_percent = 0;
			$row->avg_visitor_percent = 0;
			if( $row->total_cnt > 0 )
			{
				$row->avg_comp = round($comp_data->total_cost / $row->total_cnt, 2);
				$row->avg_inhouse_percent = round($row->inhouse_cnt * 100 / $row->total_cnt, 2);
				$row->avg_walkin_percent = round($row->walkin_cnt * 100 / $row->total_cnt, 2);
			}

			$row->total_cost = $comp_data->total_cost;

			$row->avg_closure_time = '00:00:00';
			if( $row->total_closed_cnt > 0)
			{
				$days = round($row->closed_total_time / $row->total_closed_cnt / 3600 / 24, 0);
				if( $days == 0 )
					$days = '';
				$row->avg_closure_time = $days . ' ' . date('H:i:s', strtotime(($row->closed_total_time / $row->total_closed_cnt) . " seconds", strtotime('2010-01-01')));
			}

			// in-house
			foreach($key_list as $row1)
			{
				$closed_cnt_key = $row1 . "_closed_cnt";
				$within_closed_cnt_key = $row1 . "_within_closed_cnt";
				$above_closed_cnt_key = $row1 . "_above_closed_cnt";
				$within_closed_percent_key = $row1 . "_within_closed_percent";
				$above_closed_percent_key = $row1 . "_above_closed_percent";

				$row->$above_closed_cnt_key = $row->$closed_cnt_key - $row->$within_closed_cnt_key;
				$row->$within_closed_percent_key = 0;
				$row->$above_closed_percent_key = 0;
				if( $row->$closed_cnt_key > 0 )
				{
					$row->$within_closed_percent_key = round($row->$within_closed_cnt_key * 100 / $row->$closed_cnt_key, 2);
					$row->$above_closed_percent_key = round($row->$above_closed_cnt_key * 100 / $row->$closed_cnt_key, 2);
				}
			}
		}
	}


	public function getComplaintReportBy($report, &$ret) {

		$group_by = $report['group_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$status_tags = $report['status_tags'];
		$sub_status_tags = $report['sub_status_tags'];
		$guest_type_tags = $report['guest_type_tags'];
		$property_tags = $report['property_tags'];
		$building_tags = $report['building_tags'];
		$feedback_type_tags = $report['feedback_type_tags'];
		$feedback_source_tags = $report['feedback_source_tags'];
		$location_tags = $report['location_tags'];
		$location_type_tags = $report['location_type_tags'];
		$serverity_tags = $report['serverity_tags'];
		$main_category_tags = $report['main_category_tags'];
		$department_tags = $report['department_tags'];
		$category_tags = $report['category_tags'];
		$sub_category_tags = $report['sub_category_tags'];
		$guest_name_tags = $report['guest_name_tags'];
		$guest_id_tags = $report['guest_id_tags'];
		$guest_email_tags = $report['guest_email_tags'];
		$guest_mobile_tags = $report['guest_mobile_tags'];
		$null = 0;
		$orderby = $report['orderby'];
		$sort = $report['sort'];

		$query = DB::table('services_complaint_request as sc')
			->leftJoin('common_property as cp', 'sc.property_id', '=', 'cp.id')
			->leftJoin('common_room as cr', 'sc.room_id', '=', 'cr.id')
			->leftJoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
			->leftJoin('common_employee as ce', 'sc.requestor_id', '=', 'ce.id')
			->leftJoin('common_users as cu', 'ce.user_id', '=', 'cu.id')
			->leftJoin('common_job_role as jr', 'cu.job_role_id', '=', 'jr.id')
			->leftJoin('common_guest_profile as gp', 'sc.guest_id', '=', 'gp.id')
			->leftJoin('common_country as cc', 'gp.nationality', '=', 'cc.id')
//				->leftJoin('common_guest as cg', 'gp.guest_id', '=', 'cg.guest_id')
			->leftJoin('common_guest as cg', function($join) {
				$join->on('gp.guest_id', '=', 'cg.guest_id');
				$join->on('sc.property_id', '=', 'cg.property_id');
			})
			->leftJoin('services_complaint_type as ct', 'sc.severity', '=', 'ct.id')
			->leftJoin('services_complaint_maincategory as sm', 'sc.category_id', '=', 'sm.id')
			->leftJoin('services_complaint_main_subcategory as scms', 'sc.subcategory_id', '=', 'scms.id')
			->leftJoin('services_complaint_feedback_type as scft', 'sc.feedback_type_id', '=', 'scft.id')
			->leftJoin('services_complaint_feedback_source as scfs', 'sc.feedback_source_id', '=', 'scfs.id')
			->leftJoin('services_location as sl', 'sc.loc_id', '=', 'sl.id')
			->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
			->where('sc.delete_flag', 0)
			->whereBetween('sc.created_at', array($start_time, $end_time));

		//frequency list
		$freq_query = DB::table('services_complaint_request as sc')
			->join('services_complaint_maincategory as comp', 'sc.category_id', '=', 'comp.id')
			->join('services_compensation_request as scr', 'sc.id', '=', 'scr.complaint_id')
			->leftJoin('common_property as cp', 'sc.property_id', '=', 'cp.id')
			->leftJoin('common_room as cr', 'sc.room_id', '=', 'cr.id')
			->leftJoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
			->leftJoin('services_complaint_type as ct', 'sc.severity', '=', 'ct.id')
			->leftJoin('services_complaint_maincategory as sm', 'sc.category_id', '=', 'sm.id')
			->leftJoin('services_complaint_feedback_type as scft', 'sc.feedback_type_id', '=', 'scft.id')
			->leftJoin('services_complaint_feedback_source as scfs', 'sc.feedback_source_id', '=', 'scfs.id')
			->leftJoin('services_location as sl', 'sc.loc_id', '=', 'sl.id')
			->select(DB::raw('sc.category_id, comp.name,count(sc.id) as count, sum(scr.cost) as cost'))
			->groupBy('sc.category_id')
			->where('sc.delete_flag', 0)
			->whereBetween('sc.created_at', array($start_time, $end_time));

		// category list
		$category_query = DB::table('services_complaint_request as sc')
			->leftJoin('services_complaint_maincategory as comp', 'sc.category_id', '=', 'comp.id')
			->join('services_compensation_request as scr', 'sc.id', '=', 'scr.complaint_id')
			->leftJoin('common_property as cp', 'sc.property_id', '=', 'cp.id')
			->leftJoin('common_room as cr', 'sc.room_id', '=', 'cr.id')
			->leftJoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
			->leftJoin('services_complaint_type as ct', 'sc.severity', '=', 'ct.id')
			->leftJoin('services_complaint_maincategory as sm', 'sc.category_id', '=', 'sm.id')
			->leftJoin('services_compensation as scp', 'scr.item_id', '=', 'scp.id')
			->leftJoin('services_complaint_feedback_type as scft', 'sc.feedback_type_id', '=', 'scft.id')
			->leftJoin('services_complaint_feedback_source as scfs', 'sc.feedback_source_id', '=', 'scfs.id')
			->leftJoin('services_location as sl', 'sc.loc_id', '=', 'sl.id')
			->select(DB::raw('comp.name, sc.loc_id, scp.compensation, sum(scr.cost) as cost'))
			->groupBy('sc.category_id')
			->groupBy('sc.loc_id')
			->groupBy('scr.item_id')
			->where('sc.delete_flag', 0)
			->whereBetween('sc.created_at', array($start_time, $end_time));


		$comp_query = DB::table('services_complaint_sublist as cs')
			->leftJoin('services_complaints as sc', 'cs.item_id', '=', 'sc.id')
			->leftjoin('common_department as cd', 'cs.dept_id', '=', 'cd.id')
			->leftJoin('common_users as cu', 'cs.assignee_id', '=', 'cu.id')
			->leftJoin('services_complaint_type as ct', 'sc.type_id', '=', 'ct.id')

			->leftJoin('common_users as cu1', 'cs.completed_by', '=', 'cu1.id')
			->leftJoin('common_users as cu2', 'cs.submitter_id', '=', 'cu2.id')

			->leftJoin('services_complaint_category as scc', 'cs.category_id', '=', 'scc.id')
			->leftJoin('services_complaint_subcategory as scs', 'cs.subcategory_id', '=', 'scs.id')
			->leftJoin('services_location as sl', 'cs.location_id', '=', 'sl.id')
			->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
			->leftJoin('services_complaint_sublist_compensation as scsc', 'cs.id', '=', 'scsc.sub_id')
			->leftJoin('common_users as cu3', 'scsc.sub_provider_id', '=', 'cu3.id')
			->leftJoin('services_compensation as comp', 'scsc.compensation_id', '=', 'comp.id')
			->where('cs.delete_flag', 0)
			->whereBetween('cs.created_at', array($start_time, $end_time));
		$sub_query = DB::table('services_complaint_sublist as cs')
			->leftJoin('services_complaint_request as sc', 'cs.parent_id', '=', 'sc.id')
			->leftjoin('common_department as cd', 'cs.dept_id', '=', 'cd.id')
			->leftJoin('common_users as cu', 'cs.assignee_id', '=', 'cu.id')
			->leftJoin('services_complaint_type as ct', 'sc.severity', '=', 'ct.id')

			->leftJoin('common_users as cu1', 'cs.completed_by', '=', 'cu1.id')
			->leftJoin('common_users as cu2', 'cs.submitter_id', '=', 'cu2.id')
			->leftJoin('common_guest_profile as gp', 'sc.guest_id', '=', 'gp.id')
			->leftJoin('common_guest as cg', function($join) {
				$join->on('gp.guest_id', '=', 'cg.guest_id');
				$join->on('sc.property_id', '=', 'cg.property_id');
			})

			->leftJoin('services_complaint_category as scc', 'cs.category_id', '=', 'scc.id')
			->leftJoin('services_complaint_subcategory as scs', 'cs.subcategory_id', '=', 'scs.id')
		//	->leftJoin('services_complaint_status as sta', 'cs.status', '=', 'sta.id')
			->leftJoin('services_location as sl', 'cs.location_id', '=', 'sl.id')
			->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
			->leftJoin('services_complaint_sublist_compensation as scsc', 'cs.id', '=', 'scsc.sub_id')
			->leftJoin('common_users as cu3', 'scsc.sub_provider_id', '=', 'cu3.id')
		//	->leftJoin('services_compensation as comp', 'cs.compensation_id', '=', 'comp.id')
			->leftJoin('services_compensation as comp', 'scsc.compensation_id', '=', 'comp.id')
			->where('cs.delete_flag', 0)
			->where('sc.delete_flag',0)
			->whereBetween('cs.created_at', array($start_time, $end_time));
		if(count($department_tags) >0){
			$comp_query->whereIn('cs.dept_id', $department_tags);
			$sub_query->whereIn('cs.dept_id', $department_tags);
		}
		if(count($status_tags) > 0 )
		{
			$query->whereIn('sc.status', $status_tags);
			$freq_query->whereIn('sc.status', $status_tags);
			$category_query->whereIn('sc.status', $status_tags);
		//	$sub_query->whereIn('cs.status', $status_tags);
		}

		if(count($sub_status_tags) > 0 )
		{

			$sub_query->whereIn('cs.status', $sub_status_tags);
		}

		if(count($guest_type_tags) > 0 )
		{
			$query->whereIn('sc.guest_type', $guest_type_tags);
			$freq_query->whereIn('sc.guest_type', $guest_type_tags);
			$category_query->whereIn('sc.guest_type', $guest_type_tags);
			$sub_query->whereIn('sc.guest_type', $guest_type_tags);
		}

		if(count($property_tags) > 0 )
		{
			$query->whereIn('cp.name', $property_tags);
			$freq_query->whereIn('cp.name', $property_tags);
			$category_query->whereIn('cp.name', $property_tags);
		}

		if(count($building_tags) > 0 )
		{
			$query->whereIn('cb.name', $building_tags);
			$freq_query->whereIn('cb.name', $building_tags);
			$category_query->whereIn('cb.name', $building_tags);
		}

		if(count($feedback_type_tags) > 0 )
		{
			$query->whereIn('scft.name', $feedback_type_tags);
			$freq_query->whereIn('scft.name', $feedback_type_tags);
			$category_query->whereIn('scft.name', $feedback_type_tags);
		}

		if(count($feedback_source_tags) > 0 )
		{
			$query->whereIn('scfs.name', $feedback_source_tags);
			$freq_query->whereIn('scfs.name', $feedback_source_tags);
			$category_query->whereIn('scfs.name', $feedback_source_tags);
		}

		if(count($location_tags) > 0 && $report['report_by'] != 'Sub-complaint' )
		{
			$query->whereIn('sc.loc_id', $location_tags);
			$freq_query->whereIn('sc.loc_id', $location_tags);
			$category_query->whereIn('sc.loc_id', $location_tags);
			$sub_query->whereIn('cs.location_id', $location_tags);
		}

		if(count($location_type_tags) > 0 && $report['report_by'] != 'Sub-complaint' )
		{
			$query->whereIn('sl.type_id', $location_type_tags);
			$freq_query->whereIn('sl.type_id', $location_type_tags);
			$category_query->whereIn('sl.type_id', $location_type_tags);
			$sub_query->whereIn('sl.type_id', $location_type_tags);
		}

		if(count($serverity_tags) > 0 )
		{
			$query->whereIn('ct.type', $serverity_tags);
			$freq_query->whereIn('ct.type', $serverity_tags);
			$category_query->whereIn('ct.type', $serverity_tags);
			$sub_query->whereIn('ct.type', $serverity_tags);
		}

		if(count($main_category_tags) > 0 )
		{
			$query->whereIn('sm.name', $main_category_tags);
			$freq_query->whereIn('sm.name', $main_category_tags);
			$category_query->whereIn('sm.name', $main_category_tags);
		}

		if(count($guest_name_tags) > 0 )
		{
			$query->whereIn('cg.guest_name', $guest_name_tags);
		}

		if(count($guest_id_tags) > 0 )
		{
			$query->whereIn('cg.guest_id', $guest_id_tags);
		}

		if(count($guest_email_tags) > 0 )
		{
			$query->whereIn('cg.email', $guest_email_tags);
		}

		if(count($guest_mobile_tags) > 0 )
		{
			$query->whereIn('cg.mobile', $guest_mobile_tags);
		}
		if(count($category_tags) >0)
		$sub_query->whereIn('scc.name', $category_tags);

		if(count($sub_category_tags) >0)
		$sub_query->whereIn('scs.name', $sub_category_tags);


		$query->select(DB::raw('sc.*, ct.type as serverity_name, gp.guest_name, gp.fname,  CONCAT_WS(" ", gp.fname, gp.guest_name) as guest_fullname,cp.name as property_name, cr.room, "location" as location,
				sm.name as category_name, scms.name as subcategory_name,
				sl.name as location_name, slt.type as location_type,
				CONCAT_WS(" ", ce.fname, ce.lname) as wholename, ct.type as severity_name,	gp.mobile, gp.phone, 
				gp.email, gp.address, gp.gender, gp.nationality, cc.name as nationality_name, gp.passport, cg.arrival, cg.departure,
				scft.name as feedback_type, scfs.name as feedback_source,
				jr.job_role, (select sum(cost) from services_compensation_request where complaint_id = sc.id) as total_cost,ct.type as severity_name, sm.name as maincategory_name'));


		$sub_query
				->select(DB::raw("cs.*, cs.comment as complaint_name, cd.department, comp.compensation as compensation_name, ct.type, CONCAT_WS(\" \", cu.first_name, cu.last_name) as assignee_name, cd.short_code,
				CONCAT_WS(\" \", cu1.first_name, cu1.last_name) as completed_by_name, cd.department,
				CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as created_by,
				scc.name as category_name, scs.name as subcategory_name, cg.arrival, cg.departure,
				sl.name as location_name, slt.type as location_type,sc.guest_type, gp.guest_name, gp.fname,  CONCAT_WS(\" \", gp.fname, gp.guest_name) as guest_fullname,
				CONCAT_WS(\" \", cu3.first_name, cu3.last_name) as sub_provider, 
				DATEDIFF(CURTIME(), cs.created_at) as age_days,
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(cs.sub_id, '0', 'A')
				, '1', 'B')
				, '2', 'C')
				, '3', 'D')
				, '4', 'E')
				, '5', 'F')
				, '6', 'G')
				, '7', 'H')
				, '8', 'I')
				, '9', 'J') as sub_label"));

		switch ($group_by) {
			case 'Date':
				$query->orderBy('sc.created_at');
				$sub_query->orderBy('cs.created_at');
				break;
			case 'Location':
				$query->orderBy('sc.loc_id');
				$sub_query->orderBy('cs.location_id');
				break;
			case 'Guest Type':
				$query->orderBy('sc.guest_type');
				$sub_query->orderBy('sc.guest_type');
				break;
			case 'Status':
				$query->orderBy('sc.status');
				$sub_query->orderBy('cs.status');
				break;
			case 'Property':
				$query->orderBy('sc.property_id');
				$sub_query->orderBy('sc.property_id');
				break;
			case 'Severity':
				$query->orderBy('sc.severity');
				$sub_query->orderBy('cs.severity');
				break;
			case 'Category':
				$query->orderBy('sc.category_id')
						->where('sc.category_id','>', $null);
				break;
			case 'Executive':
				$query->orderBy('sc.created_at');
				$sub_query->orderBy('cs.created_at');
				break;
			default:
				$query->orderBy('sc.created_at');
				$sub_query->orderBy('cs.created_at');
				break;
		}

		$data = $query->get();

		$complaint_list = [];
		$complaint_list_summary = [];
		$summary_header = array('Informational','Minor','Moderate','Major','Serious','Total');
		$replacement = '<span class="highlight">${1}</span>';





		// Sub ComplaintReport Data
		$sub_comp = [];
		$sub_complaint = $sub_query->get();
		foreach($sub_complaint as $row)
		{
			$row->comment_list = $this->getSubcommentsData($row->id);
			$row->comp_list = ComplaintSublist::getCompensationList($row->id);
			switch ($group_by) {
				case 'Date':
					$group_key = substr($row->created_at, 0, 10);
					break;
				case 'Location':
					$group_key = $row->location_name;
					break;
				case 'Guest Type':
					$group_key = $row->guest_type;
					break;
				case 'Status':
					$group_key = $row->status;
					break;
				case 'Property':
					$group_key = substr($row->created_at, 0, 10);
					break;
				case 'Severity':
					$group_key = $row->type;
					break;
				case 'Category':
					$group_key = $row->category_name;
					break;
				case 'Type':
					$group_key = substr($row->created_at, 0, 10);
					break;
				case 'Source':
					$group_key = substr($row->created_at, 0, 10);
					break;
				default:
					$group_key = substr($row->created_at, 0, 10);
					break;
			}

			$sub_comp[$group_key][] = $row;
		}

		// Frequency Report Data
		$freq_list = $freq_query->get();
		foreach($freq_list as $row)
		{
			$comp_list = DB::table('services_compensation_request as cr')
				->leftJoin('services_compensation as sc', 'cr.item_id', '=', 'sc.id')
				->join('services_complaint_request as scr', 'scr.id', '=', 'cr.complaint_id')
				->select(DB::raw('cr.*, sc.compensation, scr.loc_id'))
				->where('scr.category_id', $row->category_id)
				->where('scr.delete_flag',0)
				->get();

			$row->comp_list = $comp_list;
			foreach($row->comp_list as $item)
			{
				$info = app('App\Http\Controllers\Frontend\GuestserviceController')->getLocationInfo($item->loc_id);
				if( !empty($info) )
					$item->loc_name = $info->name.'-'.$info->type;
				else
					$item->loc_name = "";
			}
		}

		// category Report
		$category_list = $category_query->get();

		foreach($category_list as $row)
		{
			$info = app('App\Http\Controllers\Frontend\GuestserviceController')->getLocationInfo($row->loc_id);
			if( !empty($info) )
				$row->loc_name = $info->name.'-'.$info->type;
			else
				$row->loc_name = "";
		}

		foreach($data as $row) {
			//get location
			switch ($group_by) {
				case 'Date':
					$group_key = substr($row->created_at, 0, 10);
					break;
				case 'Location':
					$group_key = $row->location_name.'-'.$row->location_type;
					break;
				case 'Guest Type':
					$group_key = $row->guest_type;
					break;
				case 'Status':
					$group_key = $row->status;
					break;
				case 'Property':
					$group_key = $row->property_name;
					break;
				case 'Severity':
					$group_key = $row->severity_name;
					break;
				case 'Category':
					$group_key = $row->maincategory_name;
					break;
				case 'Type':
					$group_key = $row->feedback_type;
					break;
				case 'Source':
					$group_key = $row->feedback_source;
					break;
				case 'Executive':
					$group_key = substr($row->created_at, 0, 10);
					break;
				default:
					$group_key = substr($row->created_at, 0, 10);
					break;
			}

			$row->location = $row->location_name.'-'.$row->location_type;

			$comment_highlight = str_replace('<span\ class="angular\-highlight">','',$row->comment_highlight);
			$comment_highlight = str_replace('</span>','',$comment_highlight);
			$comment_highlight = '/(' . str_replace("&&", "|", $comment_highlight) . ')/';
			$comment_highlight = '/(' . str_replace("'", "'", $comment_highlight) . ')/';

			if( Functions::isRegularExpression($comment_highlight) )
				$row->comment_highlighted = preg_replace($comment_highlight, $replacement, $row->comment);
			else
				$row->comment_highlighted = $row->comment;

			$response_highlight = str_replace('<span\ class="angular\-highlight">','',$row->response_highlight);
			$response_highlight = str_replace('</span>','',$response_highlight);
			$response_highlight = '/(' . str_replace("&&", "|", $response_highlight) . ')/';
			$response_highlight = '/(' . str_replace("'", "'", $response_highlight) . ')/';

			if( Functions::isRegularExpression($response_highlight) )
				$row->initial_response_highlighted = preg_replace($response_highlight, $replacement, $row->initial_response);
			else
				$row->initial_response_highlighted = $row->initial_response;

			//set comment list
			$comment_list = DB::table('services_complaint_comments as scc')
			//->join('services_compensation as comp', 'scr.item_id', '=', 'comp.id')
			->leftJoin('common_users as cu', 'scc.user_id', '=', 'cu.id')
			->where('scc.sub_id', $row->id)
			->select(DB::raw('scc.*,CONCAT_WS(" ", cu.first_name, cu.last_name) as commented_by'))
			->get();

			$row->comment_list = $comment_list;

			//set compensation list
			$com_list = DB::table('services_compensation_request as scr')
						->join('services_compensation as comp', 'scr.item_id', '=', 'comp.id')
						->leftjoin('common_department as cd', 'scr.dept_id', '=', 'cd.id')
						->leftJoin('common_users as cu', 'scr.provider_id', '=', 'cu.id')
						->where('scr.complaint_id', $row->id)
						->select(DB::raw('scr.*, comp.compensation as item_name ,CONCAT_WS(" ", cu.first_name, cu.last_name) as provider, cd.department'))
						->get();

			$row->compensation = $com_list;

			$subcom_list = DB::table('services_complaint_sublist_compensation as scr')
						->leftJoin('services_compensation as comp', 'scr.compensation_id', '=', 'comp.id')
						->leftJoin('services_complaint_sublist as scs', 'scr.sub_id', '=', 'scs.id')
						->leftJoin('services_location as sl', 'scs.location_id', '=', 'sl.id')
						->leftjoin('common_department as cd', 'scs.dept_id', '=', 'cd.id')
						->leftJoin('common_users as cu', 'scr.sub_provider_id', '=', 'cu.id')
						->where('scs.parent_id', $row->id)
						->select(DB::raw('scr.*, comp.compensation as item_name ,CONCAT_WS(" ", cu.first_name, cu.last_name) as provider, cd.department, sl.name as location'))
						->get();

			$row->subcompensation = $subcom_list;

			//set sub-complaint list
			$sublist_count = 0;
			$sublist = $this->getSubcomplaintListData($row->id, $report);
			$depart_array = '';
			$previous_dep = '';
			foreach ($sublist as $key1 => $sub) {
				$log = DB::table('services_complaint_log as scl')
					->where('scl.sub_id', $sub->id)
					->get();

				$sublist[$key1]->log = $log;
				if ( $sub->department != $previous_dep){
					$depart_array .= $sub->department . ',';
				}
				$previous_dep = $sub->department;

				if($sub->status == 2) //SC_COMPLETE
				{
					$diff = strtotime($sub->completed_at) - strtotime($sub->created_at);
					$sublist[$key1]->elaspse_time = Functions::getHHMMSSFormatFromSecond($diff);
				}
				else
					$sublist[$key1]->elaspse_time = 'Unknown';

				if( $sub->created_at != $sub->updated_at )
					$sublist[$key1]->update_status = ' (Updated)';
				else
					$sublist[$key1]->update_status = '';
				switch ($sublist[$key1]->status) {
					case 1:
						$sublist[$key1]->status = 'Pending';
						break;
					case 2:
						$sublist[$key1]->status = 'Completed';
						break;
					case 3:
						$sublist[$key1]->status = 'Escalated';
						break;
					case 4:
						$sublist[$key1]->status = 'Re-routing';
						break;
					case 5:
						$sublist[$key1]->status = 'Canceled';
						break;
					case 6:
						$sublist[$key1]->status = 'Timeout';
						break;
					default:
						$sublist[$key1]->status = 'Pending';
						break;
				}
				$sublist_count++;
			}

			$row->subcomplaint = $sublist;
			$row->subcomplaintcount = $sublist_count;
			$row->dep_arr = $depart_array;



			if(!empty($complaint_list[$group_key])) {
				if($report['report_by'] == 'Sub-complaint') {
					if(!empty($report['category_tag']) || !empty($report['sub_category_tag']) ) {
						if(!empty($row->subcomplaint))
						    $complaint_list[$group_key][] = $row;
					}else {
						$complaint_list[$group_key][] = $row;
					}
				}
				if($report['report_by'] == 'Complaint' || $report['report_by'] == 'Compensation') {
					$complaint_list[$group_key][] = $row;
				}
			} else {
				$complaint_list[$group_key] = [];
				if($report['report_by'] == 'Sub-complaint') {
					if(!empty($report['category_tag']) || !empty($report['sub_category_tag']) ) {
						if(!empty($row->subcomplaint))
						    $complaint_list[$group_key][] = $row;
					}else {
						$complaint_list[$group_key][] = $row;
					}
				}
				if($report['report_by'] == 'Complaint' || $report['report_by'] == 'Compensation') {
					$complaint_list[$group_key][] = $row;
				}
			}

			//summary
			if(empty($complaint_list_summary[$group_key]))
				$complaint_list_summary[$group_key] = [];

			for($i=0; $i < count($summary_header);$i++) {
					if(empty($complaint_list_summary[$group_key][$summary_header[$i]]))
						$complaint_list_summary[$group_key][$summary_header[$i]] = 0;
					if($row->serverity_name == $summary_header[$i]) {
						$complaint_list_summary[$group_key][$summary_header[$i]]++;
						if(empty($complaint_list_summary[$group_key]['Total']))
							$complaint_list_summary[$group_key]['Total'] = 0;
						$complaint_list_summary[$group_key]['Total']++;
					}
			}
		}


		if( $group_by == 'Executive')
		{
			$site_url = Functions::getSiteURL();

			foreach($data as $row)
			{
				$attach_list = [];
				if( !empty($row->path) )
					$attach_list = explode("|", $row->path);
				$base64_image_list = [];
				foreach($attach_list as $row1)
				{
					$path = $_SERVER["DOCUMENT_ROOT"] . "/" . $row1;
					if( file_exists($path) )
					{
						$ext = pathinfo($path, PATHINFO_EXTENSION);

						$base64 = "data:image/$ext;base64," . Functions::saveImageWidthBase64Resize($path, 50, 50);
						$base64_image_list[] = array(
							'url' => $site_url . $row1,
							'base64' => $base64,
						);
					}
				}

				$row->base64_image_list = $base64_image_list;

				// deprtment tags
				$department_tags = [];
				if( !empty($row->sent_ids) )
				{
					$department_tags = DB::table('common_department')
						->whereRaw("id IN ($row->sent_ids)")
						->pluck('department');
				}

				$row->department_tags = implode(",", $department_tags);
			}
		}

		$comp_query->groupBy('cd.department')
		->groupBy('cs.id')
		->select(DB::raw("cs.*, sc.complaint as complaint_name, cd.department, comp.compensation as compensation_name, ct.type, CONCAT_WS(\" \", cu.first_name, cu.last_name) as assignee_name, cd.short_code,
			CONCAT_WS(\" \", cu1.first_name, cu1.last_name) as completed_by_name,
			CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as created_by, 
			scc.name as category_name, scs.name as subcategory_name,
			sl.name as location_name, slt.type as location_type,
			CONCAT_WS(\" \", cu3.first_name, cu3.last_name) as sub_provider, 
			DATEDIFF(CURTIME(), cs.created_at) as age_days, sum(scsc.cost) as sub_cost,scsc.cost,
			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(cs.status, '1', 'Pending')
			, '2', 'Completed')
			, '3', 'Escalated')
			, '4', 'Re-routing')
			, '5', 'Canceled') 
			, '6', 'Timeout')
			 as status1,
			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(cs.sub_id, '0', 'A')
			, '1', 'B')
			, '2', 'C')
			, '3', 'D')
			, '4', 'E')
			, '5', 'F')
			, '6', 'G')
			, '7', 'H')
			, '8', 'I')
			, '9', 'J') as sub_label"));
			$comptotal_query = clone $comp_query;
			$comptotal_query->select(DB::raw("cs.*, sc.complaint as complaint_name, cd.department, comp.compensation as compensation_name, ct.type, CONCAT_WS(\" \", cu.first_name, cu.last_name) as assignee_name, cd.short_code,
				CONCAT_WS(\" \", cu1.first_name, cu1.last_name) as completed_by_name,
				CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as created_by, 
				scc.name as category_name, scs.name as subcategory_name,
				sl.name as location_name, slt.type as location_type,
				CONCAT_WS(\" \", cu3.first_name, cu3.last_name) as sub_provider, 
				DATEDIFF(CURTIME(), cs.created_at) as age_days, sum(scsc.cost) as sub_cost,scsc.cost,
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(cs.status, '1', 'Pending')
				, '2', 'Completed')
				, '3', 'Escalated')
				, '4', 'Re-routing')
				, '5', 'Canceled') 
				, '6', 'Timeout')
				 as status1,
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(cs.sub_id, '0', 'A')
				, '1', 'B')
				, '2', 'C')
				, '3', 'D')
				, '4', 'E')
				, '5', 'F')
				, '6', 'G')
				, '7', 'H')
				, '8', 'I')
				, '9', 'J') as sub_label"));
		$comp_sublist = $comp_query->get();
		$comptotal_sublist = $comptotal_query->get();
		$compensub_list = [];
		$compensubtotal_list = [];
		foreach($comp_sublist as $row) {
			$group_key = $row->department;

			$compensub_list[$group_key][] = $row;
		}

		foreach($comptotal_sublist as $row)
		{
			$department = $row->department;
			if( empty($compensubtotal_list[$department]) ) {
				$compensubtotal_list[$department] = [];
			}
			if(empty($compensubtotal_list[$department]['Total'])){
				$compensubtotal_list[$department]['Total'] = 0;
			}
			$compensubtotal_list[$department]['Total'] += $row->sub_cost;
		}
		$ret['freq_list'] = $freq_list;
		$ret['sub_complaint'] = $sub_comp;
		$ret['category_list'] = $category_list;
		$ret['complaint_list'] = $complaint_list;
		$ret['complaint_summary'] = $complaint_list_summary;
		$ret['summary_header'] = $summary_header;
		$ret['comp_list'] = $compensub_list;
		$ret['comptotal_list'] = $compensubtotal_list;
	}

	public function getSubcomplaintListData($id, $report) {
		$department_tags = $report['department_tags'];
		$category_tags = $report['category_tags'];
		$sub_category_tags = $report['sub_category_tags'];
		$location_tags = $report['location_tags'];
		$location_type_tags = $report['location_type_tags'];

		$query = DB::table('services_complaint_sublist as cs')
			->leftJoin('services_complaints as sc', 'cs.item_id', '=', 'sc.id')
			->join('common_department as cd', 'cs.dept_id', '=', 'cd.id')
			->leftJoin('common_users as cu', 'cs.assignee_id', '=', 'cu.id')
			->leftJoin('services_complaint_type as ct', 'sc.type_id', '=', 'ct.id')
			->leftJoin('services_complaint_type as ct1', 'cs.severity', '=', 'ct1.id')
			->leftJoin('services_compensation as comp', 'cs.compensation_id', '=', 'comp.id')
			->leftJoin('common_users as cu1', 'cs.completed_by', '=', 'cu1.id')
			->leftJoin('common_users as cu2', 'cs.submitter_id', '=', 'cu2.id')
			->leftJoin('common_users as cu3', 'cs.sub_provider_id', '=', 'cu3.id')
			->leftJoin('services_complaint_category as scc', 'cs.category_id', '=', 'scc.id')
			->leftJoin('services_complaint_subcategory as scs', 'cs.subcategory_id', '=', 'scs.id')
			->leftJoin('services_location as sl', 'cs.location_id', '=', 'sl.id')
			->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
			->where('cs.delete_flag', 0)
			->where('cs.parent_id', $id);

		if(count($department_tags) >0)
			$query->whereIn('cs.dept_id', $department_tags);

		if(count($category_tags) >0)
			$query->whereIn('scc.name', $category_tags);

		if(count($sub_category_tags) >0)
			$query->whereIn('scs.name', $sub_category_tags);

		if(count($location_tags) >0)
			$query->whereIn('cs.location_id', $location_tags);

		if(count($location_type_tags) >0)
			$query->whereIn('sl.type_id', $location_type_tags);

		$query
			->select(DB::raw("cs.*, sc.complaint as complaint_name, cd.department, comp.compensation as compensation_name, ct.type, ct1.type as severity, CONCAT_WS(\" \", cu.first_name, cu.last_name) as assignee_name, cd.short_code,
			CONCAT_WS(\" \", cu1.first_name, cu1.last_name) as completed_by_name, cd.department,
			CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as created_by, 
			scc.name as category_name, scs.name as subcategory_name,
			sl.name as location_name, slt.type as location_type,
			CONCAT_WS(\" \", cu3.first_name, cu3.last_name) as sub_provider, TIME_TO_SEC(TIMEDIFF(cs.completed_at, cs.created_at)) as closure_days,
			DATEDIFF(CURTIME(), cs.created_at) as age_days,
			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(sub_id, '0', 'A')
			, '1', 'B')
			, '2', 'C')
			, '3', 'D')
			, '4', 'E')
			, '5', 'F')
			, '6', 'G')
			, '7', 'H')
			, '8', 'I')
			, '9', 'J') as sub_label"));
			//->get();
		$sublist = $query->get();
		foreach($sublist as $row) {
			$row->comment_list = $this->getSubcommentsData($row->id);
			$row->comp_list = ComplaintSublist::getCompensationList($row->id);
		}

		return $sublist;
	}

	public function getSubcommentsData($id) {
		$list = DB::table('services_complaint_sublist_comments as csc')
			->leftJoin('common_users as cu', 'csc.user_id', '=', 'cu.id')
			->leftJoin('common_job_role as jr', 'cu.job_role_id', '=', 'jr.id')
			->where('csc.sub_id', $id)
			->select(DB::raw('csc.*, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, cu.picture, jr.job_role'))
			->get();

		return $list;
	}

	private function outputComplaintLogo($sheet ,$logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A1:B1');
		$sheet->mergeCells('A2:B2');
		$sheet->mergeCells('A1:A2');
		// $sheet->mergeCells('A2:B2');

		// $sheet->setMergeColumn(array(
		// 	'columns' => array('A','B'),
		// 	'rows' => array(
		// 		array(2,3),
		// 	)
		// ));
		
		// $hotlync_logo = new PHPExcel_Worksheet_Drawing;
		// $worksheet = new Spreadsheet($sheet);
		$hotlync_logo = new Drawing;
		//$hotlync_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		// $hotlync_logo->setPath(public_path($logo_path)); //your image path
		$hotlync_logo->setPath(public_path('uploads/logo/logo_1502609305.png')); //your image path
		$hotlync_logo->setCoordinates('A1');
		$hotlync_logo->setHeight(80);
		$hotlync_logo->setWorksheet($sheet);
	}

	private function outputComplaintDescription($sheet, $data) {
		// Report title


		if ($data['report_type'] == 'Frequency')
		{
		$i = 2;
		$sheet->mergeCells('D'.$i.':H'.$i);
		$sheet->cell('D'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;

		$sheet->mergeCells('D'.$i.':H'.$i);
		$sheet->cell('D'.$i, function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']  );
		});
		$i ++;
		}
		elseif ($data['report_by'] == 'Periodical' || $data['report_by'] == 'Compensation' )
		{
		$i = 2;
		$sheet->mergeCells('F'.$i.':H'.$i);
		$sheet->cell('F'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;

		$sheet->mergeCells('F'.$i.':H'.$i);
		$sheet->cell('F'.$i, function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']  );
		});
		$i ++;
		}
		elseif ($data['group_by'] == 'Location' )
		{
		$i = 2;
		$sheet->mergeCells('D'.$i.':F'.$i);
		$sheet->cell('D'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;

		$sheet->mergeCells('D'.$i.':F'.$i);
		$sheet->cell('D'.$i, function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']  );
		});
		$i ++;
		}
		elseif ($data['group_by'] == 'Response Rate')
		{
		$i = 2;
		$sheet->mergeCells('K'.$i.':N'.$i);
		$sheet->cell('K'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;

		$sheet->mergeCells('K'.$i.':N'.$i);
		$sheet->cell('K'.$i, function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']  );
		});
		$i ++;
		}
		else{
			$i = 2;
			$sheet->mergeCells('X'.$i.':AB'.$i);
			$sheet->cell('X'.$i, function($cell) use ($data) {
				$cell->setValue('Date Generated: ' .  date('d-M-Y'));
			});
			$i++;

			$sheet->mergeCells('X'.$i.':AB'.$i);
			$sheet->cell('X'.$i, function($cell) use ($data) {
				$cell->setValue('Period : ' . $data['period']  );
			});
			$i ++;
		}
	}
	private function outputITDescription($sheet, $data) {
		// Report title
		$i = 2;
		$sheet->mergeCells('L'.$i.':P'.$i);
		$sheet->cell('L'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated: ' .  date('d-M-Y'));
		});
		$i++;

		$sheet->mergeCells('L'.$i.':P'.$i);
		$sheet->cell('L'.$i, function($cell) use ($data) {
			$cell->setValue('Period : ' . $data['period']  );
		});
		$i ++;
	}

	//---------------------FACILITIES REPORT DESCRIPTION---------------------//
	private function outputGuestDescription($sheet, $data) {
		// Report title
		$i = 2;
		$sheet->cell('I'.$i, function($cell) use ($data) {
			$cell->setValue('Date Generated :');
			$cell->setAlignment('right');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$sheet->mergeCells('J'.$i.':L'.$i);

		$sheet->cell('J'.$i, function($cell) use ($data) {
			$cell->setValue(date('d-M-Y'));
			$cell->setAlignment('left');
		});
		$i++;

		$sheet->cell('I'.$i, function($cell) use ($data) {
			$cell->setValue('Period :');
			$cell->setAlignment('right');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$sheet->mergeCells('J'.$i.':L'.$i);

		$sheet->cell('J'.$i, function($cell) use ($data) {
			$cell->setValue($data['period']  );
			$cell->setAlignment('left');
		});
		$i ++;
	}
	//!---------------------FACILITIES REPORT DESCRIPTION---------------------//

	private function outputComplaintTitle($sheet, $data, $row_num) {

		if ($data['report_by'] == 'Periodical' || $data['report_by'] == 'Compensation'){
			$row_num += 5;
		$sheet->mergeCells('B'.$row_num.':G'.$row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '18',
				'bold' => true
			));
		});
	   }elseif($data['group_by'] == 'Location'){
		$row_num += 5;
		$sheet->mergeCells('A'.$row_num.':D'.$row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '18',
				'bold' => true
			));
		});
	   }elseif($data['group_by'] == 'Response Rate'){
		$row_num += 5;
		$sheet->mergeCells('A'.$row_num.':N'.$row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '18',
				'bold' => true
			));
		});
	   }else{
		$sheet->mergeCells('J'.$row_num.':S'.$row_num);
		$sheet->cell('J' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '18',
				'bold' => true
			));
		});
	   }
		$row_num += 2;

		return $row_num;
	}
	private function outputITTitle($sheet, $data, $row_num) {
		$sheet->mergeCells('E'.$row_num.':I'.$row_num);
		$sheet->cell('E' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});

		$row_num += 2;

		return $row_num;
	}
	private function outputHskpTitle($sheet, $data, $row_num) {
		$sheet->mergeCells('B'.$row_num.':E'.$row_num);
		$sheet->cell('B' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});

		$row_num += 2;

		return $row_num;
	}
	private function outputENGTitle($sheet, $data, $row_num) {
		$sheet->mergeCells('E'.$row_num.':I'.$row_num);
		$sheet->cell('E' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});

		$row_num += 2;

		return $row_num;
	}
	private function outputFBTitle($sheet, $data, $row_num) {
		$sheet->mergeCells('D'.$row_num.':H'.$row_num);
		$sheet->cell('D' . $row_num, function ($cell) use ($data) {
			$cell->setValue($data['title']);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size' => '14',
				'bold' => true
			));
		});

		$row_num += 2;

		return $row_num;
	}

	private function setComplaintValue($sheet, $label1, $value1, $label2, $value2, $row_num) {
		$sheet->mergeCells('A' . $row_num . ':P' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($label1) {
			$cell->setValue($label1);
			$cell->setAlignment('right');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$sheet->mergeCells('C' . $row_num . ':J' . $row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($value1) {
			$cell->setValue($value1);
		});

		$sheet->mergeCells('K' . $row_num . ':L' . $row_num);
		$sheet->cell('K' . $row_num, function ($cell) use ($label2) {
			$cell->setValue($label2);
			$cell->setAlignment('right');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$sheet->mergeCells('M' . $row_num . ':T' . $row_num);
		$sheet->cell('M' . $row_num, function ($cell) use ($value2) {
			$cell->setValue($value2);
		});
	}

	//---------------------FACILITIES REPORT CONTENT---------------------//
	private function setGuestHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':K' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Facilities Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '15',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':K'.$row_num, 'thin');
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('No.');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Guest Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Room Number');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('No. of Adult');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('No. of Kids');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Extra Members');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Date');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Facility');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Comment');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Check-in Time');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Check-out Time');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':K'.$row_num, 'thin');
	}
	//!---------------------FACILITIES REPORT CONTENT---------------------//

		private function setITHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':Q' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('IT Issues');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':Q'.$row_num, 'thin');
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Date');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Severity');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Sub-Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Subject');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Issue');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Created At');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Raised By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Job Role');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Updated By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Resolution Comment');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Resolution Duration');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Reject Comment');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		//$col_num++;
		$sheet->setBorder('A'.$row_num.':Q'.$row_num, 'thin');
	}


	private function setENGHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':R' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Engineering Requests');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':R'.$row_num, 'thin');
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Date');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Severity');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Location');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Sub-Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Subject');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Request');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Created At');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Raised By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Job Role');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Updated By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Resolution Comment');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Resolution Duration');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Reject Comment');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		//$col_num++;
		$sheet->setBorder('A'.$row_num.':R'.$row_num, 'thin');
	}

	private function setAuditRoomHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':G' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Room Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':G'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Building');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Floor');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Room Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Room');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Description');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Credits');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':G'.$row_num, 'thin');
	}

	private function setAuditAdminExtHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':J' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Admin Extension Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':J'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Building');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Section');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Extension');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('User');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('User Group');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Description');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':J'.$row_num, 'thin');
	}

	private function setAuditGuestExtHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':F' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Guest Extension Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Building');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Room');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Extension');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
	}

	private function setAuditDptHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':F' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue(' Department Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Short Code');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Services');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Description');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
	}

	private function setAuditSectionHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':D' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue(' Section Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':D'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Section');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':D'.$row_num, 'thin');
	}

	private function setAuditAreaHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':E' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Admin Area Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':E'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Building');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Floor');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Name');
			$cell->setAlignment('center');
			//$cell->setWidth('10');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':E'.$row_num, 'thin');
	}

	private function setAuditDeptFuncHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':F' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Department Function Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Function');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Short Code');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Description');
			$cell->setAlignment('center');
			//$cell->setWidth('10');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Device Setting');
			$cell->setAlignment('center');
			//$cell->setWidth('10');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
	}

	private function setAuditCompensationHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':F' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Compensation Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Client');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Compensation');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Cost');
			$cell->setAlignment('center');
			//$cell->setWidth('10');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Approval Route');
			$cell->setAlignment('center');
			//$cell->setWidth('10');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':F'.$row_num, 'thin');
	}

	private function setAuditTaskHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':G' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Task Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':G'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department Function');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Task Group Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Task');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':G'.$row_num, 'thin');
	}

	private function setAuditJobHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':E' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Job Role Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':E'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Job Role');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Permission Group');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':E'.$row_num, 'thin');
	}

	private function setAuditMinibarHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':G' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Minibar Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':G'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Item Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Charge');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('PMS Code');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('IVR Code');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Max Item');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Item Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':G'.$row_num, 'thin');
	}

	private function setAuditUserHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':J' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('User Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':J'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('First Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Last Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Username');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Job Role');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Email');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Mobile');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Last Login');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});


		$sheet->setBorder('A'.$row_num.':J'.$row_num, 'thin');
	}

	private function setAuditDeviceHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':J' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Device Audit Report');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':J'.$row_num, 'thin');
		$row_num += 2;
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Department Function');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Secondary Department Function');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Number');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Location Group');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Secondary Location Group');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Building');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Device ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});

		$sheet->setBorder('A'.$row_num.':I'.$row_num, 'thin');
	}

	private function setFBHead($sheet, $row_num,$col_num) {
		$sheet->mergeCells('A' . $row_num . ':N' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('Guest Feedbacks');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':N'.$row_num, 'thin');
		$row_num++;
		//$sheet->mergeCells('B' . $row_num . ':N' . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Date');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Sub-Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Room');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Guest Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Check-In');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Check-Out');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Feedback/Comments');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Location');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Occasion');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Created At');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell) {
			$cell->setValue('Created By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '11',
				'bold' => true
			));
		});


		//$col_num++;
		$sheet->setBorder('A'.$row_num.':N'.$row_num, 'thin');
	}

	private function setComplaintHead($sheet, $row_num) {
		$sheet->mergeCells('A' . $row_num . ':AN' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('COMPLAINTS');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':AD'.$row_num, 'thin');
		$row_num++;
		$sheet->mergeCells('A' . $row_num . ':Q' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell) {
			$cell->setValue('Complaint Details');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});

		$sheet->mergeCells('R' . $row_num . ':T' . $row_num);
		$sheet->cell('R' . $row_num, function ($cell) {
			$cell->setValue('Service Recovery');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});

		$sheet->mergeCells('U' . $row_num . ':AK' . $row_num);
		$sheet->cell('U' . $row_num, function ($cell) {
			$cell->setValue('Sub Complaints');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});
		$sheet->mergeCells('AL' . $row_num . ':AN' . $row_num);
		$sheet->cell('AL' . $row_num, function ($cell) {
			$cell->setValue('Comments');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':AN'.$row_num, 'thin');
	}

	private function setSubComplaintHead($sheet, $row_num) {
		$sheet->mergeCells('A' . $row_num . ':X' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('COMPLAINTS');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':X'.$row_num, 'thin');
		$row_num++;
		$sheet->mergeCells('A' . $row_num . ':R' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell) {
			$cell->setValue('Sub-Complaint Details');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});

		$sheet->mergeCells('S' . $row_num . ':U' . $row_num);
		$sheet->cell('S' . $row_num, function ($cell) {
			$cell->setValue('Service Recovery');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});
		$sheet->mergeCells('V' . $row_num . ':X' . $row_num);
		$sheet->cell('V' . $row_num, function ($cell) {
			$cell->setValue('Comments');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':X'.$row_num, 'thin');
	}

	private function setCompComplaintHead($sheet, $row_num) {
		$sheet->mergeCells('A' . $row_num . ':S' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell)  {
			$cell->setValue('COMPLAINTS');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '18',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':M'.$row_num, 'thin');
		$row_num++;
		$sheet->mergeCells('A' . $row_num . ':M' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell) {
			$cell->setValue('Complaint Details');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});
		$sheet->mergeCells('N' . $row_num . ':S' . $row_num);
		$sheet->cell('N' . $row_num, function ($cell) {
			$cell->setValue('Compensation');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'size'       => '14',
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':T'.$row_num, 'thin');
	}

	private function setComplaintValue2($sheet, $label1, $value1, $row_num) {
		//$col_num='A';
		$sheet->mergeCells('A'. $row_num .':'.'B'. $row_num);
		$sheet->cell('A'. $row_num, function ($cell) use ($label1) {
			$cell->setValue($label1);
			$cell->setAlignment('right');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$sheet->mergeCells('C' . $row_num . ':J' . $row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($value1) {
			$cell->setValue($value1);
		});
	}

	private function setCellBorder($sheet,$row_num, $col_num, $top, $right, $bottom, $left) {
		$sheet->cell($col_num. $row_num, function ($cell) use ($top, $right, $bottom, $left){

			$cell->setBorder($top, $right, $bottom, $left);

		});
	}
	private function setMergeRow($sheet,$value1, $row_num, $col_num, $count, $height) {
		//$col_num='A';
		if($count>1)
		{
		$sheet->mergeCells($col_num. $row_num .':'.$col_num. ($row_num+$count-1));
		}
		$sheet->cell($col_num. $row_num, function ($cell) use ($value1) {
			$cell->setValue($value1);
			$cell->setAlignment('center');
			$cell->setValignment('center');
			//$cell->setBorder('none', 'solid', 'solid', 'none');

		});

		$sheet->getStyle($col_num . $row_num)->getAlignment()->setWrapText(true);
		$sheet->setWidth($col_num, $height);

		// $sheet->cell($col_num. $row_num, function ($cell){
			// $cell->setAlignment('center');
		// });
		// $sheet->mergeCells('C' . $row_num . ':J' . $row_num);
		// $sheet->cell('C' . $row_num, function ($cell) use ($col_num) {
			// $cell->setValue($col_num);
		// });
	}

	private function setMergeRowText($sheet,$value1, $row_num, $col_num, $count, $width, $height) {
		if($count>1)
		{
		$sheet->mergeCells($col_num. $row_num .':'.$col_num. ($row_num+$count-1));
		}
		$sheet->cell($col_num. $row_num, function ($cell) use ($value1) {
			$cell->setValue($value1);
			$cell->setAlignment('center');
			$cell->setValignment('center');

		});
		$sheet->getStyle($col_num . $row_num)->getAlignment()->setWrapText(true);
		$sheet->setWidth($col_num, $width);
		if($count>1)
		{
		$height_row=($height/$count);
		if($count>3 &&($height_row<=12))
		{
		$height_row+=12;
		}
		for($i=$row_num;$i<($row_num+$count);$i++)
		{
		$sheet->setHeight($i, $height_row);
		}
		}
		else
			$sheet->setHeight($row_num, $height);

		// $sheet->mergeCells('C' . $row_num . ':T' . $row_num);
		// $sheet->cell('C' . $row_num, function ($cell) use ($value1) {
			// $cell->setValue($value1);
		// });


	}
	private function setComplaintValue4($sheet, $val,  $row_num, $col_num) {
		$sheet->cell($col_num. $row_num, function ($cell) use ($val) {
			$cell->setValue($val);
			$cell->setAlignment('center');

		});
	}
	private function setComplaintValue3($sheet, $group_val, $row_num, $col_num) {

		//$sheet->mergeCells($col_num. $row_num .':'.(++$col_num). $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) use ($group_val) {
			$cell->setValue($group_val);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		//$sheet->mergeCells($col_num. $row_num .':'.(++$col_num) . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell){
			$cell->setValue('Ticket#');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		// $sheet->mergeCells($col_num. $row_num .':'.($col_num+1) . $row_num);
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Raised By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Guest Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		 $col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Guest Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Source');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Incident');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Stay');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Property');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Location');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Severity');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Complaint');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Initial Response');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Resolution');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Amount');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Total');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Subcomplaint ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Sub Complaint');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Created At');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Severity Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Created By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Assignee');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Resolution');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Sub-Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Completed By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Closure Date');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Closure Days');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Amount');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Total');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Commented On');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Comments');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Commented By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':AN'.$row_num, 'thin');
		// $col_num++;
		// $sheet->cell($col_num. $row_num, function ($cell)  {
			// $cell->setValue('Comment List');
			// $cell->setAlignment('center');
			// $cell->setFont(array(
				// 'bold' => true
			// ));
		// });
		// $sheet->mergeCells('C' . $row_num . ':J' . $row_num);
		// $sheet->cell('C' . $row_num, function ($cell) use ($value1) {
			// $cell->setValue($value1);
		// });
	}

	private function setSubComplaintValue3($sheet, $group_val, $row_num, $col_num) {

		//$sheet->mergeCells($col_num. $row_num .':'.(++$col_num). $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) use ($group_val) {
			$cell->setValue($group_val);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Subcomplaint ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Sub Complaint');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell){
			$cell->setValue('Ticket#');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Guest Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		 $col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Guest Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Stay');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Department');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Location');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Created At');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Severity Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Created By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Assignee');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Resolution');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Sub-Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Completed By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Amount');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Service Recovery Total');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Commented On');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Comments');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Commented By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':X'.$row_num, 'thin');
		// $col_num++;
		// $sheet->cell($col_num. $row_num, function ($cell)  {
			// $cell->setValue('Comment List');
			// $cell->setAlignment('center');
			// $cell->setFont(array(
				// 'bold' => true
			// ));
		// });
		// $sheet->mergeCells('C' . $row_num . ':J' . $row_num);
		// $sheet->cell('C' . $row_num, function ($cell) use ($value1) {
			// $cell->setValue($value1);
		// });
	}

	private function setSubComplaintValue4($sheet, $group_val, $row_num, $col_num) {

		//$sheet->mergeCells($col_num. $row_num .':'.(++$col_num). $row_num);
		$sheet->cell($col_num. $row_num, function ($cell) use ($group_val) {
			$cell->setValue($group_val);
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Complaint ID');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell){
			$cell->setValue('Ticket#');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Guest Type');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		 $col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Guest Name');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Stay');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Location');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Severity');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Created At');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Created By');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;

		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Sub-Category');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Compensation');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Cost');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Comment');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Provider');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Created At');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$col_num++;
		$sheet->cell($col_num. $row_num, function ($cell)  {
			$cell->setValue('Status');
			$cell->setAlignment('center');
			$cell->setFont(array(
				'bold' => true
			));
		});
		$sheet->setBorder('A'.$row_num.':S'.$row_num, 'thin');
	}

	private function setComplaintWrapText($sheet, $label1, $value1, $height, $row_num) {
		$sheet->mergeCells('A' . $row_num . ':B' . $row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($label1) {
			$cell->setValue($label1);
			$cell->setAlignment('right');
			$cell->setFont(array(
				'bold' => true
			));
		});

		$sheet->mergeCells('C' . $row_num . ':T' . $row_num);
		$sheet->cell('C' . $row_num, function ($cell) use ($value1) {
			$cell->setValue($value1);
		});

		$sheet->getStyle('C' . $row_num)->getAlignment()->setWrapText(true);
		$sheet->setHeight($row_num, $height);
	}
	private function outputGuestDetailReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		//$filter = $data['filter'];

		if( !empty($data['fac_list']) )
		{
				$row_num += 2;
				$col_num='A';
				$this->setGuestHead($sheet,$row_num,$col_num);
				$row_num += 2;
				$top_row=0;
				$rows=0;
				//$count=0;
				//$col_num='B';
				//$this->setComplaintValue3($sheet, $group_val, $row_num, $col_num);
				//$row_num++;
			foreach ($data['fac_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';
				$this->setMergeRow($sheet, $rows, $row_num, $col_num, 0,20);
				$col_num++;
				// $sheet->setBorder('A' . $row_num . ':T' . $row_num, 'thin');

				 //$count=count($obj);
				//$this->setMergeRow($sheet, $key, $row_num, $col_num, 0,20);
/*
				$row_num++;
				//$row_num++;
				$date_count=0;
				$rows=0;
*/

					//$rows++;
					//$col_num++;
					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;
/*

					if($rows==1)
					{
						$top_row=$row_num;
					}
*/
					}
					$row_num++;

				}
				$row_num--;
$sheet->setBorder('A'.$top_row.':K'.$row_num, 'thin');
		return $row_num;
	}
	}

		private function outputITDetailReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		$filter = $data['filter'];

		if( !empty($data['it_list']) )
		{
				$row_num += 2;
				$col_num='A';
				$this->setITHead($sheet,$row_num,$col_num);
				$row_num += 2;
				$top_row=0;
				$rows=0;
				//$col_num='B';
				//$this->setComplaintValue3($sheet, $group_val, $row_num, $col_num);
				//$row_num++;
			foreach ($data['it_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';
				// $sheet->setBorder('A' . $row_num . ':T' . $row_num, 'thin');

				 //$count=count($obj);
				//$this->setMergeRow($sheet, $key, $row_num, $col_num, 0,20);
/*
				$row_num++;
				//$row_num++;
				$date_count=0;
				$rows=0;
*/

					//$rows++;
					//$col_num++;
					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;
/*

					if($rows==1)
					{
						$top_row=$row_num;
					}
*/
					}
					$row_num++;

				}
				$row_num--;
$sheet->setBorder('A'.$top_row.':Q'.$row_num, 'thin');
		return $row_num;
	}
	}
	private function outputENGDetailReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		$filter = $data['filter'];

		if( !empty($data['eng_list']) )
		{
				$row_num += 2;
				$col_num='A';
				$this->setENGHead($sheet,$row_num,$col_num);
				$row_num += 2;
				$top_row=0;
				$rows=0;
				//$col_num='B';
				//$this->setComplaintValue3($sheet, $group_val, $row_num, $col_num);
				//$row_num++;
			foreach ($data['eng_list'] as   $obj) {

				$rows++;
					if($rows==1)
					{
						$top_row=$row_num;
					}

				$col_num='A';
				// $sheet->setBorder('A' . $row_num . ':T' . $row_num, 'thin');

				 //$count=count($obj);
				//$this->setMergeRow($sheet, $key, $row_num, $col_num, 0,20);
/*
				$row_num++;
				//$row_num++;
				$date_count=0;
				$rows=0;
*/

					//$rows++;
					//$col_num++;
					foreach ($obj as $row){
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;
/*

					if($rows==1)
					{
						$top_row=$row_num;
					}
*/
					}
					$row_num++;

				}
				$row_num--;
$sheet->setBorder('A'.$top_row.':R'.$row_num, 'thin');
		return $row_num;
	}
	}

	private function outputFBSummaryReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		$filter = $data['filter'];

		if( !empty($data['datalist']) )
		{
			$row_num += 2;
			$col_num='A';
			$this->setFBHead($sheet,$row_num,$col_num);
			$row_num += 2;
			$top_row=0;
			$rows=0;
			foreach ($data['datalist'] as   $obj)
			{
				$rows++;
				if($rows==1)
				{
					$top_row = $row_num;
				}

				$col_num='A';

				foreach ($obj as $row)
				{
					$this->setMergeRow($sheet, $row, $row_num, $col_num, 0,20);
					$col_num++;
				}
				$row_num++;

			}
			$row_num--;
			$sheet->setBorder('A'.$top_row.':N'.$row_num, 'thin');

			return $row_num;
		}
	}
	private function outputComplaintDetailReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		$group_val = $data['group_by'];

		if( !empty($data['complaint_list']) )
		{
			$row_num += 2;
			$this->setComplaintHead($sheet,$row_num);
			$row_num += 2;
			$col_num = 'A';
			$this->setComplaintValue3($sheet, $group_val, $row_num, $col_num);
			$topmost_row = $row_num;
			$row_num++;

			foreach ($data['complaint_list'] as  $key => $obj) {
				$count=count($obj);

				$rows=0;
				foreach ($obj as $row) {
					$rows++;
					if($rows == 1)
					{
						$top_row = $row_num;
					}
					$col_num = 'R';
					$flag = 0;
					$count_com = 0;
					$count_comp = 0;
					$count_sub = 0;
					$row_total = 0;
					$sub_total = 0;
					if(!empty($row->comment_list))
					{
						$count_com=count($row->comment_list);
					}
					if(!empty($row->compensation))
					{
						$count_comp=count($row->compensation);
					}
					if( !empty($row->subcomplaintcount) )
					{
						$count_sub = count($row->subcomplaint);

					}
					if($count_comp > $count_sub)
					{
						 $row_total=$count_comp;
					}
					else if($count_comp < $count_sub)
					{
						$row_total=$count_sub;
					}
					else if($count_com < $count_sub)
					{
						$row_total=$count_sub;
					}
					else if($count_com < $count_comp)
					{
						$row_total=$count_comp;
					}
					else if($count_com > $count_sub)
					{
						$row_total=$count_com;
					}
					else if($count_com > $count_comp)
					{
						$row_total=$count_com;
					}
					else
					{
						$row_total=$count_sub;
					}

					if(!empty($row->comment_list))
					{
						$flag=1;
						$i=0;
						$temp_row=$row_num;
						foreach(($row->comment_list) as $comp)
						{
							$col_num='AL';
							$i++;
							$this->setMergeRow($sheet,  $comp->created_at, $row_num, $col_num,0, 30);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->comment, $row_num, $col_num,0, 24);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->commented_by, $row_num, $col_num, 0, 20);
							$this->setCellBorder($sheet, $row_num, $col_num,'none','none', 'none', 'thick');

							if($i==($count_com))
							{
								$col_num++;
								$row_num=$temp_row;

							}
							else
							{
								$row_num++;
							}


						}

					}
					if(!empty($row->compensation))
					{
						$flag=1;
						$i=0;
						$tot_comp=0;
						$temp_row=$row_num;
						foreach(($row->compensation) as $comp)
						{
							$col_num='R';
							$i++;
							$this->setMergeRow($sheet,  $comp->item_name, $row_num, $col_num,0, 30);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->cost, $row_num, $col_num,0, 24);

							$tot_comp=$tot_comp+$comp->cost;

							if($i==($count_comp))
							{
								$col_num++;
								$row_num=$temp_row;
								$this->setMergeRow($sheet,  $tot_comp, $row_num, $col_num, $row_total, 20);
								$this->setCellBorder($sheet, $row_num, $col_num,'none','thick', 'none', 'none');
							}
							else
							{
								$row_num++;
							}

						}
					}

					if(!empty($row->subcomplaintcount))
					{

						$flag = 1;
						$j = 0;
						$temp_row = $row_num;

						foreach ($row->subcomplaint as $sub)
						{
							/*
							if(!empty($sub->comp_list)){
								$flag=1;
								$p = 0;
								$tot_sub = 0;
								$temp_row1 = $row_num;
								$sub_total = count($sub->comp_list);
								foreach(($sub->comp_list) as $sub_comp){
										$col_num='AG';
										$p++;
									//	$j++;
									 //	$compensation .= $sub->comp_list[$p]->compensation . ' - ' . $data['currency'] . ' ' . $sub->comp_list[$p]->cost . ' - ' . $sub->comp_list[$p]->wholename . ' - ' . $sub->comp_list[$p]->department . $lfcr;
									 $this->setMergeRow($sheet, $sub_comp->compensation , $row_num, $col_num, 0, 30);
									 $col_num++;
									 $this->setMergeRow($sheet,  $sub_comp->cost, $row_num, $col_num,0, 24);
									 $tot_sub=$tot_sub+$sub_comp->cost;
									 if($p==$sub_total)
									{
										$col_num++;
										$row_num=$temp_row1;
										$this->setMergeRow($sheet,  $tot_sub, $row_num, $col_num, 0, 20);
										$this->setCellBorder($sheet, $row_num, $col_num,'none','thick', 'none', 'none');
									}
									else
									{
										$row_num++;
									}
								}

							  }
							 */
							$col_num = 'U';
							$j++;
							$this->setMergeRow($sheet,  sprintf('F%05d%s', $row->id, $sub->sub_label), $row_num, $col_num, 0, 15);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet, $sub->complaint_name, $row_num, $col_num, 0, 17);
							$col_num++;
							$this->setMergeRow($sheet,  $sub->department, $row_num, $col_num, 0, 17);
							$col_num++;
							$this->setMergeRow($sheet, $sub->status, $row_num, $col_num, 0, 15);
							$col_num++;
							$this->setMergeRow($sheet, date('d-M-Y H:i:s', strtotime($sub->created_at)), $row_num, $col_num, 0, 19);
							$col_num++;
							$this->setMergeRow($sheet, $sub->type, $row_num, $col_num, 0, 13);
							$col_num++;
							$this->setMergeRow($sheet, $sub->created_by, $row_num, $col_num,0, 30);
							$col_num++;
							$this->setMergeRow($sheet, $sub->assignee_name, $row_num, $col_num,0, 30);
							$col_num++;
							$sub_resolution = '';
							if( !empty($sub->resolution) )
							{
								//$category_label = 'Category:';
								$sub_resolution = $sub->resolution;
							}

							if(strlen($sub_resolution)<=150)
							{
								$this->setMergeRowText($sheet, $sub_resolution, $row_num, $col_num, 0, 60, 45);
							}
							else if(strlen($sub_resolution)>150 && strlen($sub_resolution)<=400)
							{
								$this->setMergeRowText($sheet, $sub_resolution, $row_num, $col_num, 0, 60, 125);
							}
							else if(strlen($sub_resolution)>400 && strlen($sub_resolution)<=700)
							{
								$this->setMergeRowText($sheet, $sub_resolution, $row_num, $col_num, 0, 60, 225);
							}
							else
							{
								$this->setMergeRowText($sheet, $sub_resolution, $row_num, $col_num, 0, 60, 350);
							}

							$col_num++;
							$sub_category = '';
							if( !empty($sub->category_name) )
							{
								//$category_label = 'Category:';
								$sub_category = $sub->category_name;
							}
							$this->setMergeRow($sheet, $sub_category, $row_num, $col_num,0, 15);

							$col_num++;
							$sub_subcategory = '';
							if( !empty($sub->subcategory_name) )
							{
								//$category_label = 'Category:';
								$sub_subcategory = $sub->subcategory_name;
							}
							$this->setMergeRow($sheet, $sub_subcategory, $row_num, $col_num, 0, 15);

							$col_num++;
							$sub_completed_by_name = 'Not Completed';
							if( $sub->status=='Completed' )
							{
								//$category_label = 'Category:';
								$sub_completed_by_name = $sub->completed_by_name;
							}
							$this->setMergeRow($sheet, $sub_completed_by_name, $row_num, $col_num, 0, 30);
							$col_num++;
							if(!empty($sub->completed_at)){
							$this->setMergeRow($sheet, date('d-M-Y H:i:s', strtotime($sub->completed_at)), $row_num, $col_num, 0, 30);
							}else{
								$this->setMergeRow($sheet, 'Not Completed', $row_num, $col_num, 0, 30);
							}
							$col_num++;
							if ($sub->closure_days > 86400){
								$this->setMergeRow($sheet, $this->seconds2human($sub->closure_days), $row_num, $col_num, 0, 30);
							$sheet->cell('AL' . $row_num . ':AL' . $row_num, function($cell) {
								$cell->setFontColor('#FF0000');

							});
							}
							else{
								$this->setMergeRow($sheet, $this->seconds2human($sub->closure_days), $row_num, $col_num, 0, 30);
							}
							$col_num++;
							$lfcr = chr(10);
							$compensation = '';
							$compensation_cost = '';
							$compensation_total = '';
							$compen_total = 0;
							for($p=0; $p < count($sub->comp_list) ;$p++) {
									 $compensation .= $sub->comp_list[$p]->compensation . $lfcr;
									  	$compensation_cost .= $data['currency'] . ' ' . $sub->comp_list[$p]->cost . $lfcr;
										$compen_total += $sub->comp_list[$p]->cost;

							}

							$compensation_total = $data['currency'] . ' ' . $compen_total;

							$this->setMergeRowText($sheet, $compensation , $row_num, $col_num, 0, 60, 60);
							$col_num++;
							$this->setMergeRowText($sheet, $compensation_cost , $row_num, $col_num, 0, 60, 60);
							$col_num++;
							if ($compen_total == 0)
								$this->setMergeRowText($sheet, '', $row_num, $col_num, 0, 60, 60);
							else
								$this->setMergeRowText($sheet, $compensation_total , $row_num, $col_num, 0, 60, 60);
							$this->setCellBorder($sheet, $row_num, $col_num,'none','thick', 'none', 'none');
							$col_num++;


								$row_num++;
							if($j==($count_sub))
							{
								$row_num=$temp_row;

							}

						}

					}

					$this->setMergeRow($sheet, $key, $row_num, 'A', $row_total, 20);
					$col_num='B';
					$this->setMergeRow($sheet, sprintf('F%05d', $row->id), $row_num, $col_num, $row_total, 10);
					$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
					$col_num++;
					$this->setMergeRow($sheet, $row->status, $row_num, $col_num, $row_total, 15);
					$col_num++;
					$this->setMergeRow($sheet, $row->wholename, $row_num, $col_num, $row_total, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->guest_type, $row_num, $col_num, $row_total,15);
					$col_num++;
					$this->setMergeRow($sheet, $row->guest_fullname, $row_num, $col_num, $row_total, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->feedback_type, $row_num, $col_num, $row_total,15);
					$col_num++;
					$this->setMergeRow($sheet, $row->feedback_source, $row_num, $col_num, $row_total, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->incident_time, $row_num, $col_num, $row_total, 18);
					$col_num++;
					$this->setMergeRow($sheet, $row->arrival  . ' to ' . $row->departure, $row_num, $col_num, $row_total, 25);
					$col_num++;
					$category_value = '';
					if( !empty($row->category_name) )
					{
						//$category_label = 'Category:';
						$category_value = $row->category_name;
					}
					$this->setMergeRow($sheet, $category_value, $row_num, $col_num, $row_total, 25);
					$col_num++;
					$this->setMergeRow($sheet,  $row->property_name, $row_num, $col_num, $row_total, 20);
					$col_num++;
					$this->setMergeRow($sheet,  $row->location, $row_num, $col_num, $row_total, 20);
					$col_num++;
					$this->setMergeRow($sheet, $row->severity_name, $row_num, $col_num, $row_total, 15);
					$col_num++;
					if(strlen($row->comment)<=150)
					{
						$this->setMergeRowText($sheet, $row->comment, $row_num, $col_num, $row_total, 60, 45);
					}
					else if(strlen($row->comment)>150 && strlen($row->comment)<=400)
					{
						$this->setMergeRowText($sheet, $row->comment, $row_num, $col_num, $row_total, 60, 125);
					}
					else if(strlen($row->comment)>400 && strlen($row->comment)<=700)
					{
						$this->setMergeRowText($sheet, $row->comment, $row_num, $col_num, $row_total, 60, 225);
					}
					else if (strlen($row->comment)>600)
					{
						$this->setMergeRowText($sheet, $row->comment, $row_num, $col_num, $row_total, 60, 350);
					}
					//$this->setMergeRowText($sheet, $row->comment, $row_num, $col_num, $row_total, 60, 45);
					$col_num++;
					if(strlen($row->initial_response)<=150)
					{
						$this->setMergeRowText($sheet, $row->initial_response, $row_num, $col_num, $row_total, 60, 45);
					}
					else if(strlen($row->initial_response)>150 && strlen($row->initial_response)<=400)
					{
						$this->setMergeRowText($sheet, $row->initial_response, $row_num, $col_num, $row_total, 60, 125);
					}
					else if(strlen($row->initial_response)>400 && strlen($row->initial_response)<=700)
					{
						$this->setMergeRowText($sheet, $row->initial_response, $row_num, $col_num, $row_total, 60, 225);
					}
					else if (strlen($row->initial_response)>700)
					{
						$this->setMergeRowText($sheet, $row->initial_response, $row_num, $col_num, $row_total, 60, 350);
					}

					$col_num++;
					if(strlen($row->solution)<=150)
					{
						$this->setMergeRowText($sheet, $row->solution, $row_num, $col_num, $row_total, 60, 45);
					}
					else if(strlen($row->solution)>150 && strlen($row->solution)<=400)
					{
						$this->setMergeRowText($sheet, $row->solution, $row_num, $col_num, $row_total, 60, 125);
					}
					else if(strlen($row->solution)>400 && strlen($row->solution)<=700)
					{
						$this->setMergeRowText($sheet, $row->solution, $row_num, $col_num, $row_total, 60, 225);
					}
					else if (strlen($row->solution)>700)
					{
						$this->setMergeRowText($sheet, $row->solution, $row_num, $col_num, $row_total, 60, 350);
					}
					$this->setCellBorder($sheet, $row_num, $col_num, 'none','thick', 'none', 'none');

					$sheet->setBorder('A'.$row_num.':AN'.$row_num, 'thin');

					if($row_total>0)
					{

						for($i=0;$i<$count_comp;$i++)
						{
							$sheet->setBorder('R'.($row_num+$i).':T'.($row_num+$i), 'thin');
						}
						for($i=0;$i<$count_sub;$i++)
						{
							$sheet->setBorder('U'.($row_num+$i).':AK'.($row_num+$i), 'thin');
						}
						for($i=0;$i<$count_com;$i++)
						{
							$sheet->setBorder('AL'.($row_num+$i).':AN'.($row_num+$i), 'thin');
						}
						$row_num=($row_num+$row_total);
					}
					else
					{
						$row_num++;
					}
				}
			}
		}

		return $row_num;

	}

	private function outputSubComplaintDetailReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		$group_val = $data['group_by'];

		if( !empty($data['sub_complaint']) )
		{
			$row_num += 2;
			$this->setSubComplaintHead($sheet,$row_num);
			$row_num += 2;
			$col_num = 'A';
			$this->setSubComplaintValue3($sheet, $group_val, $row_num, $col_num);
			$topmost_row = $row_num;
			$row_num++;
		//	echo json_encode($data['sub_complaint']);
			foreach ($data['sub_complaint'] as  $key => $obj) {
				$count=count($obj);

				$rows=0;
				foreach ($obj as $row) {
					$rows++;
					if($rows == 1)
					{
						$top_row = $row_num;
					}
					$col_num = 'S';
					$flag = 0;
					$count_com = 0;
					$count_comp = 0;

					$row_total = 0;
					if(!empty($row->comment_list))
					{
						$count_com=count($row->comment_list);
					}
					if(!empty($row->comp_list))
					{
						$count_comp=count($row->comp_list);
					}

					 if($count_com < $count_comp)
					{
						$row_total=$count_comp;
					}
					else
					{
						$row_total=$count_com;
					}


					if(!empty($row->comment_list))
					{
						$flag=1;
						$i=0;
						$temp_row=$row_num;
						foreach(($row->comment_list) as $comp)
						{
							$col_num='V';
							$i++;
							$this->setMergeRow($sheet,  $comp->created_at, $row_num, $col_num,0, 30);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->comment, $row_num, $col_num,0, 24);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->wholename, $row_num, $col_num, 0, 20);
							$this->setCellBorder($sheet, $row_num, $col_num,'none','none', 'none', 'thick');

							if($i==($count_com))
							{
								$col_num++;
								$row_num=$temp_row;

							}
							else
							{
								$row_num++;
							}


						}

					}
					if(!empty($row->comp_list))
					{
						$flag=1;
						$i=0;
						$tot_comp=0;
						$temp_row=$row_num;
						foreach(($row->comp_list) as $comp)
						{
							$col_num='S';
							$i++;
							$this->setMergeRow($sheet,  $comp->compensation, $row_num, $col_num,0, 30);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->cost, $row_num, $col_num,0, 24);

							$tot_comp=$tot_comp+$comp->cost;

							if($i==($count_comp))
							{
								$col_num++;
								$row_num=$temp_row;
								$this->setMergeRow($sheet,  $tot_comp, $row_num, $col_num, $row_total, 20);
								$this->setCellBorder($sheet, $row_num, $col_num,'none','thick', 'none', 'none');
							}
							else
							{
								$row_num++;
							}

						}
					}


					$this->setMergeRow($sheet, $key, $row_num, 'A', $row_total, 20);
					$col_num='B';
					$this->setMergeRow($sheet,sprintf('F%05d%s', $row->parent_id, $row->sub_label), $row_num, $col_num, $row_total, 10);
					$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
					$col_num++;
					$this->setMergeRow($sheet, $row->complaint_name, $row_num, $col_num, $row_total, 15);
					$col_num++;
					$this->setMergeRow($sheet, sprintf('F%05d', $row->parent_id), $row_num, $col_num, $row_total, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->guest_type, $row_num, $col_num, $row_total,15);
					$col_num++;
					$this->setMergeRow($sheet, $row->guest_fullname, $row_num, $col_num, $row_total, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->arrival  . ' to ' . $row->departure, $row_num, $col_num, $row_total, 18);
					$col_num++;
					$this->setMergeRow($sheet, $row->department, $row_num, $col_num, $row_total, 25);
					$col_num++;

					$this->setMergeRow($sheet, $row->location_name, $row_num, $col_num, $row_total, 25);
					$col_num++;
					$status_name = '';
					if ($row->status == 1){
						$status_name = 'Pending';
					}elseif ($row->status == 2){
						$status_name = 'Completed';
					}elseif ($row->status == 3){
						$status_name = 'Escalated';
					}elseif ($row->status == 4){
						$status_name = 'Re-routing';
					}elseif ($row->status == 5){
						$status_name = 'Canceled';
					}elseif ($row->status == 6){
						$status_name = 'Timeout';
					}else{
						$status_name = 'Re-opened';
					}
					$this->setMergeRow($sheet,  $status_name, $row_num, $col_num, $row_total, 20);
					$col_num++;
					$this->setMergeRow($sheet,  $row->created_at, $row_num, $col_num, $row_total, 20);
					$col_num++;
					$this->setMergeRow($sheet, $row->type, $row_num, $col_num, $row_total, 15);
					$col_num++;
					$this->setMergeRow($sheet, $row->created_by, $row_num, $col_num,0, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->assignee_name, $row_num, $col_num, $row_total, 15);
					$col_num++;
					if(strlen($row->resolution)<=150)
					{
						$this->setMergeRowText($sheet, $row->resolution, $row_num, $col_num, $row_total, 60, 45);
					}
					else if(strlen($row->resolution)>150 && strlen($row->resolution)<=400)
					{
						$this->setMergeRowText($sheet, $row->resolution, $row_num, $col_num, $row_total, 60, 125);
					}
					else if(strlen($row->resolution)>400 && strlen($row->resolution)<=700)
					{
						$this->setMergeRowText($sheet, $row->resolution, $row_num, $col_num, $row_total, 60, 225);
					}
					else if (strlen($row->resolution)>600)
					{
						$this->setMergeRowText($sheet, $row->resolution, $row_num, $col_num, $row_total, 60, 350);
					}
					//$this->setMergeRowText($sheet, $row->comment, $row_num, $col_num, $row_total, 60, 45);
					$col_num++;
					$this->setMergeRow($sheet, $row->category_name, $row_num, $col_num, $row_total, 15);
					$col_num++;
					$this->setMergeRow($sheet, $row->subcategory_name, $row_num, $col_num, $row_total, 15);
					$col_num++;
					$sub_completed_by_name = 'Not Completed';
							if( $row->status==2 )
							{
								//$category_label = 'Category:';
								$sub_completed_by_name = $row->completed_by_name;
							}
					$this->setMergeRow($sheet, $sub_completed_by_name, $row_num, $col_num, $row_total, 15);
					$col_num++;


					$this->setCellBorder($sheet, $row_num, $col_num, 'none','thick', 'none', 'none');

					$sheet->setBorder('A'.$row_num.':X'.$row_num, 'thin');

					if($row_total>0)
					{

						for($i=0;$i<$count_comp;$i++)
						{
							$sheet->setBorder('S'.($row_num+$i).':T'.($row_num+$i), 'thin');
						}

						for($i=0;$i<$count_com;$i++)
						{
							$sheet->setBorder('V'.($row_num+$i).':X'.($row_num+$i), 'thin');
						}
						$row_num=($row_num+$row_total);
					}
					else
					{
						$row_num++;
					}
				}
			}
		}

		return $row_num;

	}

	private function outputComplaintSummaryReport($sheet, $row_num, $data) {
		$group_val = $data['group_by'];

		$header_list = [];
		$row_num+=2;
		$header_list[] = $group_val;
		foreach ($data['summary_header'] as  $header) {

			$header_list[] = $header;
		}
		$total_info = 0;
        $total_minor = 0;
        $total_major = 0;
        $total_moderate = 0;
        $total_serious = 0;
        $total_tot = 0;

		$sheet->row($row_num, $header_list);
		$sheet->cell('A' . $row_num . ':G' . $row_num, function($cell) {
			$cell->setFontColor('#fafbfb');
			$cell->setBackground('#2c3e50');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});
		$row_num++;

		foreach ($data['complaint_summary'] as  $key =>$obj)
		{
			//$cell_list = [$key];
			//foreach ($data['summary_header'] as  $header) {
				$cell_list = [
						$key,
						$obj[$data['summary_header'][0]],
						$obj[$data['summary_header'][1]],
						$obj[$data['summary_header'][2]],
						$obj[$data['summary_header'][3]],
						$obj[$data['summary_header'][4]],
						$obj[$data['summary_header'][5]],
						//$obj[$data['summary_header'][6]],


				];

			//}
			$sheet->row($row_num, $cell_list);
			$row_num++;
			$total_info += $obj[$data['summary_header'][0]];
            $total_minor += $obj[$data['summary_header'][1]];
    	    $total_moderate += $obj[$data['summary_header'][2]];
            $total_major += $obj[$data['summary_header'][3]];
            $total_serious += $obj[$data['summary_header'][4]];
            $total_tot += $obj[$data['summary_header'][5]];
		}
		$cell_list = [
			 'Total',
			 strval($total_info),
			 strval($total_minor),
			 strval($total_moderate),
			 strval($total_major),
			 strval($total_serious),
			 strval($total_tot),
		];
		$sheet->row($row_num, $cell_list);
		$sheet->cell('A' . $row_num . ':G' . $row_num, function($cell) {

			$cell->setBackground('#CFD8DC');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});


				return $row_num;
	}

	function compensationStatus($val) {
	    $convert_val = '';
	    switch($val) {
	        case 0:
	            $convert_val = 'Complete Approved' ;
	            break;
	        case 1:
	            $convert_val ='On-route';
	            break;
	        case 2:
	            $convert_val ='Rejected';
	            break;
	        case 3:
	            $convert_val ='Returned';
	            break;
	        case 4:
	            $convert_val = 'Pending';
	            break;
	        default:
	            $convert_val = 'Complete Approved' ;
	            break;
	    }
	    return $convert_val;
	}

	private function outputCompensationDetailReport1($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		$group_val = $data['group_by'];

		if( !empty($data['complaint_list']) )
		{
			foreach ($data['complaint_list'] as  $key => $obj) {
				$row_num += 2;

				$this->setComplaintValue2($sheet, $group_val . ':', $key, $row_num);

				$row_num += 2;

				foreach ($obj as $row) {
					if( empty($row->compensation) )
						continue;

					foreach ($row->compensation as $comp)
					{
						$this->setComplaintValue2($sheet, 'Ticket#:', sprintf('C%05d', $comp->id), $row_num);
						$row_num++;
						$this->setComplaintValue($sheet, 'Compensation:', $comp->item_name, 'Cost:', $comp->cost, $row_num);
						$row_num++;
						$this->setComplaintValue($sheet, 'Comment:', $comp->comment, 'Date:', date('d-M-Y', strtotime($comp->created_at)), $row_num);
						$row_num++;
						$this->setComplaintValue($sheet, 'Provided By:', $comp->provider, 'Status:', $this->compensationStatus($comp->status), $row_num);
						$row_num += 2;
					}

					$this->setComplaintValue2($sheet, 'Created By:', $row->wholename, $row_num);
					$row_num++;
					$this->setComplaintWrapText($sheet, 'Feedback:', $row->comment, 45, $row_num);
					$row_num++;
					$this->setComplaintValue2($sheet, 'Severity:', $row->severity_name, $row_num);
					$row_num++;
					if( !empty($row->category_name) )
					{
						$this->setComplaintValue2($sheet, 'Cateogry:', $row->category_name, $row_num);
						$row_num++;
					}

					// sub complaint list
					if( empty($row->subcomplaint) )
						continue;

					$this->setComplaintValue2($sheet, 'Sub-complaint', '', $row_num);
					$row_num += 2;

					$sheet->cell('A' . $row_num, function($cell) {
						$cell->setFontColor('#ffffff');
					});

					$header_list = ['1111111', 'Date Created', 'Sub-complaint', 'Department', 'Status', 'Serverity', 'Category', 'Sub-category'];
					$sheet->row($row_num, $header_list);
					$sheet->cell('B' . $row_num . ':H' . $row_num, function($cell) {
						$cell->setFontColor('#fafbfb');
						$cell->setBackground('#2c3e50');
						$cell->setFont(array(
								'family'     => 'Calibri',
								'size'       => '11',
								'bold'       =>  true
						));
					});
					$row_num++;

					foreach ($row->subcomplaint as $sub)
					{
						$cell_list = [
							'',
							date('d-M-Y', strtotime($sub->created_at)),
							$sub->complaint_name,
							$sub->department,
							$sub->status,
							$sub->type,
							$sub->category_name,
							$sub->subcategory_name,
						];
						$sheet->row($row_num, $cell_list);
						$row_num++;
					}
					$row_num += 2;
				}
			}
		}

		return $row_num;
	}

	private function outputCompensationDetailReport($sheet, $row_num, $data) {
		$report_type = $data['report_type'];
		$report_by = $data['report_by'];
		$group_val = $data['group_by'];

		if( !empty($data['complaint_list']) )
		{
			$row_num += 2;
			$this->setCompComplaintHead($sheet,$row_num);
			$row_num += 2;
			$col_num = 'A';
			$this->setSubComplaintValue4($sheet, $group_val, $row_num, $col_num);
			$topmost_row = $row_num;
			$row_num++;
		//	echo json_encode($data['sub_complaint']);
			foreach ($data['complaint_list'] as  $key => $obj) {
				$count=count($obj);

				$rows=0;
				foreach ($obj as $row) {
					$rows++;
					if($rows == 1)
					{
						$top_row = $row_num;
					}
					$col_num = 'N';
					$flag = 0;
					$count_com = 0;
					

					$row_total = 0;
					if(!empty($row->compensation))
					{
						$count_com=count($row->compensation);
					}
					
					$row_total=$count_com;
					


					if(!empty($row->compensation))
					{
						$flag=1;
						$i=0;
						$temp_row=$row_num;
						foreach(($row->compensation) as $comp)
						{
							$col_num='N';
							$i++;
							$this->setMergeRow($sheet,  $comp->item_name, $row_num, $col_num,0, 30);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->cost, $row_num, $col_num,0, 24);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->comment, $row_num, $col_num, 0, 20);
							$this->setCellBorder($sheet, $row_num, $col_num,'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $comp->provider, $row_num, $col_num,0, 24);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  date('d-M-Y', strtotime($comp->created_at)), $row_num, $col_num,0, 24);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							$col_num++;
							$this->setMergeRow($sheet,  $this->compensationStatus($comp->status), $row_num, $col_num,0, 24);
							$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
							
							
							if($i==($count_com))
							{
								$col_num++;
								$row_num=$temp_row;

							}
							else
							{
								$row_num++;
							}


						}

					}
					


					$this->setMergeRow($sheet, $key, $row_num, 'A', $row_total, 20);
					$col_num='B';
					$this->setMergeRow($sheet,sprintf('F%05d', $row->id), $row_num, $col_num, $row_total, 10);
					$this->setCellBorder($sheet, $row_num, $col_num, 'none','none', 'none', 'thick');
					$col_num++;
					$this->setMergeRow($sheet, $row->status, $row_num, $col_num, $row_total, 15);
					$col_num++;
					$this->setMergeRow($sheet, $row->wholename, $row_num, $col_num, $row_total, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->guest_type, $row_num, $col_num, $row_total,15);
					$col_num++;
					$this->setMergeRow($sheet, $row->guest_fullname, $row_num, $col_num, $row_total, 30);
					$col_num++;
					$this->setMergeRow($sheet, $row->arrival  . ' to ' . $row->departure, $row_num, $col_num, $row_total, 18);
					$col_num++;
					$category_value = '';
					if( !empty($row->category_name) )
					{
						//$category_label = 'Category:';
						$category_value = $row->category_name;
					}
					$this->setMergeRow($sheet,  $row->location, $row_num, $col_num, $row_total, 20);
					$col_num++;
					$this->setMergeRow($sheet, $row->severity_name, $row_num, $col_num, $row_total, 15);
					$col_num++;
					
					$this->setMergeRow($sheet,  $row->created_at, $row_num, $col_num, $row_total, 20);
					$col_num++;
					
					$this->setMergeRow($sheet, $row->wholename, $row_num, $col_num,0, 30);
					$col_num++;

					$this->setMergeRow($sheet, $category_value, $row_num, $col_num, $row_total, 25);
					$col_num++;

					$this->setMergeRow($sheet, $category_value, $row_num, $col_num, $row_total, 25);
				//	$col_num++;
					
					
					


					$this->setCellBorder($sheet, $row_num, $col_num, 'none','thick', 'none', 'none');

					$sheet->setBorder('A'.$row_num.':T'.$row_num, 'thin');

					if($row_total>0)
					{


						for($i=0;$i<$count_com;$i++)
						{
							$sheet->setBorder('N'.($row_num+$i).':T'.($row_num+$i), 'thin');
						}
						$row_num=($row_num+$row_total);
					}
					else
					{
						$row_num++;
					}
				}
			}
		}

		return $row_num;

	}

	private function outputCompensationSummaryReport($sheet, $row_num, $data) {
		$row_num += 1;
		$sheet->cell('A' . $row_num . ':B' . $row_num, function ($cell) {
			$cell->setBackground('#CFD8DC');
		});

		$row_data = ['Department','Total Compensation'];
		$sheet->row($row_num, $row_data);
		$row_num += 1;

		foreach($data['dept_comp_list'] as  $row)
		{

			$sheet->cell('B' . $row_num . ':B' . $row_num, function ($cell) {
				$cell->setAlignment('right');
			});

				$row_data = [

					$row->department,
					$data['currency']. ' '. number_format($row->dept_cost,2)
				];
				$sheet->row($row_num, $row_data);
				$row_num += 1;
		}

		$sheet->cell('A' . $row_num . ':B' . $row_num, function($cell) {
			$cell->setFont(array(
					'bold'       =>  true
			));
		});
		$sheet->cell('B' . $row_num . ':B' . $row_num, function ($cell) {
			$cell->setAlignment('right');
		});
		$row_data1 = [

			'Total',
			$data['currency']. ' '. number_format($data['dept_total_cost'],2)
		];
		$sheet->row($row_num, $row_data1);
		$row_num += 2;

		$sheet->cell('A' . $row_num . ':E' . $row_num, function ($cell) {
			$cell->setBackground('#CFD8DC');
		});

		$row_data = ['Department','Location Type', 'Total Count', 'Total', 'Total Compensation'];
		$sheet->row($row_num, $row_data);
		$row_num += 1;

		$old_dept = '';
		$old_row_num = $row_num;

		foreach($data['dept_comp_list'] as  $row)
		{
			foreach($row->loc_type_comp_list as $key => $row1)
			{
				$sheet->cell('C' . $row_num . ':C' . $row_num, function ($cell) {
					$cell->setAlignment('center');
				});

				$sheet->cell('D' . $row_num . ':E' . $row_num, function ($cell) {
					$cell->setAlignment('right');
				});
				if($row->department == $old_dept){

			//	$sheet->mergeCells('A'.($old_row_num).':A'.$row_num);
			//	$sheet->mergeCells('E'.($old_row_num).':E'.$row_num);
				$row_data = [

					'',
					$row1->location_type,
					$row1->count,
					$data['currency']. ' '. number_format($row1->loc_type_cost,2),
					''
				];
				}
				else{
				$row_data = [

					$row->department,
					$row1->location_type,
					strval($row1->count),
					$data['currency']. ' '. number_format($row1->loc_type_cost,2),
					$data['currency']. ' '. number_format($row->dept_cost,2)
				];
				}
				$sheet->row($row_num, $row_data);
				$old_row_num = $row_num;
				$row_num += 1;
				$old_dept = $row->department;

			}

		}

		return $row_num;
	}

	private function seconds2human($ss) {
		$s = $ss%60;
		$m = floor(($ss%3600)/60);
		$h = floor(($ss%86400)/3600);
		$d = floor(($ss%2592000)/86400);
		$M = floor($ss/2592000);
		if ($d > 0)
			if ($d == 1)
				return "$d day";
			else
				return "$d days";
		else if ($h > 0)
			if ($h == 1)
				return "$h hour";
			else
				return "$h hours";
		else if ($m > 0)
            if ($m == 1)
                return "$m minute, $s seconds";
            else
                return "$m minutes, $s seconds";
		else if ($m == 0)
				return " $s seconds";
		else
				return " $s seconds";
		}

	private function outputComplaintDailySummaryReport($sheet, $row_num, $data) {
		// Table 1
		$row_num += 1;
		$sheet->mergeCells('A'.$row_num.':G'.$row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue('COMPLAINT BREAKDOWN FOR ' . date('d M Y', strtotime($data['start_time'])) );
			$cell->setAlignment('center');
			$cell->setBackground('#deebf6');
			$cell->setFont(array(
				'size' => '15',
				'bold' => true
			));
		});


		$row_num += 1;
		$sheet->cell('A' . $row_num . ':G' . $row_num, function($cell) {
			$cell->setBackground('#d0cece');
		});
		$row_data = ['Department', 'Location Type', '# Complaints', '#Open Complaints', '% Open Complaints', '# Closed Complaints', '% Closed Complaints'];
		$sheet->row($row_num, $row_data);
		$open_percent = 0;
 		$closed_percent = 0;
		$row_num += 1;

		foreach ($data['dept_wise'] as $key => $row){
			if ($row->total != 0){
			$open_percent = ($row->open * 100)/$row->total;
			$closed_percent = ($row->closed * 100) / $row->total;
			}
			if ($row->open >0){
				$sheet->cell('E' . $row_num . ':E' . $row_num, function ($cell) {

					$cell->setBackground('#FF0000');
				});
			}
		$row_data = [
						$row->department,
						$row->type,
						strval($row->total),
						$row->open,
						round($open_percent, 1) . '%',
						$row->closed,
						round($closed_percent, 1) . '%',
					];
		$sheet->row($row_num, $row_data);
		$row_num += 1;
		}

		// Table 2
		$row_num += 2;
		$sheet->mergeCells('A'.$row_num.':G'.$row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue('PERIODICAL CFS REPORTING Based on report date of feedback');
			$cell->wrap = true;
			$cell->setAlignment('center');
			$cell->setBackground('#deebf6');
			$cell->setFont(array(
				'size' => '15',
				'bold' => true
			));
		});

		$field_name_value = [
			['Report Date', date('d M Y', strtotime($data['start_time'])) . ' - ' . date('d M Y', strtotime($data['end_time']))],
			['Time', date('H:i', strtotime($data['start_time'])) . ' - ' . date('H:i', strtotime($data['end_time']))],
			['Occupancy', ''],


			['Total no. of Sub-complaints', $data['total_subcomplaint_count']],
			['Total no. of Open Sub-complaints', $data['total_subcomplaint_open_count'], '#00b050'],
			['Total amount of compensation cost (AED)', 'AED   ' . number_format($data['total_subcomplaint_compensation_cost'],2)],
			['Average compensation per complaint (AED)', 'AED   ' . number_format($data['average_subcomplaint_compensation_cost'],2)],
			['Average closure time per closed complaint (Based on reported date of feedback)', $this->seconds2human($data['closed_avg_days']), $data['closed_avg_days'] <= 86400 ? '#00b050' : '#FF0000'],
		];

		foreach($field_name_value as $row)
		{
			$row_num += 1;
			$sheet->mergeCells('A'.$row_num.':E'.$row_num);
			$sheet->mergeCells('F'.$row_num.':G'.$row_num);
			$sheet->cell('A' . $row_num, function ($cell) use ($row) {
				$cell->setValue($row[0]);
			});
			$sheet->cell('F' . $row_num, function ($cell) use ($row) {
				$cell->setValue($row[1]);
			});

			if( count($row) > 2 )
			{
				$sheet->cell('F' . $row_num, function ($cell) use ($row) {
					$cell->setBackground($row[2]);
				});
			}
		}

		// Category Name & Count
		$row_num += 1;
		$sheet->mergeCells('A'.$row_num.':E'.$row_num);
		$sheet->mergeCells('F'.$row_num.':G'.$row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setBackground('#bfbfbf');
			$cell->setValue('Total no. of Sub-Area (complaints)');
		});
		$sheet->cell('F' . $row_num, function ($cell) use ($data) {
			$cell->setBackground('#bfbfbf');
			$cell->setValue($data['total_subcomplaint_count']);
		});

		foreach($data['sub_area_list'] as $row)
		{
			if( $row->count != 0){
			$row_num += 1;
			$sheet->mergeCells('A'.$row_num.':E'.$row_num);
			$sheet->mergeCells('F'.$row_num.':G'.$row_num);
			$sheet->cell('A' . $row_num, function ($cell) use ($row) {
				$cell->setValue($row->name);
			});
			$sheet->cell('F' . $row_num, function ($cell) use ($row) {
				$cell->setValue($row->count);
			});
			}
		}

		// Sub Category Name & Count
		$row_num += 1;
		$sheet->mergeCells('A'.$row_num.':E'.$row_num);
		$sheet->mergeCells('F'.$row_num.':G'.$row_num);
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setBackground('#bfbfbf');
			$cell->setValue('Attributes (complaints)');
		});
		$sheet->cell('F' . $row_num, function ($cell) use ($data) {
			$cell->setBackground('#bfbfbf');
			$cell->setValue($data['total_subcomplaint_count']);
		});

		foreach($data['attrib_list'] as $row)
		{
			if( $row->count != 0){
			$row_num += 1;
			$sheet->mergeCells('A'.$row_num.':E'.$row_num);
			$sheet->mergeCells('F'.$row_num.':G'.$row_num);
			$sheet->cell('A' . $row_num, function ($cell) use ($row) {
				$cell->setValue($row->name);
			});
			$sheet->cell('F' . $row_num, function ($cell) use ($row) {
				$cell->setValue($row->count);
			});
		}
		}



		return $row_num;
	}

	private function outputComplaintConsolidatedReport($sheet, $row_num, $data) {
		$header_list = ['complaint id', 'sub-complaint id', 'guest type', 'first name', 'last name', 'room number', 'arrival', 'departure', 'nationality',
						'email', 'booking source', 'booking rate', 'company', 'type', 'source', 'requestor', 'job role', 'created time',
						'incident time', 'feedback', 'initial response', 'release comment', 'resolution', 'main status',
						'scategory', 'ssub-category', 'department', 'severity', 'location', 'location type', 'created at', 'created by',
						 'comment', 'initial response', 'sr amount', 'resolution', 'sub status', 'completed by', 'completed date'];
		$sheet->row($row_num, $header_list);
		$row_num++;

		$status_name_list = ['', 'Open', 'Completed', 'Escalated', 'Reassigned', 'Canceled', 'Timeout', 'Re-open'];

		foreach($data['main_complaint_list'] as $row)
		{
			$list = [sprintf('F%05d', $row->id), '', $row->guest_type, $row->fname, '', $row->room, 
			date('m/d/Y', strtotime($row->arrival)), date('m/d/Y', strtotime($row->departure)), $row->nationality_name,
						$row->email, $row->booking_src, $row->booking_rate, $row->company, $row->feedback_type, 
						$row->feedback_source, $row->wholename, $row->job_role, date('m/d/Y H:i:s', strtotime($row->created_at)),
						date('m/d/Y H:i:s', strtotime($row->incident_time)), $row->comment, 
						$row->initial_response, $row->comment, $row->solution, $row->status,
						'', '', '', '', '', '', '', '',
						 '', '', '', '', '', '', ''];

			$sheet->row($row_num, $list);
			$row_num++;
			foreach($data['sub_complaint_list'] as $sub)
			{
				if( $row->id != $sub->parent_id)
					continue;


				$list = [sprintf('F%05d', $row->id), sprintf('F%05d%s', $row->id, $sub->sub_label), $row->guest_type, 
				$row->fname, '', $row->room, date('m/d/Y', strtotime($row->arrival)), date('m/d/Y', strtotime($row->departure)), $row->nationality_name,
					$row->email, $row->booking_src, $row->booking_rate, $row->company, $row->feedback_type, 
					$row->feedback_source, $row->wholename, $row->job_role, date('m/d/Y H:i:s', strtotime($row->created_at)),
					date('m/d/Y H:i:s', strtotime($row->incident_time)), $row->comment, 
					$row->initial_response, $row->comment, $row->solution, $row->status,
					$sub->category_name, $sub->subcategory_name, $sub->department, $sub->severity_name, 
					$sub->location_name, $sub->location_type, $sub->created_at, $sub->created_by,
					$sub->comment, $sub->init_response, $sub->sub_comp, $sub->resolution, 
					$status_name_list[$sub->status], $sub->completed_by_name, $sub->completed_at];

				$sheet->row($row_num, $list);
				$row_num++;
			}
		}


		return $row_num;
	}

	private function outputComplaintConsolidatedReportCSV($sheet, $row_num, $data) {
		// Category Type Summary
		$summary = $data['category_type_summary'];
		$compensation_type_list = $summary['compensation_type_list'];
		$total_type_data = $summary['total_type_data'];
		$category_type_list = $summary['category_type_list'];

		$row_num += 3;

		$row_data = [
			"Sub Category",
			"Recurring issues"
		];

		foreach($compensation_type_list as $key => $row)
		{
			$row_data[] =  $row;
			$row_data[] =  '';
		}
		$sheet->row($row_num, $row_data);

		$row_num += 1;
		$row_data = [
			"",
			"Total issues"
		];

		foreach($compensation_type_list as $row)
		{
			$row_data[] =  'Number';
			$row_data[] =  'Amount';
		}
		$sheet->row($row_num, $row_data);

		$row_num += 1;
		$row_data = [
			"",
			$total_type_data->total_cnt
		];

		foreach($compensation_type_list as $key => $row)
		{
			$cnt_key = 'cnt' . $key;
			$amount_key = 'amount' . $key;
			$row_data[] =  $total_type_data->$cnt_key;
			$row_data[] =  $total_type_data->$amount_key;
		}

		$sheet->row($row_num, $row_data);

		foreach( $category_type_list as $row )
		{
			$row_num += 1;
			$row_data = [
				$row->category,
				$row->total_cnt
			];

			foreach($compensation_type_list as $key => $row1)
			{
				$cnt_key = 'cnt' . $key; $amount_key = 'amount' . $key;
				$row_data[] =  $row->$cnt_key;
				$row_data[] =  $total_type_data->$amount_key;
			}

			$sheet->row($row_num, $row_data);
		}

		return $row_num;
	}

	private function outputComplaintConsolidatedReportExcel($sheet, $row_num, $data) {
		$sheet->setWidth('A', 20);

		$summary = $data['source_summary'];
		$source_list = $summary['source_list'];
		$summary_by_source = $summary['summary_by_source'];

		// SOURCE BY SUMMARY REPORT Table
		$row_num += 3;
		$last_col_name = Functions::getExcelColumnNameFromNumber(count($source_list));
		$sheet->mergeCells("A$row_num:$last_col_name$row_num");
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue('SOURCE BY SUMMARY REPORT');
			$cell->setAlignment('center');
			$cell->setBackground('#2c3e50');
			$cell->setFontColor('#FFFFFF');
			$cell->setFont(array(
				'size' => '15',
				'bold' => true
			));
		});

		$row_num += 1;
		$sheet->cell("A$row_num:$last_col_name$row_num", function ($cell) use ($data) {
			$cell->setAlignment('center');
			$cell->setBackground('#8eaad8');
		});

		$row_data = ['Total'];
		foreach($source_list as $row)
			$row_data[] = $row->name;

		$sheet->row($row_num, $row_data);

		$row_num += 1;
		$row_data = [$summary_by_source->total_cnt];
		foreach($source_list as $key => $row)
		{
			$cnt_key = "cnt$key";
			$row_data[] = $summary_by_source->$cnt_key;
		}

		$sheet->row($row_num, $row_data);

		// KPI Summary Report
		$kpi_summary = $data['kpi_summary'];

		$row_num += 2;
		$sheet->mergeCells("A$row_num:J$row_num");
		$sheet->cell('A' . $row_num, function ($cell) use ($data) {
			$cell->setValue('KPI SUMMARY REPORT');
			$cell->setAlignment('center');
			$cell->setBackground('#2c3e50');
			$cell->setFontColor('#FFFFFF');
			$cell->setFont(array(
				'size' => '15',
				'bold' => true
			));
		});

		$sheet->mergeCells("A" . ($row_num + 1) . ":A" . ($row_num + 3));
		$sheet->cell("A" . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('1');
			$cell->setAlignment('center');
			$cell->setValignment('center');
		});

		$sheet->cell("A" . ($row_num + 4), function ($cell) use ($data) {
			$cell->setValue('2');
			$cell->setAlignment('center');
			$cell->setValignment('center');
		});

		$sheet->mergeCells("A" . ($row_num + 5) . ":A" . ($row_num + 6));
		$sheet->cell("A" . ($row_num + 5), function ($cell) use ($data) {
			$cell->setValue('3');
			$cell->setValignment('center');
			$cell->setAlignment('center');
		});
		$sheet->mergeCells("A" . ($row_num + 7) . ":A" . ($row_num + 8));
		$sheet->cell("A" . ($row_num + 7), function ($cell) use ($data) {
			$cell->setValue('4');
			$cell->setValignment('center');
			$cell->setAlignment('center');
		});
		$sheet->cell("A" . ($row_num + 1) . ":A" . ($row_num + 8), function ($cell) use ($data) {
			$cell->setBackground('##d9e1f1');
		});


		$kpi_report_label = [
			"Total no. of in-house guests",
			"Total of in-house guest complaints	(in-house, Post-Depature and Pre-Arrival count)",
			"Average no, of in-house guest complaints",
			"Total of visitor complaints (Outside Visitor and Other count)",
			"Total no. of CFS cases (1 case guest profile)",
			"Average closure time per closed complaint(Days)",
			"Total amount of compensation cost(AED)",
			"Average compensation cost per complaint(AED)",
		];

		$kpi_report_value = [
			$kpi_summary['total_checkin_guest'],
			$kpi_summary['inhouse_complaint'],
			$kpi_summary['avg_inhouse_complaint'] . "%",
			$kpi_summary['walkin_complaint'],
			$kpi_summary['total_complaint'],
			$kpi_summary['avg_closure_days'],
			"AED " . number_format($kpi_summary['total_comp'],2),
			"AED " . number_format($kpi_summary['avg_comp'],2),
		];

		for($i = 1; $i <= count($kpi_report_label); $i++)
		{
			$sheet->mergeCells("B" . ($row_num + $i) . ":I" . ($row_num + $i));
			$label = $kpi_report_label[$i - 1];
			$sheet->cell('B' . ($row_num + $i), function ($cell) use ($data, $label) {
				$cell->setValue($label);
				$cell->setBackground('#8eaad8');
			});

			$value = $kpi_report_value[$i - 1];
			$sheet->cell('J' . ($row_num + $i), function ($cell) use ($data, $value) {
				$cell->setValue($value);
				$cell->setAlignment('center');
			});
		}

		// Status Of Complaints
		$sheet->mergeCells("L$row_num:P$row_num");
		$sheet->cell('L' . $row_num, function ($cell) use ($data) {
			$cell->setValue('STATUS OF COMPLAINTS');
			$cell->setAlignment('center');
			$cell->setBackground('#2c3e50');
			$cell->setFontColor('#FFFFFF');
			$cell->setFont(array(
				'size' => '15',
				'bold' => true
			));
		});

		$sheet->setWidth('L', 20);
		$sheet->setWidth('M', 20);
		$sheet->setWidth('N', 20);
		$sheet->setWidth('O', 20);
		$sheet->setWidth('P', 20);

		$sheet->cell('L' . ($row_num + 1) . ":P" . ($row_num + 1), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('L' . ($row_num + 5) . ":L" . ($row_num + 5), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('L' . ($row_num + 8) . ":L" . ($row_num + 8), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('L' . ($row_num + 9) . ":P" . ($row_num + 9), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('L' . ($row_num + 2) . ":L" . ($row_num + 4), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});

		$sheet->cell('L' . ($row_num + 6) . ":L" . ($row_num + 7), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});

		$sheet->cell('M' . ($row_num + 5) . ":P" . ($row_num + 5), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});

		$sheet->cell('M' . ($row_num + 8) . ":P" . ($row_num + 8), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});


		$sheet->cell('M' . ($row_num + 1) . ":P" . ($row_num + 9), function ($cell) use ($data) {
			$cell->setAlignment('center');
		});

		$sheet->cell('L' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('Guest Status');
		});
		$sheet->cell('M' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('Open');
		});
		$sheet->cell('N' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('Re-open');
		});
		$sheet->cell('O' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('Closed');
		});
		$sheet->cell('P' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('Total Cases');
		});

		$status_label_array = [
			"In-house Guest",
			"Post Departure",
			"Pre-arrival",
			"Total",
			"Outside Visitor",
			"Others*",
			"Total",
			"Grand Total",
		];

		$status_key_array = [
			"in_house",
			"post_departure",
			"pre_arrival",
			"total1",
			"outside_visitor",
			"others",
			"total2",
			"grand_total",
		];

		$summary = $data['status_summary'];

		foreach($status_label_array as $key => $row)
		{
			$sheet->cell('L' . ($row_num + $key + 2), function ($cell) use ($row) {
				$cell->setValue($row);
			});

			$row_data = $summary[$status_key_array[$key]];

			$sheet->cell('M' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue($row_data->open_cnt);
			});
			$sheet->cell('N' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue($row_data->reopen_cnt);
			});
			$sheet->cell('O' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue($row_data->closed_cnt);
			});
			$sheet->cell('P' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue($row_data->total_cnt);
			});
		}


		// OSURE RATE OF COMPLAINTS
		$sheet->mergeCells("R$row_num:V$row_num");
		$sheet->cell('R' . $row_num, function ($cell) use ($data) {
			$cell->setValue('CLOSURE RATE OF COMPLAINTS');
			$cell->setAlignment('center');
			$cell->setBackground('#2c3e50');
			$cell->setFontColor('#FFFFFF');
			$cell->setFont(array(
				'size' => '15',
				'bold' => true
			));
		});

		$sheet->setWidth('R', 20);
		$sheet->setWidth('S', 20);
		$sheet->setWidth('T', 20);
		$sheet->setWidth('U', 20);
		$sheet->setWidth('V', 20);

		$sheet->cell('R' . ($row_num + 1) . ":V" . ($row_num + 1), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('R' . ($row_num + 5) . ":R" . ($row_num + 5), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('R' . ($row_num + 8) . ":R" . ($row_num + 8), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('R' . ($row_num + 9) . ":V" . ($row_num + 9), function ($cell) use ($data) {
			$cell->setBackground('#8eaad8');
		});

		$sheet->cell('R' . ($row_num + 2) . ":R" . ($row_num + 4), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});

		$sheet->cell('R' . ($row_num + 6) . ":R" . ($row_num + 7), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});

		$sheet->cell('S' . ($row_num + 5) . ":V" . ($row_num + 5), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});

		$sheet->cell('S' . ($row_num + 8) . ":V" . ($row_num + 8), function ($cell) use ($data) {
			$cell->setBackground('#d9e1f1');
		});


		$sheet->cell('S' . ($row_num + 1) . ":V" . ($row_num + 9), function ($cell) use ($data) {
			$cell->setAlignment('center');
		});

		$sheet->cell('R' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('Guest Status');
		});
		$sheet->cell('S' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('Within 24hr');
		});
		$sheet->cell('T' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('%');
		});
		$sheet->cell('U' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('About 24hrs');
		});
		$sheet->cell('V' . ($row_num + 1), function ($cell) use ($data) {
			$cell->setValue('%');
		});

		$summary = $data['closure_rate_summary'];

		foreach($status_label_array as $key => $row)
		{
			$sheet->cell('R' . ($row_num + $key + 2), function ($cell) use ($row) {
				$cell->setValue($row);
			});

			$row_data = $summary[$status_key_array[$key]];

			$sheet->cell('S' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue($row_data->within_cnt);
			});
			$sheet->cell('T' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue(number_format($row_data->within_percent,2) . "%");
			});
			$sheet->cell('U' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue($row_data->about_cnt);
			});
			$sheet->cell('V' . ($row_num + $key + 2), function ($cell) use ($row_data) {
				$cell->setValue(number_format($row_data->about_percent,2) . "%");
			});
		}

		// Category Type Summary
		$summary = $data['category_type_summary'];
		$compensation_type_list = $summary['compensation_type_list'];
		$total_type_data = $summary['total_type_data'];
		$category_type_list = $summary['category_type_list'];

		$row_num += 11;

		$row_data = [
			"Sub Category",
			"Recurring issues"
		];

		foreach($compensation_type_list as $key => $row)
		{
			$row_data[] =  $row;
			$row_data[] =  $row;

			$col_name1 = Functions::getExcelColumnNameFromNumber(2 * $key + 2);
			$col_name2 = Functions::getExcelColumnNameFromNumber(2 * $key + 3);
			$sheet->mergeCells("$col_name1$row_num:$col_name2$row_num");
		}
		$sheet->row($row_num, $row_data);

		$sheet->mergeCells("A$row_num:A" . ($row_num + 2));

		$row_num += 1;

		$row_data = [
			"Sub Category",
			"Total issues"
		];

		foreach($compensation_type_list as $row)
		{
			$row_data[] =  'Number';
			$row_data[] =  'Amount';
		}
		$sheet->row($row_num, $row_data);

		$row_num += 1;
		$row_data = [
			"Sub Category",
			$total_type_data->total_cnt
		];

		foreach($compensation_type_list as $key => $row)
		{
			$cnt_key = 'cnt' . $key;
			$amount_key = 'amount' . $key;
			$row_data[] =  strval($total_type_data->$cnt_key);
			$row_data[] =  "AED " . number_format($total_type_data->$amount_key,2);
		}

		$sheet->row($row_num, $row_data);

		foreach( $category_type_list as $row )
		{
			$row_num += 1;
			$row_data = [
				$row->category,
				$row->total_cnt
			];

			foreach($compensation_type_list as $key => $row1)
			{
				$cnt_key = 'cnt' . $key; $amount_key = 'amount' . $key;
				$row_data[] =  strval($row->$cnt_key);
				$row_data[] =  "AED " . number_format($row->$amount_key,2);
			}

			$sheet->row($row_num, $row_data);
		}

		return $row_num;
	}

	private function outputLocationSubcategorySummaryReport($sheet, $row_num, $data) {
		// Table 1
		$row_num += 3;

		foreach($data['dept_loctype_subcategory'] as $row)
		{
			$sheet->cell('A' . $row_num . ':C' . $row_num, function($cell) {
				$cell->setFontColor('#FF0000');
				$cell->setFont(array(
					'bold' => true
				));
			});
			$row_data = [$row->department];
			$sheet->row($row_num, $row_data);
			$row_num++;
/*
			$row_data = ["Location Type: $row->loc_type_name_list"];
			$sheet->row($row_num, $row_data);
			$row_num++;
*/
			foreach($row->loc_type_list as $row1)
			{
				if(count($row1->subcategory_count) > 0)
				{
					$row_num++;

					$row_data = ["$row->department - $row1->type"];
					$sheet->row($row_num, $row_data);
					$row_num++;

					$sheet->cell('A' . $row_num . ':C' . $row_num, function($cell) {
						$cell->setBackground('#d0cece');
					});
				//	$sheet->mergeCells('A'.$row_num.':C'.$row_num);
				//	$sheet->mergeCells('D'.$row_num.':E'.$row_num);
				//	$sheet->mergeCells('F'.$row_num.':G'.$row_num);

					$row_data = ['Sub-category','Percent',  'Count'];
					$sheet->row($row_num, $row_data);
					$row_num++;

					foreach($row1->subcategory_count as $row2)
					{
					//	$sheet->mergeCells('A'.$row_num.':C'.$row_num);
					//	$sheet->mergeCells('D'.$row_num.':E'.$row_num);
					//	$sheet->mergeCells('F'.$row_num.':G'.$row_num);

						$row_data = [$row2->subcategory_name,  number_format($row2->percent,1) . '%' ,  strval($row2->cnt)];
						$sheet->row($row_num, $row_data);
						$row_num++;
					}

				//	$sheet->mergeCells('A'.$row_num.':C'.$row_num);
				//	$sheet->mergeCells('D'.$row_num.':E'.$row_num);
				//	$sheet->mergeCells('F'.$row_num.':G'.$row_num);
				$sheet->cell('B' . $row_num . ':C' . $row_num, function($cell) {
					$cell->setFont(array(
						'bold' => true
					));
				});
					$row_data = [ '', "Total" ,  strval($row1->subcategory_total_count)];
					$sheet->row($row_num, $row_data);
					$row_num++;
				}
			}
		}

		return $row_num;
	}

	private function outputLocationReponseRateSummaryReport($sheet, $row_num, $data) {
		// Table 1
		$row_num += 1;

		$sheet->mergeCells('A'.$row_num.':A'.($row_num+2));
		$sheet->mergeCells('B'.$row_num.':B'.($row_num+1));
		$sheet->mergeCells('C'.$row_num.':C'.($row_num+1));
		$sheet->mergeCells('D'.$row_num.':D'.($row_num+1));
		$sheet->mergeCells('E'.$row_num.':N'.$row_num);

		$sheet->cell('A' . $row_num . ':N' . ($row_num + 2), function($cell) {
			$cell->setBackground('#d0cece');
			$cell->setAlignment('center');
		});

		$row_data = ["Location", "Open", "Re-open", "Closed", "Closed", "", "", "", "", "", "", "", "", ""];
		$sheet->row($row_num, $row_data);
		$row_num++;

		$row_data = ["Location", "Open", "Re-open", "Closed", "Major", "", "", "Minor", "", "", "Overal Total", "", "", ""];
		$sheet->row($row_num, $row_data);
		$row_num++;

		$row_data = ["Location", "Total", "Total", "Total", "Total", "<=1 day", "% Response Rate", "Total", "<=7 days", "% Response Rate", "<=1 days", "% Response Rate", "<=7 days", "% Response Rate"];
		$sheet->row($row_num, $row_data);
		$row_num++;

		foreach($data['response_rate_data'] as $row)
		{
			$row_data = [
				$row->location_name,
                strval($row->open_cnt),
                strval($row->reopen_cnt),
                strval($row->closed_cnt),
                strval($row->major_total_cnt),
                strval($row->major_one_day_cnt),
                number_format($row->major_one_day_percent,1) . "%",
                strval($row->minor_total_cnt),
                strval($row->minor_seven_day_cnt),
                number_format($row->minor_seven_day_percent,1) . "%",
                strval($row->closed_one_day_cnt),
                number_format($row->closed_one_day_percent,1) . "%",
                strval($row->closed_seven_day_cnt),
                number_format($row->closed_seven_day_percent,1) . "%"
			];
			$sheet->row($row_num, $row_data);
			$row_num++;
		}

		return $row_num;
	}

	private function outputComplaintMonthlySummaryReport($sheet, $row_num, $data) {
		// Table 1
		$row_num += 3;

		$key_list = ['inhouse', 'walkin', 'checkout', 'housecomplaint', 'arrival', 'total'];
		$header_list = ['IN_HOUSE', 'WALK-IN', 'CHECKOUT', 'HOUSE COMPLAINT', 'ARRIVAL', 'TOTAL'];

		$sheet->mergeCells('A'.$row_num.':I'.($row_num+1));
		$sheet->mergeCells('J'.$row_num.':AM'.($row_num));

		$sheet->cell('A' . $row_num . ':AM' . ($row_num + 2), function($cell) {
			$cell->setBackground('#d0cece');
			$cell->setAlignment('center');
		});


		$row_data = ["Summary", "", "", "", "", "", "", "", ""];
		foreach($key_list as $row)
			$row_data = array_merge($row_data, ["","","","",""]);

		$sheet->row($row_num, $row_data);
		$row_num++;

		$sheet->mergeCells('J'.$row_num.':N'.($row_num));
		$sheet->mergeCells('O'.$row_num.':S'.($row_num));
		$sheet->mergeCells('T'.$row_num.':Y'.($row_num));
		$sheet->mergeCells('Z'.$row_num.':AD'.($row_num));
		$sheet->mergeCells('AE'.$row_num.':AI'.($row_num));
		$sheet->mergeCells('AJ'.$row_num.':AM'.($row_num));

		$row_data = ["Summary", "", "", "", "", "", "", "", ""];
		foreach($key_list as $num => $row)
			$row_data = array_merge($row_data, [$header_list[$num],"","","",""]);
		$sheet->row($row_num, $row_data);
		$sheet->cell('Z' . $row_num, function($cell) {
			$cell->setValue('HOUSE COMPLAINT');
		});
		$sheet->cell('AE' . $row_num, function($cell) {
			$cell->setValue('ARRIVAL');
		});
		$sheet->cell('AJ' . $row_num, function($cell) {
			$cell->setValue('TOTAL');
		});

		$row_num++;

		$row_data = ["Month",
						"Average no. of in-house guest complaint",
						"Average no. of visitor complaints",
						"Total no. of complaints",
						"Open Complaints",
						"Closed Complaints",
						"Total Compensation Cost",
						"Average compensation cost per complaint",
						"Overal Average closure time"
					];
		foreach($key_list as $num => $row)
			$row_data = array_merge($row_data, ["Total","Total within 24hrs","% withn 24","Total above 24hrs","% above 24hrs"]);

		$sheet->row($row_num, $row_data);
		$row_num++;

		foreach($data['monthly_data_list'] as $row)
		{
			$row_data = [
							$row->year_month1,
							number_format($row->avg_inhouse_percent,1) .'%',
							number_format($row->avg_walkin_percent,1) .'%',
							$row->total_cnt,
							$row->open_cnt,
							$row->total_closed_cnt,
							'AED '. number_format($row->total_cost,2),
							'AED '. number_format($row->avg_comp,2),
							$row->avg_closure_time,
					];

			foreach($key_list as $num => $row1)
			{
				$closed_cnt_key = $row1 . "_closed_cnt";
				$within_closed_cnt_key = $row1 . "_within_closed_cnt";
				$above_closed_cnt_key = $row1 . "_above_closed_cnt";
				$within_closed_percent_key = $row1 . "_within_closed_percent";
				$above_closed_percent_key = $row1 . "_above_closed_percent";

				$row_data = array_merge($row_data, [
														$row->$closed_cnt_key,
														$row->$within_closed_cnt_key,
														number_format($row->$within_closed_percent_key,1) .'%',
														$row->$above_closed_cnt_key,
														number_format($row->$above_closed_percent_key,1) .'%'
													]);
			}
			$sheet->row($row_num, $row_data);
			$row_num++;
		}

		return $row_num;
	}

	public function getEngineeringReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'Date');

		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);

		$report['staff_tag'] = $request->get('staff_tags','[]');
		$report['staff_tags'] = json_decode($report['staff_tag']);

		$report['status_tag'] = $request->get('status_tags','[]');
		$report['status_tags'] = json_decode($report['status_tag']);

		$report['wo_status_tag'] = $request->get('wo_status_tags','[]');
		$report['wo_status_tags'] = json_decode($report['wo_status_tag']);

		$report['location_tag'] = $request->get('location_tags','[]');
		$report['location_tags'] = json_decode($report['location_tag']);

		$report['category_tag'] = $request->get('category_tags','[]');
		$report['category_tags'] = json_decode($report['category_tag']);

		$report['equip_tag'] = $request->get('equip_tags','[]');
		$report['equip_tags'] = json_decode($report['equip_tag']);

		$report['equip_id_tag'] = $request->get('equip_id_tags','[]');
		$report['equip_id_tags'] = json_decode($report['equip_id_tag']);


		$report['orderby'] = $request->get('field', 'created_at');
		$report['sort'] = $request->get('sort', 'asc');
		$report['property_id'] = $request->get('property_id', '4');
		$report['user_id'] = $request->get('user_id',0);
		$report['wo_flag'] = $request->get('wo_flag', 'false');

		return $this->makeEngineeringReportData($report);

	}

	public function makeEngineeringReportData($report)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');


		$report_type = $report['report_type'];
		$report_by = $report['report_by'];


		if($report_by == "Work Request") {
			$ret = $this->makeEngineeringReportDataByWR($report);
		}else if($report_by == "Work Order") {
			$ret = $this->makeEngineeringReportDataByWO($report);
		}
		else {
			$ret = $this->makeEngineeringReportDataByWR($report);
		}

		return $ret;
	}


	public function makeEngineeringReportDataByWR($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$staff_tag = $report['staff_tag'];
		$staff_tags = $report['staff_tags'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$wo_status_tag = $report['wo_status_tag'];
		$wo_status_tags = $report['wo_status_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];

		$category_tag = $report['category_tag'];
		$category_tags = $report['category_tags'];

		$equip_tag = $report['equip_tag'];
		$equip_tags = $report['equip_tags'];

		$equip_id_tag = $report['equip_id_tag'];
		$equip_id_tags = $report['equip_id_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];
		$user_id = $report['user_id'];
		$wo_flag = $report['wo_flag'];

		$ret = [];

		$wr_query = DB::table('eng_repair_request as er')
            ->leftJoin('eng_request_category as erc', 'er.category_id', '=', 'erc.id')
            ->leftJoin('eng_request_subcategory as ers', 'er.sub_category_id', '=', 'ers.id')
            ->leftJoin('eng_equip_list as eq', 'er.equipment_id', '=', 'eq.id')
            ->leftJoin('common_users as cu', 'er.requestor_id', '=', 'cu.id')
            ->leftJoin('common_users as cua', 'er.assignee', '=', 'cua.id')
            ->leftJoin('eng_supplier as es', 'er.supplier_id', '=', 'es.id')
            ->leftJoin('common_job_role as jr', 'cu.job_role_id', '=', 'jr.id')
            ->leftJoin('common_property as cp', 'er.property_id', '=', 'cp.id')
            ->leftjoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
            ->leftJoin('services_location as sl', 'er.location_id', '=', 'sl.id')
            ->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
            ->leftJoin('eng_contracts as ec', 'er.requestor_id', '=', 'ec.id')
            ->leftJoin('eng_tenant as et', 'er.requestor_id', '=', 'et.id')
            ->where('er.property_id', $property_id)
        //    ->whereIn('er.property_id', $property_list)
            ->whereRaw(sprintf("DATE(er.created_at) >= '%s' and DATE(er.created_at) <= '%s'", $start_time, $end_time))
            ->where('er.delete_flag', 0);

        // ->where('time', '>', $last_time);
		

		if( !empty($status_tags ) )
		$wr_query->whereIn('er.status_name', $status_tags);

		if( count($category_tags) > 0 )
            $wr_query->whereIn('er.category_id', $category_tags);

		if( count($location_tags) > 0 )
            $wr_query->whereIn('er.location_id', $location_tags);

		if( count($equip_tags) > 0 )
            $wr_query->whereIn('er.equipment_id', $equip_tags);

		if( count($equip_id_tags) > 0 )
            $wr_query->whereIn('eq.equip_id', $equip_id_tags);



		$sub_count_query = clone $wr_query;
		$data_query = clone $wr_query;
        $data_list = $data_query
            ->select(DB::raw('er.*, erc.name as category_name, eq.equip_id as equip_id, eq.name as equip_name,
                CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, ec.leasor, et.name as tenant_name,
                CONCAT_WS(" ", cua.first_name, cua.last_name) as assignee_name, 
                es.supplier,
                sl.name as location_name, slt.type as location_type,
                cp.name as property_name'))
			->get();

			for($i = 0 ; $i < count($data_list) ; $i++) {
                EngRepairRequest::getStaffGroups($data_list[$i]);
            }

            if( !empty($staff_tags) )
            {

                $assignee_id_list = $staff_tags;

                // assignee filter
                $data_list = array_filter($data_list, function($row) use ($assignee_id_list) {
                    return (count(array_filter($row->assignee_list, function($row1) use ($assignee_id_list) {
                        return in_array($row1->staff_name, $assignee_id_list);
                    })) > 0);
                });

            }
            $data_list = array_merge($data_list, array());

		foreach( $data_list as $data){
				$data->requestor_name = '';
				if ($data->requestor_type == 'User'){
				   $data->requestor_name  = $data->wholename;
				}
				if ($data->requestor_type == 'Leasor'){
				   $data->requestor_name  = $data->leasor;
				}
				if ($data->requestor_type == 'Tenant'){
				   $data->requestor_name  = $data->tenant_name;
				}

				$staff = EngRepairStaff::getStaffGroupEmails($data->id);
				if( !empty($staff['assignee_name']) )
					$data->assignee_name = $staff['assignee_name'];

				$data->wr_id = 'WR' . $this->getDailyId($data);
			}

		$count_query = clone $wr_query;
        $totalcount = $count_query->count();

        $ret['code'] = 200;
        $ret['message'] = '';
        $ret['datalist'] = $data_list;
        $ret['totalcount'] = $totalcount;

        $data_query = clone $sub_count_query;
        $subcount = $data_query
            ->select(DB::raw("
						count(*) as total,
						COALESCE(sum(er.status_name = 'Pending'), 0) as pending,
						COALESCE(sum(er.status_name = 'Assigned'), 0) as assigned,
						COALESCE(sum(er.status_name = 'On Hold'), 0) as hold,
						COALESCE(sum(er.status_name = 'In Progress'), 0) as progress,
						COALESCE(sum(er.status_name = 'Completed'), 0) as completed,
						COALESCE(sum(er.status_name = 'Rejected'), 0) as rejected,
						COALESCE(sum(er.status_name = 'Closed'), 0) as closed					
						"))
            ->first();

        $ret['subcount'] = $subcount;


		$wo_query = DB::table('eng_workorder as ew')
            ->leftJoin('eng_equip_list as eel', 'ew.equipment_id', '=', 'eel.id')
            ->leftJoin('eng_checklist as ecl', 'ew.checklist_id', '=', 'ecl.id')
            ->leftJoin('eng_repair_request as err', 'ew.request_id', '=', 'err.id')
            ->leftJoin('common_users as cua', 'err.assignee', '=', 'cua.id')
            ->leftJoin('services_location as sl', 'ew.location_id', '=', 'sl.id')
            ->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
            ->leftJoin('common_property as cp', 'ew.property_id', '=', 'cp.id')
            ->where('ew.property_id', $property_id)
			->where('ew.request_flag', 1)
			->whereRaw(sprintf("DATE(ew.created_date) >= '%s' and DATE(ew.created_date) <= '%s'", $start_time, $end_time));

		if( count($location_tags) > 0 )
        	$wo_query->whereIn('ew.location_id', $location_tags);

		if( count($equip_tags) > 0 )
        	$wo_query->whereIn('ew.equipment_id', $equip_tags);

		if( count($equip_id_tags) > 0 )
        	$wo_query->whereIn('eel.equip_id', $equip_id_tags);

			$wo_sub_count_query = clone $wo_query;
			$wo_data_query = clone $wo_query;
			$wo_data_list = $wo_data_query
						->orderBy('created_date', $sort)
						->select(DB::raw('ew.*, DATEDIFF(CURTIME(), ew.start_date) as age_days, eel.image_url as picture,  eel.name as equipment_name, eel.equip_id as eq_id, ew.start_date, ecl.name as checklist_name,
								ew.end_date, CONCAT_WS(" ", cua.first_name, cua.last_name) as assignee_name, err.assignee,
								sl.name as location_name, slt.type as location_type, err.ref_id' ))
						->get();
	
	
	
			for($i = 0 ; $i < count($wo_data_list) ; $i++) {
					WorkOrder::getWorkorderDetail($wo_data_list[$i]);
			}
	
			if( !empty($staff_tags) )
			{
					// assignee filter
					$wo_data_list = array_filter($wo_data_list, function($row) use ($staff_tags) {
						return (count(array_filter($row->assigne_list, function($row1) use ($staff_tags) {
							return in_array($row1->assignee_name, $staff_tags);
						})) > 0);
					});
	
			}
	
			$wo_data_list = array_merge($wo_data_list, []);
	
			foreach( $wo_data_list as $data){
				$data->wo_id = WorkOrder::getDailyId($data);
			}
	
			$wo_data_list = array_merge($wo_data_list, []);
	
			$wo_data_query = clone $wo_sub_count_query;
			$wo_subcount = $wo_data_query
				->select(DB::raw("
							count(*) as total,
							COALESCE(sum(ew.status = 'Pending'), 0) as pending,
							COALESCE(sum(ew.status = 'In Progress'), 0) as progress,
							COALESCE(sum(ew.status = 'On Hold'), 0) as hold,
							COALESCE(sum(ew.status = 'Completed'), 0) as completed				
							"))
				->first();
	
			$ret['wo_subcount'] = $wo_subcount;
			$ret['wo_datalist'] = $wo_data_list;

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$ret['currency'] = $currency->value;
		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		$ret['staff_tags'] = $staff_tags;
		$ret['status_tags'] = $status_tags;
		$ret['equip_tags'] = $equip_tags;
		$ret['equip_id_tags'] = $equip_id_tags;
		$ret['location_tags'] = $location_tags;
		$ret['category_tags'] = $category_tags;
		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['wo_flag'] = $wo_flag;

		return $ret;

	}


	public function makeEngineeringReportDataByWO($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$staff_tag = $report['staff_tag'];
		$staff_tags = $report['staff_tags'];

		$wo_status_tag = $report['wo_status_tag'];
		$wo_status_tags = $report['wo_status_tags'];

		$location_tag = $report['location_tag'];
		$location_tags = $report['location_tags'];


		$equip_tag = $report['equip_tag'];
		$equip_tags = $report['equip_tags'];

		$equip_id_tag = $report['equip_id_tag'];
		$equip_id_tags = $report['equip_id_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];
		$user_id = $report['user_id'];

		$ret = [];

		$query = DB::table('eng_workorder as ew')
            ->leftJoin('eng_equip_list as eel', 'ew.equipment_id', '=', 'eel.id')
            ->leftJoin('eng_checklist as ecl', 'ew.checklist_id', '=', 'ecl.id')
            ->leftJoin('eng_repair_request as err', 'ew.request_id', '=', 'err.id')
            ->leftJoin('common_users as cua', 'err.assignee', '=', 'cua.id')
            ->leftJoin('services_location as sl', 'ew.location_id', '=', 'sl.id')
            ->leftJoin('services_location_type as slt', 'sl.type_id', '=', 'slt.id')
            ->leftJoin('common_property as cp', 'ew.property_id', '=', 'cp.id')
            ->where('ew.property_id', $property_id)
			->whereRaw(sprintf("DATE(ew.created_date) >= '%s' and DATE(ew.created_date) <= '%s'", $start_time, $end_time));

		if( !empty($wo_status_tags ) )
			$query->whereIn('ew.status', $wo_status_tags);

		if( count($location_tags) > 0 )
        	$query->whereIn('ew.location_id', $location_tags);

		if( count($equip_tags) > 0 )
        	$query->whereIn('ew.equipment_id', $equip_tags);

		if( count($equip_id_tags) > 0 )
        	$query->whereIn('eel.equip_id', $equip_id_tags);

		$sub_count_query = clone $query;
		$data_query = clone $query;
		$data_list = $data_query
					->orderBy('created_date', $sort)
					->select(DB::raw('ew.*, DATEDIFF(CURTIME(), ew.start_date) as age_days, eel.image_url as picture,  eel.name as equipment_name, eel.equip_id as eq_id, ew.start_date, ecl.name as checklist_name,
							ew.end_date, CONCAT_WS(" ", cua.first_name, cua.last_name) as assignee_name, err.assignee,
							sl.name as location_name, slt.type as location_type' ))
					->get();



		for($i = 0 ; $i < count($data_list) ; $i++) {
				WorkOrder::getWorkorderDetail($data_list[$i]);
		}

		if( !empty($staff_tags) )
		{
				// assignee filter
				$data_list = array_filter($data_list, function($row) use ($staff_tags) {
					return (count(array_filter($row->assigne_list, function($row1) use ($staff_tags) {
						return in_array($row1->assignee_name, $staff_tags);
					})) > 0);
				});

		}

		$data_list = array_merge($data_list, []);

		foreach( $data_list as $data){
			$data->wo_id = WorkOrder::getDailyId($data);
		}

		$data_list = array_merge($data_list, []);

		$data_query = clone $sub_count_query;
        $subcount = $data_query
            ->select(DB::raw("
						count(*) as total,
						COALESCE(sum(ew.status = 'Pending'), 0) as pending,
						COALESCE(sum(ew.status = 'In Progress'), 0) as progress,
						COALESCE(sum(ew.status = 'On Hold'), 0) as hold,
						COALESCE(sum(ew.status = 'Completed'), 0) as completed				
						"))
            ->first();

        $ret['subcount'] = $subcount;


		$ret['code'] = 200;
		$ret['message'] = '';
		$ret['datalist'] = $data_list;




		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$ret['currency'] = $currency->value;
		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		$ret['staff_tags'] = $staff_tags;
		$ret['wo_status_tags'] = $wo_status_tags;
		$ret['equip_tags'] = $equip_tags;
		$ret['equip_id_tags'] = $equip_id_tags;
		$ret['location_tags'] = $location_tags;
		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;

		return $ret;

	}

	private function getDailyId($repair)
    {
        if( empty($repair) )
            return date('Ymd00');

        return sprintf('%s%02d', date('Ymd', strtotime($repair->created_at)), $repair->daily_id);
    }

	public function getMinibarReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'Date');

		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);

//		$report['report_tags'] = $request->get('report_tags','[]');
//		$report['report_tag'] = json_decode($report['report_tags']);

		$report['room_tag'] = $request->get('room_tags','[]');
		$report['room_tags'] = json_decode($report['room_tag']);

		$report['staff_tag'] = $request->get('staff_tags','[]');
		$report['staff_tags'] = json_decode($report['staff_tag']);

		$report['item_tag'] = $request->get('item_tags','[]');
		$report['item_tags'] = json_decode($report['item_tag']);

		$report['building_tag'] = $request->get('building_id', '[]');
		$report['building_tags'] = json_decode($report['building_tag']);


		$report['orderby'] = $request->get('field', 'created_at');
		$report['sort'] = $request->get('sort', 'asc');
		$report['property_id'] = $request->get('property_id', '4');
		$report['user_id'] = $request->get('user_id',0);

		return $this->makeMinibarReportData($report);

	}


	public function makeMinibarReportData($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');

		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

//		$report_tag = $report['report_tags'];
//		$report_tags = $report['report_tag'];

		$room_tag = $report['room_tag'];
		$room_tags = $report['room_tags'];

		$staff_tag = $report['staff_tag'];
		$staff_tags = $report['staff_tags'];

		$item_tag = $report['item_tag'];
		$item_tags = $report['item_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$property_id = $report['property_id'];
		$building_id = $report['building_tags'];
		$user_id = $report['user_id'];

		$ret = [];

		$query = DB::table('services_minibar_log as ml')
			->join('common_room as cr', 'ml.room_id', '=', 'cr.id')
			->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
			->join('common_users as cu', 'ml.user_id', '=', 'cu.id')
//			->leftJoin('common_guest as cg','ml.guest_id','=','cg.guest_id')
			->leftJoin('common_guest as cg', function($join) {
				$join->on('ml.guest_id', '=', 'cg.guest_id');
				$join->on('cb.property_id', '=', 'cg.property_id');
			})
			->where('cb.property_id', $property_id);


			$query->whereBetween('ml.created_at', array($start_time, $end_time));


		if(count($room_tags) > 0 )
			$query->whereIn('cr.room', $room_tags);

		if( count($building_id) > 0 )
			$query->whereIn('cb.name', $building_id);

		if(count($staff_tags) > 0)  {
			$subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
			for($i = 0; $i < count($staff_tags); $i++)
			{
				if($i == 0)
					$subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
				else
					$subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
			}
			$subwhere = $subwhere . ")";
			$query->whereRaw($subwhere);
		}


//		if (count($report_tags) > 0) {
//			switch ($report_by) {
//				case 'Guest ID':
//					$query->whereIn('ml.guest_id', $report_tags);
//					break;
//				case 'Room':
//					$query->whereIn('cr.room', $report_tags);
//					break;
//				case 'Posted by':
//					$subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
//					for($i = 0; $i < count($report_tags); $i++)
//					{
//						if($i == 0)
//							$subwhere = $subwhere . "'" . $report_tags[$i] . "'";
//						else
//							$subwhere = $subwhere . ", '" . $report_tags[$i] . "'";
//					}
//					$subwhere = $subwhere . ")";
//					$query->whereRaw($subwhere);
//					break;
//			}
//		}

		$data_query = clone $query;

		$data_list = $data_query
			->orderBy($orderby, $sort)
			->select(DB::raw('ml.*, cr.room, time(ml.created_at) as time, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, cg.guest_name'))
			->get();

		$item_list_query = DB::table('services_rm_srv_itm');

		if(count($item_tags) > 0 )
			$item_list_query->whereIn('item_name', $item_tags);
//echo json_encode($item_list_query);
		$item_list = $item_list_query
			->get();

//echo json_encode($item_list);
		 $item_list_key = [];
		 for($i = 0; $i < count($item_list); $i++ ) {
		 	$item_list_key[$item_list[$i]->id] = $item_list[$i];
		 }


		$ret['item_list'] = $item_list_key;
		// echo json_encode($item_list_key);
		$minibar_list = [];

		$omit_num = -1;
		$ret['fields'] = array('Guest Name', 'Date', 'Time','Room', 'User', 'Item','Quantity','Price','Total');
		$ret['fields1'] = array('Article Number', 'Description', 'Quantity', 'Amount', 'Alarm');
		$count = 0;
		$total_count = 0;
		$price = 0;
		$total_count_lost = 0;
		$price_lost = 0;
		//echo 'outside datalist';
		$minibarlist_second=[];
		foreach ($data_list as $row) {
			//echo 'not even here';
			switch ($report_by) {
				case 'Date':
					$group_key = substr($row->created_at, 0, 10);
					$omit_num = 1;
					break;
				case 'Guest ID':
					$group_key = $row->guest_id;
					$omit_num = 0;
					break;
				case 'Room':
					$group_key = $row->room;
					$omit_num = 3;
					break;
				case 'Posted by':
					$group_key = $row->wholename;
					$omit_num = 4;
					break;
				default:
					$group_key = substr($row->created_at, 0, 10);
					$omit_num = 1;
					break;
			}
			$ret['group_key'] = $report_by;
			$ids = json_decode($row->item_ids);
			//echo json_encode($ids);
                $quantity = json_decode($row->quantity);
				//echo 'Here out out out outside';
				$item = '';
				if(!empty($ids))
				{
                for($i = 0; $i < count($ids); $i++)
                {
					//print $i;
					//echo 'Here out out outside';


					if( $report_by != 'Service Item' ) {
						$row->other_item_name=[];
					$items=[];
					foreach($item_list as $val)
					{

					// if(count($ids)>1)
					// {
						//$row->other_item_name=[];
						foreach($ids as $other)
						{
							if($val->id==$other)
							{

							$row->other_item_name[]=$val->item_name;
							$items[]=$val;
							}

						}
					//}
				    }
						foreach ($items  as $val){
						if ($ids[$i] == $val->id){
							$item_name = $val->item_name;
							//echo json_encode($item_name);
							//$item_price = $item_list_key[$ids[$i]]->charge;
							$item_price = $val->charge;
							//echo json_encode($item_price);
							$item_quantity = $quantity[$i];
							$item_total = number_format($item_price * $item_quantity,2);
							/*
							if(!empty($item_list_key[$ids[$i]])) {

								if( $report_by != 'Service Item' ) {
									if($row->guest_id != 0) $price += $item_list_key[$ids[$i]]->charge;
									if($row->guest_id == 0) $price_lost += $item_list_key[$ids[$i]]->charge;
								} else {
									if( $item_list_key[$ids[$i]]->item_name == $group_key ) {
									if($row->guest_id != 0) $price += $item_list_key[$ids[$i]]->charge;
									if($row->guest_id == 0) $price_lost += $item_list_key[$ids[$i]]->charge;
									}
								}
							}*/
							$row ->item_name = $item_name;
							$row ->item_quantity =$item_quantity;
							$row ->item_price =$item_price;
							$row ->item_total =$item_total;
							if (isset($minibarlist_second[$group_key][$count])) {
							} else {
								$minibarlist_second[$group_key][$count] = [];
							}

							$minibarlist_second[$group_key][$count] = clone $row ;
						$count++;
					}
				}
				}
					else
					{
					//$ids = json_decode($row->item_ids);
					//echo "here outside outside";
					$row->other_item_name=[];
					$items=[];
					foreach($item_list as $val)
					{

					// if(count($ids)>1)
					// {
						//$row->other_item_name=[];
						foreach($ids as $other)
						{
							if($val->id==$other)
							{

							$row->other_item_name[]=$val->item_name;
							$items[]=$val;
							}

						}
					//}
				    }
					foreach($items as $val)
					{
						//echo $ids[$i];
						//echo 'Here inside';
					for($i = 0; $i < count($ids); $i++)
					{
						//echo 'hERE OUTSIDE';

					if($val->id==$ids[$i])
					{
					$row ->item_name = $val->item_name;
					$row ->item_quantity =$quantity[$i];
					$row ->item_price =$val->charge;
					$row ->item_total =number_format(($val->charge) * ($quantity[$i]),2);

					$group_key = $val->item_name;
					//$group_key = $item_list_key[$ids[$i]]->item_name;

//					if (!in_array($group_key, $report_tags) && count($report_tags) > 0)
//						continue;
					if (!in_array($group_key, $item_tags) && count($item_tags) > 0)
						continue;

					if (isset($minibarlist_second[$group_key][$count])) {
					} else {
						$minibarlist_second[$group_key][$count] = [];
					}

					$minibarlist_second[$group_key][$count] = clone $row ;
						$count++;

				}
			}
		}
				$omit_num = 4;
				}

				}
			}
/*
			if( $report_by != 'Service Item' ) {
				if (isset($minibarlist_second[$group_key][$count])) {
				} else {
					$minibarlist_second[$group_key][$count] = [];
				}

				$minibarlist_second[$group_key][$count] = $row;
			}
			else
			{
				$ids = json_decode($row->item_ids);
				//echo 'Here'.json_encode($item_list);
				//echo 'Here'.json_encode($ids);
				foreach($item_list as $val)
				{
				for($i = 0; $i < count($ids); $i++)
				{
					if($val->id==$ids[$i])
					{
					//echo 'Here2'.json_encode($item_list_key[$ids[$i]]);
					$group_key = $val->item_name;
					//echo json_encode($item_list_key[$ids[$i]]->item_name);
					//echo json_encode($val->item_name);
					//$group_key = $item_list_key[$ids[$i]]->item_name;

//					if (!in_array($group_key, $report_tags) && count($report_tags) > 0)
//						continue;
					if (!in_array($group_key, $item_tags) && count($item_tags) > 0)
						continue;

					if (isset($minibarlist_second[$group_key][$count])) {
					} else {
						$minibarlist_second[$group_key][$count] = [];
					}

					$minibarlist_second[$group_key][$count] = $row;
					}
				}
			}
				$omit_num = 4;
			}
		*/
		}
		//echo json_encode($minibar_list);
		$query1 = DB::table('services_rm_srv_itm as ml');

		$data_query1 = clone $query1;

		$data_list1 = $data_query1
					 //->orderBy($order_by, $sort)
					 ->select(DB::raw('ml.ivr_code,ml.item_name,ml.item_stock,ml.alarm_count,ml.charge'))
					 ->get();
		$user_query = DB::table('common_users as cu')
					->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'))
					->where('cu.id', $user_id)
					->first();

		$user_name = $user_query;


		//$ret['minibar_list'] = $minibar_list;

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$ret['currency'] = $currency->value;
		$ret['minibar_list'] = $minibarlist_second;
		$ret['user_name'] = $user_name;
		$ret['data_list1'] = $data_list1;
		$ret['property'] = Property::find($property_id);
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		$ret['room_tags'] = $room_tags;
		$ret['staff_tags'] = $staff_tags;
		$ret['item_tags'] = $item_tags;
		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['omit_num'] = $omit_num;

		return $ret;
	}

	public function generateMinibarReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		$data = $this->getMinibarReportData($request);

		return view('frontend.report.minibar', compact('data'));
		//$pdf = PDF::loadView('frontend.report.minibar', compact('data'));
		//return $pdf->setPaper('a4', 'landscape')->setWarnings(false)->stream('download.pdf');
	}

	public function downloadMinibarExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getMinibarReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = 'Minibar_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		if ($data['report_type']=='Stock')
		{
			$filename = 'Stock_Report_' . date('d_M_Y_H_i');
		}

		$param = $request->all();

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

			$excel->sheet('Minibar Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputMinibarLogo($sheet,$logo_path);
				$this->outputMinibarDescription($sheet, $data);

				$row_num = 8;
				if(($data['report_type'] != 'Summary') || ($data['report_by'] != 'Service Item')){
					$row_num = $this->outputMinibarDetailReport($sheet, $row_num, $data);
				}

				if(($data['report_type'] == 'Summary') && ($data['report_by'] == 'Service Item')) {
					$row_num = $this->outputMinibarSummaryReport($sheet, $row_num, $data);
					//$row_num = $this->outputMinibarDetailReport($sheet, $row_num, $data);
				}

				if($data['report_type'] == 'Stock') {
					//$row_num = $this->outputMinibarSummaryReport($sheet, $row_num, $data);
					//$row_num = $this->outputMinibarDetailReport($sheet, $row_num, $data);
					$row_num = $this->outputMinibarStockReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function generateEngineeringReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		$data = $this->getEngineeringReportData($request);

		return view('frontend.report.engineering_pdf', compact('data'));

	}

	public function downloadEngineeringExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getEngineeringReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		$filename = 'Engineering_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');



		$param = $request->all();

		$excel_file_type = 'csv';
		if($param['excel_type'] == 'excel')
			$excel_file_type = config('app.report_file_type');

		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

			$excel->sheet('Engineering Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputEngineeringLogo($sheet,$logo_path);
				$this->outputEngineeringDescription($sheet, $data);

				$row_num = 8;
				if(($data['report_by'] == 'Work Request')){
					$row_num = $this->outputEngineeringWRReport($sheet, $row_num, $data);
				}

				if(($data['report_by'] == 'Work Order')){
					$row_num = $this->outputEngineeringWOReport($sheet, $row_num, $data);
				}

			});

			$this->sendNotifyDownloadCompleted($param);

		})->export($excel_file_type);
	}

	public function generateHskpReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);

		$data = $this->getHskpReportData($request);
		//$pdf = PDF::loadView('frontend.report.hskp', compact('data'));
		//return $pdf->setPaper('a4', 'landscape')->setWarnings(false)->stream('download.pdf');

		return view('frontend.report.hskp_pdf', compact('data'));
	}

	public function downloadHskpExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getHskpReportData($request);
		$property_id = $request->get('property_id',4);

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$logo_path = $property->logo_path;

		if ($data['report_type'] == 'Task Sheet')
			$filename = 'Housekeeping_' . $data['report_type'] . '_' . date('d_M_Y_H_i');
		else
			$filename = 'Housekeeping_' . $data['report_type'] . '_Report_By_' . $data['report_by'] . '_' . date('d_M_Y_H_i');

		$param = $request->all();

		Excel::create($filename, function($excel) use ($data, $logo_path, $param) {

			$excel->sheet('Housekeeping Report', function($sheet) use ($data,$logo_path) {
				$sheet->setOrientation('landscape');

				$this->outputComplaintLogo($sheet,$logo_path);
				$this->outputHskpDescription($sheet, $data);

				$row_num = 6;

				$row_num = $this->outputHskpTitle($sheet, $data, $row_num);

				if ($data['report_type'] == 'Task Sheet')
				{
					$row_num = $this->outputHskpTaskSheetReport($sheet, $row_num, $data);
				}

				if (($data['report_type'] == 'Detailed')&&( $data['report_by'] == 'Cleaning Status' ))
				{
					$row_num = $this->outputHskpStatusSummaryReport($sheet, $row_num, $data);
					$row_num = $this->outputHskpStatusReport($sheet, $row_num, $data);
				}

				if( ($data['report_type'] == 'Detailed' ) && ( $data['report_by'] != 'Cleaning Status' ) && ($data['report_by'] != 'Roster Allocation') && ($data['report_by'] != 'Discrepancy'))
				{
						$row_num = $this->outputHskpDetailReport($sheet, $row_num, $data);
				}

				if (($data['report_type'] == 'Summary')&&( $data['report_by'] == 'Cleaning Status' ))
				{
					$row_num = $this->outputHskpStatusSummaryReport($sheet, $row_num, $data);

				}

				if(($data['report_type'] == 'Summary')&&( $data['report_by'] != 'Cleaning Status' )&&( $data['report_by'] != 'Roster Allocation' ) && ($data['report_by'] != 'Discrepancy'))
				{
						$row_num = $this->outputHskpSummaryReport($sheet, $row_num, $data);

				}

				if( $data['report_by'] == 'Roster Allocation' )
				{
						$row_num = $this->outputHskpRosterReport($sheet, $row_num, $data);

				}
				if( $data['report_by'] == 'Discrepancy' )
				{
						$row_num = $this->outputHskpDiscrepancyReport($sheet, $row_num, $data);

				}
			});

			$this->sendNotifyDownloadCompleted($param);

		})->export(config('app.report_file_type'));
	}


	public function getHskpReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];

		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'Date');

		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);


		//$report_tag = $request->get('report_tags', '[]');
		//$report_tags = json_decode($report_tag);

		$report['status_tag'] = $request->get('status_tags','[]');
		$report['status_tags'] = json_decode($report['status_tag']);

		$report['staff_tag'] = $request->get('staff_tags','[]');
		$report['staff_tags'] = json_decode($report['staff_tag']);

		$report['room_tag'] = $request->get('room_tags','[]');
		$report['room_tags'] = json_decode($report['room_tag']);

		$report['room_type_tag'] = $request->get('room_type_tags','[]');
		$report['room_type_tags'] = json_decode($report['room_type_tag']);

		$report['room_status_tag'] = $request->get('room_status_tags','[]');
		$report['room_status_tags'] = json_decode($report['room_status_tag']);

		$report['occupancy_tag'] = $request->get('occupancy_tags','[]');
		$report['occupancy_tags'] = json_decode($report['occupancy_tag']);

		$report['res_status_tag'] = $request->get('res_status_tags','[]');
		$report['res_status_tags'] = json_decode($report['res_status_tag']);

		$report['orderby'] = $request->get('field', 'created_at');
		$report['sort'] = $request->get('sort', 'asc');
		$report['property_id'] = $request->get('property_id', '4');

		return $this->makeHskpReportData($report);

	}

	public function makeHskpReportData($report) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-M-d H:i:s');
		$cur_date = date('Y-M-d');
		$property_id = $report['property_id'];
		$report_type = $report['report_type'];
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$status_tag = $report['status_tag'];
		$status_tags = $report['status_tags'];

		$staff_tag = $report['staff_tag'];
		$staff_tags = $report['staff_tags'];

		$room_tag = $report['room_tag'];
		$room_tags = $report['room_tags'];

		$room_type_tag = $report['room_type_tag'];
		$room_type_tags = $report['room_type_tags'];

		$room_status_tag = $report['room_status_tag'];
		$room_status_tags = $report['room_status_tags'];

		$occupancy_tag = $report['occupancy_tag'];
		$occupancy_tags = $report['occupancy_tags'];

		$res_status_tag = $report['res_status_tag'];
		$res_status_tags = $report['res_status_tags'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];

		$ret = [];

		if($report_by == 'Date')
			$this->getHskpReportBy($report, $ret);

		if($report_by == 'Room')
			$this->getHskpReportBy($report, $ret);

		if($report_by == 'Housekeeping Status')
			$this->getHskpReportBy($report, $ret);

		if($report_by == 'Posted by')
			$this->getHskpReportBy($report, $ret);

		if($report_by == 'Cleaning Status')
			$this->getHskpReportByStatus($report, $ret);

		if($report_by == 'Roster Allocation')
			$this->getHskpReportByAssignment($report, $ret);

		if($report_by == 'Discrepancy')
			$this->getHskpReportByDiscrepancy($report, $ret);

		if($report_type == 'Task Sheet')
			$this->getHskpReportByTaskSheet($report, $ret);


		$ret['report_by'] = $report_by;
		$ret['report_type'] = $report_type;
		$ret['orderby'] = $orderby;
		$ret['sort'] = $sort;

		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['property'] = Property::find($property_id);
		$ret['status_tags'] = $status_tags;
		$ret['room_tags'] = $room_tags;
		$ret['staff_tags'] = $staff_tags;
		return $ret;
	}

	public function getHskpReportByStatus($report, &$ret) {

		$report_by = $report['report_by'];
		$report_type = $report['report_type'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$status_tags = $report['status_tags'];
		$room_tags = $report['room_tags'];
		$staff_tags = $report['staff_tags'];
		$property_id = $report['property_id'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];

		//$status_range = sprintf("DATE(hl.created_at) >= '%s' AND DATE(shl.created_at) <= '%s'", $start_time, $end_time);
		$query = DB::table('services_hskp_log as hl')
				->join('common_room as cr', 'hl.room_id', '=', 'cr.id')
				->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->join('common_users as cu', 'hl.user_id', '=', 'cu.id')
				->join('services_hskp_log as shl', 'hl.room_id', '=', 'shl.room_id')
				->join('services_hskp_status as hs', 'shl.hskp_id', '=', 'hs.id')
				->where('cb.property_id', $property_id)
				->where('hl.state',1)
				->where('shl.state',2)
				//->where('shl.created_at','>',DB::raw('hl.created_at'))
				->where(DB::raw('DATE(hl.created_at)'),'=',DB::raw('DATE(shl.created_at)'))
				->whereBetween('hl.created_at', array($start_time, $end_time))
				->whereBetween('shl.created_at', array($start_time, $end_time));


			if(count($status_tags) > 0 )
				$query->whereIn('hs.status', $status_tags);

			if(count($room_tags) > 0 )
				$query->whereIn('cr.room', $room_tags);

			if(count($staff_tags) > 0 )
			{
				$subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
				for($i = 0; $i < count($staff_tags); $i++)
				{
					if($i == 0)
						$subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
					else
						$subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
				}
				$subwhere = $subwhere . ")";
				$query->whereRaw($subwhere);

			}

		$query->select(DB::raw('hl.*, cr.room, hs.status, hs.ivr_code, hs.pms_code, hs.type, hs.description, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename,hl.created_at as start_time, shl.created_at as end_time, TIME_TO_SEC(TIMEDIFF( shl.created_at, hl.created_at )) as duration'));

		$data = $query->get();

		$td_query = DB::table('services_hskp_log as hl')
				->join('common_room as cr', 'hl.room_id', '=', 'cr.id')
				->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->join('common_users as cu', 'hl.user_id', '=', 'cu.id')
				->join('services_hskp_log as shl', 'hl.room_id', '=', 'shl.room_id')
				//->join('services_hskp_status as hs', 'shl.hskp_id', '=', 'hs.id')
				->where('cb.property_id', $property_id)
				->where('hl.td_flag',1)
				->where('hl.td_state',1)
				->where('shl.td_state',2)
				->where('shl.created_at','>',DB::raw('hl.created_at'))
				->where(DB::raw('DATE(hl.created_at)'),'=',DB::raw('DATE(shl.created_at)'))
				->whereBetween('hl.created_at', array($start_time, $end_time))
				->whereBetween('shl.created_at', array($start_time, $end_time));

		$td_query->select(DB::raw('hl.*, shl.td_state, cr.room, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename,hl.created_at as start_time, shl.created_at as end_time, TIME_TO_SEC(TIMEDIFF( shl.created_at, hl.created_at )) as duration'));

		$td = $td_query->get();


		$summary = DB::table('services_hskp_log as hl')
				->join('common_room as cr', 'hl.room_id', '=', 'cr.id')
				->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->join('common_users as cu', 'hl.user_id', '=', 'cu.id')
				->where('cb.property_id', $property_id)
				->whereBetween('hl.created_at', array($start_time, $end_time));

		$summary->select(DB::raw('hl.*, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'));

		$data1 = $summary->get();




		$ret['fields'] = array('Date', 'Room', 'Status', 'Posted by','Start Time', 'End Time', 'Duration');
		$ret['fields1'] = array('Date', 'Room', 'Turndown Status', 'Posted by','Start Time', 'End Time', 'Duration');
		$hskp_list = [];
		$hskp_list1 = [];
		$hskp_list_summary = [];
		$hskp_list_summary1 = [];
		$summary_header = array('Vacant Clean','Occupied Clean','Total Rooms','Total Time','Avg Time Per Room');
		$summary_header1 = array('DND','Refuse','Total');
		foreach ($data as $row) {

			$group_key = $row->wholename;

			$hskp_list[$group_key][] = $row;

			if(empty($hskp_list_summary[$group_key]))
			$hskp_list_summary[$group_key] = [];

			for($i=0; $i < count($summary_header);$i++) {
				if(empty($hskp_list_summary[$group_key][$summary_header[$i]]))
					$hskp_list_summary[$group_key][$summary_header[$i]] = 0;
				if ($row->status == $summary_header[$i]) {
					$hskp_list_summary[$group_key][$summary_header[$i]]++;
					if(empty($hskp_list_summary[$group_key]['Total Rooms']))
						$hskp_list_summary[$group_key]['Total Rooms'] = 0;
					$hskp_list_summary[$group_key]['Total Rooms']++;
					if(empty($hskp_list_summary[$group_key]['Total Time']))
						$hskp_list_summary[$group_key]['Total Time'] = 0;
					$hskp_list_summary[$group_key]['Total Time'] += $row->duration;
					if(empty($hskp_list_summary[$group_key]['Avg Time Per Room']))
						$hskp_list_summary[$group_key]['Avg Time Per Room'] = 0;
					$hskp_list_summary[$group_key]['Avg Time Per Room'] = $hskp_list_summary[$group_key]['Total Time']/$hskp_list_summary[$group_key]['Total Rooms'];
				}
		}

		}
		foreach ($td as $row) {
			$group_key = $row->wholename;
			$hskp_list1[$group_key][] = $row;

		}
		foreach ($data1 as $row) {

			$group_key = $row->wholename;

			if ($row->state == 3)
			{
				$state = 'DND';
			}
			else  if ($row->state == 4)
			{
				$state = 'Refuse';
			}
			else {
				$state = " ";
			}

			if(empty($hskp_list_summary1[$group_key]))
			$hskp_list_summary1[$group_key] = [];

			for($i=0; $i < count($summary_header1);$i++) {
				if(empty($hskp_list_summary1[$group_key][$summary_header1[$i]]))
					$hskp_list_summary1[$group_key][$summary_header1[$i]] = 0;
				if ($state == $summary_header1[$i]) {
					$hskp_list_summary1[$group_key][$summary_header1[$i]]++;
					if(empty($hskp_list_summary1[$group_key]['Total']))
						$hskp_list_summary1[$group_key]['Total'] = 0;
					$hskp_list_summary1[$group_key]['Total']++;


				}
		}

		}

		$ret['report_by'] = $report_by;
		$ret['hskp_list'] = $hskp_list;
		$ret['hskp_list1'] = $hskp_list1;
		$ret['hskp_summary'] = $hskp_list_summary;
		$ret['hskp_summary1'] = $hskp_list_summary1;
		$ret['summary_header'] = $summary_header;
		$ret['summary_header1'] = $summary_header1;
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		$ret['property'] = Property::find($property_id);

		return $ret;
	}
	public function getHskpReportBy($report, &$ret) {

		$report_by = $report['report_by'];
		$report_type = $report['report_type'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$status_tags = $report['status_tags'];
		$room_tags = $report['room_tags'];
		$staff_tags = $report['staff_tags'];
		$property_id = $report['property_id'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];

		$query = DB::table('services_hskp_log as hl')
				->join('common_room as cr', 'hl.room_id', '=', 'cr.id')
				->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->join('services_hskp_status as hs', 'hl.hskp_id', '=', 'hs.id')
				->join('common_users as cu', 'hl.user_id', '=', 'cu.id')
				->where('cb.property_id', $property_id)
				->whereBetween('hl.created_at', array($start_time, $end_time));



		if(count($status_tags) > 0 )
			$query->whereIn('hs.status', $status_tags);

		if(count($room_tags) > 0 )
			$query->whereIn('cr.room', $room_tags);

		if(count($staff_tags) > 0 )
		{
			$subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
			for($i = 0; $i < count($staff_tags); $i++)
			{
				if($i == 0)
					$subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
				else
					$subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
			}
			$subwhere = $subwhere . ")";
			$query->whereRaw($subwhere);

		}
			//$query->whereIn('hl.user_id', $staff_tags);


		$query->select(DB::raw('hl.*, cr.room, hs.status, hs.ivr_code, hs.pms_code, hs.type, hs.description, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'));
		switch ($report_by) {
			case 'Date':
				$query->orderBy('hl.created_at', 'desc');
				break;
			case 'Room':
				$query->orderBy('cr.room');
				break;
			case 'Housekeeping Status':
				$query->orderBy('hs.status');
				break;

			case 'Posted by':
				$query->orderBy('wholename');
					  //->where('hl.user_id' , '>',0)
				break;

			default:
				$query->orderBy('hl.created_at');
				break;
		}
		$data = $query->get();
		//echo json_encode($data);

		$hskp_list = [];
		$hskp_list_summary = [];
		$summary_header = array('Clean Occupied','Clean Vacant','Inspected Occupied','Inspected Vacant','Dirty Occupied','Dirty Vacant', 'Total');

		$omit_num = -1;

			$ret['fields'] = array('Date', 'Room', 'Status', 'Posted by');

		foreach ($data as $row) {
			switch ($report_by) {
				case 'Date':
					$group_key = substr($row->created_at, 0, 10);
					$omit_num = 0;
					break;
				case 'Room':
					$group_key = $row->room;
					$omit_num = 1;
					break;
				case 'Housekeeping Status':
					$group_key = $row->status;
					$omit_num = 2;
					break;
				case 'Posted by':
					$group_key = $row->wholename;
					$omit_num = 3;
					break;
				default:
					$group_key = substr($row->created_at, 0, 10);
					$omit_num = 0;
					break;
			}

			$hskp_list[$group_key][] = $row;

			//summary
			if(empty($hskp_list_summary[$group_key]))
			$hskp_list_summary[$group_key] = [];

			for($i=0; $i < count($summary_header);$i++) {
				if(empty($hskp_list_summary[$group_key][$summary_header[$i]]))
					$hskp_list_summary[$group_key][$summary_header[$i]] = 0;
				if($row->status == $summary_header[$i]) {
					$hskp_list_summary[$group_key][$summary_header[$i]]++;
					if(empty($hskp_list_summary[$group_key]['Total']))
						$hskp_list_summary[$group_key]['Total'] = 0;
					$hskp_list_summary[$group_key]['Total']++;
				}
		}

		}

		$ret['omit_num'] = $omit_num;
		$ret['hskp_list'] = $hskp_list;
		$ret['hskp_summary'] = $hskp_list_summary;
		$ret['summary_header'] = $summary_header;

		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y H:i") . ' to ' . date_format(new DateTime($end_time), "d-M-Y H:i");

		if ($report_by == 'Posted by')
		{
			$ret['title'] = $report_type . ' Report by Staff ';
		}
		else
		{
			$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';
		}
		$ret['property'] = Property::find($property_id);

		return $ret;
	}

	public function getHskpReportByAssignment($report, &$ret) {

		$report_by = $report['report_by'];
		$report_type = $report['report_type'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$status_tags = $report['status_tags'];
		$room_tags = $report['room_tags'];
		$staff_tags = $report['staff_tags'];
		$property_id = $report['property_id'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];

		$query = DB::table('services_roster_list as rs')
			//	->join('common_room as cr', 'hl.room_id', '=', 'cr.id')
			//	->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			//	->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->leftJoin('services_devices as sd', 'rs.device', '=', 'sd.id')
				->leftJoin('common_users as cu', 'sd.device_user', '=', 'cu.username');
			//	->where('cb.property_id', $property_id)
			//	->whereBetween('hl.created_at', array($start_time, $end_time));


		$query->select(DB::raw('rs.*, sd.*, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'));

		$list = $query->get();
		$hskp_list = [];
		foreach ($list as $data){

		$rooms= $data->location_list;
		$array = explode(',', $rooms);
		$data->room_list = '';
		$data->count = 0;
		foreach ($array as $value) {
			$room_data = DB::table('common_room as cr')
			->where('cr.id', $value)
			->select(DB::raw('cr.*'))
			->get();

		for($j=0; $j < count($room_data) ;$j++) {
			$data->room_list .= ''. $room_data[$j]->room . ', ' ;
			$data->count++;
		}
		}

		$hskp_list[] = $data;


	}
	$ret['hskp_list'] = $hskp_list;
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y");


			$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';

		$ret['property'] = Property::find($property_id);

		return $ret;
	}

	public function getHskpReportByDiscrepancy($report, &$ret) {

		$report_by = $report['report_by'];
		$report_type = $report['report_type'];
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$status_tags = $report['status_tags'];
		$room_tags = $report['room_tags'];
		$staff_tags = $report['staff_tags'];
		$property_id = $report['property_id'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];
		$cur_date = date("Y-m-d");
		$query = DB::table('services_hskp_room_discrepancy as rd')
				->leftJoin('common_room as cr', 'rd.room_id', '=', 'cr.id')
				->leftJoin('common_guest as cg', function($join) use ($cur_date) {
					$join->on('rd.room_id', '=', 'cg.room_id');
					$join->on('rd.profile_id', '=', 'cg.profile_id');
					$join->on('cg.departure','>=', DB::raw("'".$cur_date."'"));
					$join->on('cg.checkout_flag','=', DB::raw("'checkin'"));
				})
				->leftJoin('common_users as cu', 'rd.user_id', '=', 'cu.id');

		if(count($room_tags) > 0 )
			$query->whereIn('cr.room', $room_tags);

		if(count($staff_tags) > 0 )
		{
			$subwhere = "CONCAT_WS(\" \", cu.first_name, cu.last_name) IN (";
			for($i = 0; $i < count($staff_tags); $i++)
			{
				if($i == 0)
					$subwhere = $subwhere . "'" . $staff_tags[$i] . "'";
				else
					$subwhere = $subwhere . ", '" . $staff_tags[$i] . "'";
			}
			$subwhere = $subwhere . ")";
			$query->whereRaw($subwhere);

		}

		$data_query = clone $query;
		
		$data_query->select(DB::raw('rd.*, cr.room, cg.guest_name, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'));

		

		$list = $data_query->orderBy('rd.created_at','asc')->get();
		
		$hskp_list = [];
		
		foreach ($list as $row) {
			
			$group_key = $row->room;
			
			if (isset($hskp_list[$group_key])) {
			} else {
				$hskp_list[$group_key] = [];
			}
			$hskp_list[$group_key][] = $row;
		}
		
	
		$ret['hskp_list'] = $hskp_list;
		$ret['period'] = date_format(new DateTime($start_time), "d-M-Y");
		$ret['title'] = $report_type . ' Report by ' . $report_by . ' ';

		$ret['property'] = Property::find($property_id);

		return $ret;
	}

	public function getHskpReportByTaskSheet($report, &$ret) 
	{
		
		$report_type = $report['report_type'];
		$status_tags = $report['status_tags'];
		$room_type_tags = $report['room_type_tags'];
		$room_status_tags = $report['room_status_tags'];
		$occupancy_tags = $report['occupancy_tags'];
		$res_status_tags = $report['res_status_tags'];
		$staff_tags = $report['staff_tags'];
		$property_id = $report['property_id'];

		$orderby = $report['orderby'];
		$sort = $report['sort'];

		$cur_date = date("Y-m-d");

		$query = DB::table('services_room_status as rs')
						->leftJoin('common_room as cr', 'rs.id', '=', 'cr.id')
						->leftJoin('common_room_type as rt', 'cr.type_id', '=', 'rt.id')
						->leftJoin('common_guest as cg', function($join) use ($cur_date) {
								$join->on('rs.id', '=', 'cg.room_id');
								$join->on('cg.departure','>=',DB::raw("'".$cur_date."'"));
								$join->on('cg.checkout_flag','=', DB::raw("'checkin'"));
						})
						->leftJoin('common_vip_codes as cvc', 'cg.vip', '=', 'cvc.vip_code')
						->where('rs.property_id', $property_id);
						
		if(count($room_type_tags) > 0 )
			$query->whereIn('rt.type', $room_type_tags);	
			
		if(count($room_status_tags) > 0 )
			$query->whereIn('rs.rm_state', $room_status_tags);

		if(count($occupancy_tags) > 0 )
			$query->whereIn('rs.occupancy', $occupancy_tags);

		if(count($res_status_tags) > 0 )
			$query->whereIn('rs.fo_state', $res_status_tags);

		$data_query = clone $query;

		$hskp = $data_query
				->select(DB::raw('rs.*, cr.room, cr.credits, rt.type, cg.guest_name, cg.adult, cg.chld, cg.arrival, cg.departure, cvc.name as vip_name'))
				->get();
		foreach($hskp as $row){

			if($row->occupancy == 'Vacant'){

			$row->guest_name = "NA";
			$row->adult = 0;
			$row->chld = 0;
			$row->arrival = "NA";
			$row->departure = "NA";
			$row->vip_name = "NA";
			}

		}
		
		$ret = array();

		$ret['report_date'] = date('d M Y');
		$ret['room_list'] = $hskp;
		$ret['property'] = Property::find($property_id);
		$ret['title'] = $report_type;

		return $ret;
	}


 
	public function getFilterList(Request $request) {
		$filter_name = $request->get('filter_name', 'room');
		$filter_department = json_decode($request->get('filter_department', '[]'));
		$filter_department_function = json_decode($request->get('filter_department_function', '[]'));
		$filter_building = json_decode($request->get('filter_building', '[]'));
		$filter = $request->get('filter', '');
		$property_id = $request->get('property_id', '0');
		$property_names = json_decode($request->get('property_names', '[]'));
		$property_tags = json_decode($request->get('property_tags', '[]'));
		$department_tags = json_decode($request->get('department_tags', '[]'));
		$category_tags = json_decode($request->get('category_tags', '[]'));

		$filter = '%' . $filter . '%';

		$ret = [];

		switch($filter_name) {
			case 'Property';
				$datalist = DB::table('common_property as cp')
					->where('cp.name', 'like', $filter)
					->get();
					if((!empty($request->report_by))&&(($request->report_by=='Complaint')||($request->report_by=='Sub-complaint')||($request->report_by=='Compensation')))
					{
						for($i = 0; $i < count($datalist); $i++)
							$ret[] = $datalist[$i]->name . ":" . $datalist[$i]->id;
					}
					else
					{
						for($i = 0; $i < count($datalist); $i++)
							$ret[] = $datalist[$i]->name;
					}
				break;
			case 'Building';
				$datalist = DB::table('common_building as cb')
					->where('cb.name', 'like', $filter)
					->get();
					if((!empty($request->report_by))&&(($request->report_by=='Complaint')||($request->report_by=='Sub-complaint')||($request->report_by=='Compensation')))
					{
						for($i = 0; $i < count($datalist); $i++)
							$ret[] = $datalist[$i]->name;
					}
					else
					{
						for($i = 0; $i < count($datalist); $i++)
							$ret[] = $datalist[$i]->name;
					}
				break;

			case 'Floor';
				$datalist = DB::table('common_floor as cf')
					->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
					->where('cf.floor', 'like', $filter)
					->where('cb.property_id', $property_id);

					if(count($filter_building)>0 ) {
						$datalist->whereIn('cb.name', $filter_building);
					}


				$datalist = $datalist->select(DB::raw('cf.*, cb.name'))->get();


						for($i = 0; $i < count($datalist); $i++)
							$ret[] = $datalist[$i]->description;

				break;
			case 'PropertyID';
				$ret = DB::table('common_property as cp')
					->where('cp.name', 'like', $filter)
					->get();
				break;
			case 'Type';
				$datalist = DB::table('services_complaint_feedback_type')
					->groupBy('name')
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name;
				break;

			case 'Source';
				$datalist = DB::table('services_complaint_feedback_source')
					->groupBy('name')
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name;
				break;

			case 'MainCategory';
				$query = DB::table('services_complaint_maincategory as sm ')
					->leftJoin('common_property as cp', 'sm.property_id', '=', 'cp.id')
					->where('sm.name', 'like', $filter);
				if( count($property_tags) > 0 )
					$query->whereIn('cp.name', $property_tags);

				$datalist = $query->select(DB::raw('sm.name as category_name'))
					->groupBy('sm.name')
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->category_name;
				break;
			case 'MainCategoryID';
				$query = DB::table('services_complaint_maincategory as sm ')
					->where('sm.name', 'like', $filter);
				if( count($property_tags) > 0 )
					$query->whereIn('sm.property_id', $property_tags);

				$ret = $query
					->groupBy('sm.name')
					->get();

				break;
			case 'Category';
				$query = DB::table('services_complaint_category as sc')
					->where('sc.name', 'like', $filter);

				if( count($department_tags) > 0 )
					$query->join('common_department as cd', 'sc.dept_id', '=', 'cd.id')
						->where('cd.department', $department_tags);

				$datalist = $query->get();
				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name;

				break;
			case 'CategoryID';
				$query = DB::table('services_complaint_category as sc')
					->where('sc.name', 'like', $filter);

				if( count($department_tags) > 0 )
					$query->whereIn('sc.dept_id', $department_tags);

				$ret = $query->get();

				break;
			case 'SubCategory';
				$query = DB::table('services_complaint_subcategory as csc')
					->where('csc.name', 'like', $filter);

				if( count($category_tags) > 0 )
				{
					$query->join('services_complaint_category as sc', 'csc.category_id', '=', 'sc.id')
						->whereIn('sc.name', $category_tags);
				}

				$datalist = $query->select(DB::raw('csc.name'))->get();
				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name;
				break;

			case 'SubCategoryID';
				$query = DB::table('services_complaint_subcategory as csc')
					->where('csc.name', 'like', $filter);

				if( count($category_tags) > 0 )
				{
					$query->whereIn('csc.category_id', $category_tags);
				}

				$ret = $query->select(DB::raw('csc.name'))->get();

				break;

			case 'Serverity';
				$datalist = DB::table('services_complaint_type as st')
					->where('st.type', 'like', $filter)
					->get();
				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->type;
				break;
			case 'ServerityID';
				$ret = DB::table('services_complaint_type as st')
					->where('st.type', 'like', $filter)
					->get();
				break;
			case 'Room';
				$datalist = DB::table('common_room as cr')
					->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
					->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
					->where('cr.room', 'like', $filter)
					->where('cb.property_id', $property_id)
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->room;
				break;
			case 'Rooms';
				$datalist =  DB::table('common_guest as cg')
								->leftJoin('common_room as cr', 'cg.room_id', '=', 'cr.id')
								->where('cg.checkout_flag', 'checkin')
								->where('cr.room', 'like', $filter)
								->orderBy('cr.id', 'asc')
								->select('cr.room')
								->distinct()
									->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->room;
				break;
			case 'RoomID';
				$ret = DB::table('common_room as cr')
					->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
					->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
					->where('cr.room', 'like', $filter)
					->where('cb.property_id', $property_id)
					->get();
				break;
			case 'Department';
				$datalist = DB::table('common_department as cd')
				        ->leftJoin('common_property as cp', 'cd.property_id', '=', 'cp.id')
						->where('cd.department', 'like', $filter)
						->where('cd.property_id', $property_id)
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->department;
				break;
			case 'Departments';
				$query = DB::table('common_department as cd')
					->leftJoin('common_property as cp', 'cd.property_id', '=', 'cp.id')
					->where('cd.department', 'like', $filter);

				if( count($property_tags) > 0 )
					$query->whereIn('cp.name', $property_tags);

				$datalist =	$query->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->department;
				break;
			case 'DepartmentsID';
				$query = DB::table('common_department as cd')
					->where('cd.department', 'like', $filter);

				if( count($property_tags) > 0 )
					$query->whereIn('cd.property_id', $property_tags);

				$ret =	$query->get();

				break;
			case 'Section';
				$datalist = DB::table('call_section as cs')
						->join('common_department as cd', 'cs.dept_id', '=', 'cd.id');
							if(count($filter_department)>0 ) {
								$datalist->whereIn('cd.department', $filter_department);
							}
							$datalist = $datalist->where('cs.section', 'like', $filter)
								->where('cd.property_id', $property_id)
								->get();
				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->section;
				break;
			case 'Extension';
				$datalist = DB::table('call_guest_extn as ge')
						->join('common_building as cb', 'ge.bldg_id', '=', 'cb.id')
						->where('ge.extension', 'like', $filter)
						->where('cb.property_id', $property_id)
						->orderBy('ge.extension',  'asc')
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->extension;

				$datalist = DB::table('call_staff_extn as se')
						->join('call_section as cs', 'se.section_id', '=', 'cs.id')
						->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
						->join('common_department as cd', 'cs.dept_id', '=', 'cd.id');
						if(count($filter_department)>0 ) {
							$datalist->whereIn('cd.department', $filter_department);
						}
						$datalist = $datalist	->where('se.bc_flag', 0)
							->where('se.extension', 'like', $filter)
							->where('cb.property_id', $property_id)
							->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->extension;

				array_multisort($ret);
				break;
			case 'Destination';
				$datalist = DB::table('call_destination')
						->where('country', 'like', $filter)
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->country;
				break;
			case 'Status';
				$ret = array('Completed', 'Open', 'Escalated', 'Timeout', 'Canceled', 'Scheduled', 'Unassigned');
				break;
			case 'Staff';
				$name_filter = sprintf("CONCAT_WS(\" \", cu.first_name, cu.last_name) like '%s'", $filter);

				$datalist = DB::table('common_users as cu')
						->join('common_department as cd', 'cu.dept_id', '=', 'cd.id')
						->whereRaw($name_filter)
						->where('cd.property_id', $property_id)
						->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'))
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->wholename;
				break;
			case 'Item';
				$datalist = DB::table('services_task_list as tl')
						->join('services_task_group_members as tgm', 'tl.id', '=', 'tgm.task_list_id')
						->join('services_task_group as tg', 'tgm.task_grp_id', '=', 'tg.id')
						->join('services_dept_function as df', 'tg.dept_function', '=', 'df.id')
						->join('common_department as cd', 'df.dept_id', '=', 'cd.id');
						if(count($filter_department_function)>0 ) {
							$datalist->whereIn('df.function', $filter_department_function);
						}
						$datalist = $datalist->where('tl.task', 'like', $filter)
						->where('cd.property_id', $property_id)
						->where('tl.status',1)
						->select(DB::raw('distinct(tl.task)'))
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->task;
				break;
			case 'Department Function';
				$datalist = DB::table('services_dept_function as df')
						->join('common_department as cd', 'df.dept_id', '=', 'cd.id');
						if(count($filter_department)>0 ) {
							$datalist->whereIn('cd.department', $filter_department);
						}
						$datalist = $datalist->where('df.function', 'like', $filter)
						->where('cd.property_id', $property_id)
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->function;
				break;
			case 'Location';
				$datalist = app('App\Http\Controllers\Frontend\GuestserviceController')->getLocationListData($filter, $property_id);

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name . ":" . $datalist[$i]->type;
				break;
			case 'Shift';
				$datalist = DB::table('services_shifts')
						->where('name', 'like', $filter)
						->where('property_id', $property_id)
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name;
				break;
			case 'Guest ID';
				$datalist = DB::table('services_minibar_log as ml')
						->join('common_room as cr', 'ml.room_id', '=', 'cr.id')
						->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
						->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
						->where('guest_id', 'like', $filter)
						->where('property_id', $property_id)
						->select(DB::raw('ml.*'))
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->guest_id;
				break;
			case 'Posted by';
				$name_filter = sprintf("CONCAT_WS(\" \", cu.first_name, cu.last_name) like '%s'", $filter);

				$datalist = DB::table('common_users as cu')
						->join('common_department as cd', 'cu.dept_id', '=', 'cd.id')
						->whereRaw($name_filter)
						->where('cd.property_id', $property_id)
						->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'))
						->get();

				for($i = 0; $i < count($datalist); $i++)
					if(!in_array($datalist[$i]->wholename, $ret)) $ret[] = $datalist[$i]->wholename;

				break;
			case 'Service Item';
				$datalist = DB::table('services_rm_srv_itm as rsi')
						->join('services_srv_grp_mbr as sgm', 'sgm.item_id', '=', 'rsi.id')
						->join('services_rm_srv_grp as rsg', 'sgm.grp_id', '=', 'rsg.id')
						->join('common_building as cb', 'rsg.building_id', '=', 'cb.id')
						->where('rsi.item_name', 'like', $filter)
						->where('cb.property_id', $property_id)
						->select(DB::raw('rsi.*'))
						->get();
				for($i = 0; $i < count($datalist); $i++)
					if(!in_array($datalist[$i]->item_name, $ret)) $ret[] = $datalist[$i]->item_name;
				break;
			case 'Housekeeping Status';
				$datalist = DB::table('services_hskp_status as hs')
						->join('common_building as cb', 'hs.bldg_id', '=', 'cb.id')
						->where('hs.status', 'like', $filter)
						->where('cb.property_id', $property_id)
						->select(DB::raw('hs.*'))
						->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->status;
				break;
			case 'origin';
				$datalist = DB::table('common_country as cy')
					->where('cy.name', 'like', $filter.'%')
					->select(DB::raw('cy.*'))
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name;
				break;
			case 'locationgroup';
				$datalist = DB::table('services_location_type as slt')
					->where('slt.type', 'like', $filter.'%')
					->select(DB::raw('slt.type'))
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->type;
				break;
			case 'GuestName';
				$datalist = DB::table('common_guest as cg')
					->where('cg.guest_name', 'like', $filter.'%')
					->select(DB::raw('cg.guest_name'))
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->guest_name;
				break;
			case 'GuestID';
				$datalist = DB::table('common_guest as cg')
					->where('cg.guest_id', 'like', $filter.'%')
					->select(DB::raw('cg.guest_id'))
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->guest_id;
				break;
			case 'GuestEmail';
				$datalist = DB::table('common_guest as cg')
					->where('cg.email', 'like', $filter.'%')
					->select(DB::raw('cg.email'))
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->email;
				break;
			case 'GuestMobile';
				$datalist = DB::table('common_guest as cg')
					->where('cg.mobile', 'like', $filter.'%')
					->select(DB::raw('cg.mobile'))
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->mobile;
				break;
			case 'Email';
				$datalist = DB::table('common_users as cu')
					->where('cu.first_name', 'like', $filter.'%')
					->select(DB::raw('cu.email'))
					->where('cu.deleted','!=',1)
					->distinct()
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->email;
				break;
			case 'Eng Staff';
				 $eng_dept = DB::table('property_setting')
            		->where('settings_key', 'eng_dept_id')
            		->where('property_id', $property_id)
            		->first();

        		$datalist = DB::table('common_users as cu')
            		->leftJoin('common_job_role as jr', 'jr.id', '=', 'cu.job_role_id')
            		->leftJoin('common_department as de','cu.dept_id','=','de.id')
            		->whereRaw("CONCAT(cu.first_name, ' ', cu.last_name) like '%" . $filter . "%'")
         		    ->where('de.property_id', $property_id)
            	//	->whereIn('de.property_id', $property_list)
            		->groupBy('cu.id')
            		->where('cu.deleted', 0)
            		->where('cu.dept_id', $eng_dept->value)
            		->select(DB::raw('cu.id, jr.cost as cost, CONCAT_WS(" ", cu.first_name, cu.last_name) as name, "single" as type, "Individual" as label, cu.active_status'))
            		->orderBy('name')
            		->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->name;
				break;

			case 'Room Type';
				$datalist = DB::table('common_room_type as cy')
					->where('cy.type', 'like', $filter.'%')
					->select(DB::raw('cy.*'))
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->type;
				break;
			case 'Room Status';
				$datalist = DB::table('services_room_status as rs')
					->where('rs.rm_state', 'like', $filter.'%')
					->select(DB::raw('rs.rm_state'))
					->distinct()
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->rm_state;
				break;
			case 'Occupancy';
				$datalist = DB::table('services_room_status as rs')
					->where('rs.occupancy', 'like', $filter.'%')
					->select(DB::raw('rs.occupancy'))
					->distinct()
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->occupancy;
				break;
			case 'Reservation Status';
				$datalist = DB::table('services_room_status as rs')
					->where('rs.fo_state', 'like', $filter.'%')
					->select(DB::raw('rs.fo_state'))
					->distinct()
					->get();

				for($i = 0; $i < count($datalist); $i++)
					$ret[] = $datalist[$i]->fo_state;
				break;

		}

		$ret = array_unique($ret, SORT_REGULAR);
		$ret = array_merge($ret, []);

		//echo json_encode($ret);
		return Response::json($ret);
	}


	public function makeNightAuditReportPdfData($property_id, $channel_id, $build_ids, $condition , $condition_minibar) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$property = DB::table('common_property')->where('id', $property_id)->first();
		if( empty($property) )
		{
			echo "Property does not exist";
			return;
		}
		//deployment1 = eachother, deployment3 = unify/integrate  about buildings
		$deployment_flag = 1 ;
		if(empty($build_ids) || $build_ids[0] == 0) $deployment_flag = 3;

		if($deployment_flag == 3) {
			$builds = DB::table('common_building')->get();
			for($i = 0; $i < count($builds); $i++)
			{
				$build_ids[$i] = $builds[$i]->id;
			}
		}else {
			$builds = DB::table('common_building')->whereIn('id', $build_ids)->get();
		}
		$build_names = '';
		$build_id_array = '';
		for($i = 0; $i < count($builds); $i++)
		{
			if( $i > 0 ) {
				$build_names = $build_names . ',';
				$build_id_array = $build_id_array . ',';
			}
			$build_names = $build_names . $builds[$i]->name;
			$build_id_array = $build_id_array . $builds[$i]->id;
		}
		$ret = [];

		///////////////////////////////guest call/////////////////////////
		$last_night_audit = DB::table('call_night_audit_time')
			->where('channel_id', $channel_id)
			->first();
		if($condition == 0) {

			$query = DB::table('call_guest_call as gc')
				->join('common_room as cr', 'gc.room_id', '=', 'cr.id')
				->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->leftJoin('call_guest_extn as ge', 'gc.extension_id', '=', 'ge.id')
				->leftJoin('call_destination as cd', 'gc.destination_id', '=', 'cd.id')
//				->leftJoin('common_guest as cg', 'gc.guest_id', '=', 'cg.guest_id')
				->leftJoin('common_guest as cg', function($join) {
					$join->on('gc.guest_id', '=', 'cg.guest_id');
					$join->on('cb.property_id', '=', 'cg.property_id');
				})
				->where('cb.property_id', $property_id);

			$query->whereIn('cf.bldg_id', $build_ids);
			$last_date = $cur_time;
			if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
				$query->whereRaw("CONCAT(call_date, ' ', start_time) > '" . $last_night_audit->created_at . "'");
				$last_date = $last_night_audit->created_at;
			}

			$query->whereRaw("CONCAT(call_date, ' ', start_time) <= '" . $cur_time . "'");
			$query->where('total_charges', '>', 0);

			$by_building_query = clone $query;
			$total_guest_query = clone $query;

			$guestcalls = $query
				->orderBy('cr.room')
				->select(DB::raw('gc.*, cr.room, ge.extension, cd.country, cg.guest_name'))
				->get();

			$guest_call_by_building_data = $by_building_query
				->groupBy('cf.bldg_id')
				->select(DB::raw("cb.name,
										sum((gc.call_type = 'International') * gc.total_charges) as International,
										sum((gc.call_type = 'Mobile') * gc.total_charges) as Mobile,
										sum((gc.call_type = 'Local') * gc.total_charges) as Local,
										sum(gc.carrier_charges) as Total_Carrier,
										sum(gc.hotel_charges) as Total_Hotel,
										sum(gc.total_charges) as Total
										"))
				->get();
			$total_guest_call = $total_guest_query
				->select(DB::raw("sum((gc.call_type = 'International') * gc.total_charges) as International,
										sum((gc.call_type = 'Mobile') * gc.total_charges) as Mobile,
										sum((gc.call_type = 'Local') * gc.total_charges) as Local,
										sum(gc.carrier_charges) as Total_Carrier,
										sum(gc.hotel_charges) as Total_Hotel,
										sum(gc.total_charges) as Total
										"))
				->first();

			$minibarlist = [];
			$minibarlist_second = [];
			$minibartotal = [];
			$minibartotal_lost = [];
			if(!empty($condition_minibar) && $condition_minibar != null && $condition_minibar->value == true) {
				$query = DB::table('services_minibar_log as ml')
					->join('common_room as cr', 'ml.room_id', '=', 'cr.id')
					->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
					->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
					->join('common_users as cu', 'ml.user_id', '=', 'cu.id')
//					->leftJoin('common_guest as cg','cg.guest_id','=','ml.guest_id')
					->leftJoin('common_guest as cg', function($join) {
						$join->on('ml.guest_id', '=', 'cg.guest_id');
						$join->on('cb.property_id', '=', 'cg.property_id');
					})
					->where('cb.property_id', $property_id);

				$query->whereIn('cf.bldg_id', $build_ids);
				if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
					$query->whereRaw(" ml.created_at > '" . $last_night_audit->created_at . "'");
				}
				$query->whereRaw(" ml.created_at <= '" . $cur_time . "'");


				$data_query = clone $query;

				$minibarlist = $data_query
					->groupBy('ml.room_id')
					->groupBy('ml.created_at')
					->select(DB::raw('ml.*, date(ml.created_at) as date, time(ml.created_at) as time, cr.room, cg.guest_name,
								CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'))
					->get();

				$item_list = DB::table('services_rm_srv_itm')
					->get();
				$item_list_key = [];
				for($i = 0; $i < count($item_list); $i++ )
					$item_list_key[$item_list[$i]->id] = $item_list[$i];

				$count = 0;

				foreach ($minibarlist as $row) {
					$ids = json_decode($row->item_ids);
					$quantitys = json_decode($row->quantity);
					for($i = 0; $i < count($ids); $i++)
					{
						$item_name = $item_list_key[$ids[$i]]->item_name;
						$item_price = $item_list_key[$ids[$i]]->charge;
						$item_quantity = $quantitys[$i];
						$item_total = number_format($item_price * $item_quantity,2);
						$row ->item_id = $ids[$i];
						$row ->item_name = $item_name;
						$row ->item_quantity =$item_quantity;
						$row ->item_price =$item_price;
						$row ->item_total =$item_total;

						$minibarlist_second[$count] = clone $row ;
						$count++;
					}

				}


				foreach ($minibarlist_second as $row) {
					$item_name = $row->item_name;
					$item_quantity = $row->item_quantity;
					$item_price = $row->item_price;
					$item_total = $row->item_total;
					//if guest_id =0, guest name is lost posting, this means checkout.
					if($row->guest_id != 0 ) {
						if (empty($minibartotal[$item_name])) {
							$minibartotal[$item_name] = clone $row;
							$minibartotal[$item_name]->item_name = $item_name;
							$minibartotal[$item_name]->item_quantity = $item_quantity;
							$minibartotal[$item_name]->item_price = $item_price;
							$minibartotal[$item_name]->item_total = $item_total;
						} else {
							$minibartotal[$item_name]->item_name = $item_name;
							$minibartotal[$item_name]->item_quantity += $item_quantity;
							$minibartotal[$item_name]->item_price = $item_price;
							$minibartotal[$item_name]->item_total += $item_total;
						}
					}else {
						if (empty($minibartotal_lost[$item_name])) {
							$minibartotal_lost[$item_name] = clone $row;
							$minibartotal_lost[$item_name]->item_name = $item_name;
							$minibartotal_lost[$item_name]->item_quantity = $item_quantity;
							$minibartotal_lost[$item_name]->item_price = $item_price;
							$minibartotal_lost[$item_name]->item_total = $item_total;
						} else {
							$minibartotal_lost[$item_name]->item_name = $item_name;
							$minibartotal_lost[$item_name]->item_quantity += $item_quantity;
							$minibartotal_lost[$item_name]->item_price = $item_price;
							$minibartotal_lost[$item_name]->item_total += $item_total;
						}
					}
				}
			}
			$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

			$ret['currency'] = $currency->value;

			$ret['guestcall'] = $guestcalls;
			$ret['minibaroption'] = $condition_minibar->value;
			$ret['minibarlist'] = $minibarlist_second;
			$ret['minibartotal'] = $minibartotal;
			$ret['minibartotal_lost'] = $minibartotal_lost;
			$ret['guest_by_build_data'] = $guest_call_by_building_data;
			$ret['guest_total_value'] = $total_guest_call;
			$ret['report_type'] = "guest";
			$ret['title'] = "Guest Night Audit Report";
			$ret['property'] = Property::find($property_id);
			$ret['generate_date'] =  date('d/m/Y');
			$ret['period'] =  date_format(new DateTime($last_date)  ,'d/m/Y H:i').' to '.date('d/m/Y H:i');
			$ret['extension'] = 'Guest';
			$ret['call_type'] = 'Charged Calls';
			$ret['report_by'] = 'guest';


		}
		////////////////////////////////admin call////////////////////////////////
		if($condition == 1) {
			$query = "";
			$query = DB::table('call_admin_calls as ac')
				->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				->join('call_section as cs', 'se.section_id', '=', 'cs.id')
				->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
				->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
				->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
//				->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id')
//				->leftJoin('common_user_group as cug', 'se.user_group_id', '=', 'cug.id');
				->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');


			$query->whereIn('cs.building_id', $build_ids);

			$last_date = $cur_time;
			if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
				$query->whereRaw("CONCAT(call_date, ' ', start_time) > '" . $last_night_audit->created_at . "'");
				$last_date = $last_night_audit->created_at;
			}

			$query->whereRaw("CONCAT(call_date, ' ', start_time) <= '" . $cur_time . "'");

			$query->where('carrier_charges', '>', 0);

//			$total_query = clone $query;
//			$build_dept_query = clone $query;
//

//			$admincalls = $query->orderBy('ac.extension_id')
//				->select(DB::raw('ac.*, se.extension, dest.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, cs.dept_id, cs.building_id, cd.department, se.user_id as se_user_id, se.user_group_id, cug.name as group_name, cb.name as cb_name'))
//				->get();
//
//			$summary = $total_query
//				->groupBy('cs.building_id')
//				->select(DB::raw("cb.name,
//									sum((ac.call_type = 'International')) as International,
//									sum((ac.call_type = 'Mobile')) as Mobile,
//									sum((ac.call_type = 'Local')) as Local,
//									sum((ac.call_type = 'Local')) as National,
//									sum((ac.call_type = 'Toll Free')) as Toll_Free,
//									sum((ac.call_type = 'International') * ac.carrier_charges) as International_Charge,
//									sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile_Charge,
//									sum((ac.call_type = 'Local') * ac.carrier_charges) as Local_Charge,
//									sum((ac.call_type = 'Local') * ac.carrier_charges) as National_Charge,
//									sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Toll_Free_Charge
//									"))
//				->get();
//
//			$build_dept_summary = $build_dept_query
//				->groupBy('cs.building_id')
//				->groupBy('cs.dept_id')
//				->select(DB::raw("cb.name, cd.department,
//									sum((ac.call_type = 'International')) as International,
//									sum((ac.call_type = 'Mobile')) as Mobile,
//									sum((ac.call_type = 'Local')) as Local,
//									sum((ac.call_type = 'Local')) as National,
//									sum((ac.call_type = 'Toll Free')) as Toll_Free,
//									sum((ac.call_type = 'International') * ac.carrier_charges) as International_Charge,
//									sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile_Charge,
//									sum((ac.call_type = 'Local') * ac.carrier_charges) as Local_Charge,
//									sum((ac.call_type = 'Local') * ac.carrier_charges) as National_Charge,
//									sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Toll_Free_Charge
//									"))
//				->get();
//
//
//			// ====  By building summary table =========================
//			$call_type_count_by_building = [];
//			$building_name = [];
//			for ($i = 0; $i < count($build_ids); $i++) {
//				$call_type_count_by_building[$build_ids[$i]] = [];
//				$call_type_count_by_building[$build_ids[$i]]['Internal'] = 0;
//				$call_type_count_by_building[$build_ids[$i]]['Mobile'] = 0;
//				$call_type_count_by_building[$build_ids[$i]]['International'] = 0;
//				$call_type_count_by_building[$build_ids[$i]]['National'] = 0;
//				$call_type_count_by_building[$build_ids[$i]]['Local'] = 0;
//				$call_type_count_by_building[$build_ids[$i]]['Received'] = 0;
//				$call_type_count_by_building[$build_ids[$i]]['Toll Free'] = 0;
//				$call_type_count_by_building[$build_ids[$i]]['Total'] = 0;
//			}
//
//			$build_list = DB::table('common_building as cb')->whereIn('cb.id', $build_ids)->get();
//			for ($i = 0; $i < count($build_list); $i++) {
//				$building_name[$build_list[$i]->id] = $build_list[$i]->name;
//			}

			///////////////////////////////////
//			$admincall = [];
//			$admincall['admincalls'] = $admincalls;
//			$admincall['summary'] = $summary;
//			$admincall['build_dept_summary'] = $build_dept_summary;
//			$admincall['call_type_count_by_building'] = $call_type_count_by_building;
//			$admincall['building_name'] = $building_name;
//			$ret['admincall'] = $admincall;
			$by_building_query = clone $query;

			$admin_call_by_building_data = $by_building_query->groupBy('cs.building_id')
				->select(DB::raw("cb.name,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum(ac.carrier_charges) as Total_Carrier
										"))
				->get();
			$by_build_data = [];
			$total_value = [];
			$total_value['International'] = 0;
			$total_value['Mobile'] = 0;
			$total_value['International'] = 0;
			$total_value['Local'] = 0;
			$total_value['Total'] = 0.0;
			$total_value['Total_Carrier'] = 0;
			$total_value['Profit'] = 0;

			foreach($admin_call_by_building_data as $row)
			{
				if(empty($by_build_data[$row->name]))
				{
					$by_build_data[$row->name] = [];
					$by_build_data[$row->name]['name'] = $row->name;
					$by_build_data[$row->name]['International'] = 0;
					$by_build_data[$row->name]['Mobile'] = 0;
					$by_build_data[$row->name]['Local'] = 0;
					$by_build_data[$row->name]['Total_Carrier'] = 0;
					$by_build_data[$row->name]['Total'] = 0;
					$by_build_data[$row->name]['Profit'] = 0;
				}

				$by_build_data[$row->name]['International'] += $row->International;
				$by_build_data[$row->name]['Mobile'] += $row->Mobile;
				$by_build_data[$row->name]['Local'] += $row->Local;
				$by_build_data[$row->name]['Total_Carrier'] += $row->Total_Carrier;
				$by_build_data[$row->name]['Total'] += $row->Total_Carrier;

				$total_value['International'] += $row->International;
				$total_value['Mobile'] += $row->Mobile;
				$total_value['Local'] += $row->Local;
				$total_value['Total_Carrier'] += $row->Total_Carrier;
				$total_value['Total'] += $row->Total_Carrier;
			}

			$total_admin_query = clone $query;

			$total_admin_call = $total_admin_query
				->select(DB::raw("sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum(ac.carrier_charges) as Total_Carrier
										"))
				->first();

			$admin_call_by_building_dept_section_data = [];
			$admin_call_by_building_dept_data = [];

			$by_building_dept_query = clone $query;

			$result = $by_building_dept_query
				->groupBy('cs.building_id')
				->groupBy('cs.dept_id')
				->select(DB::raw("cb.name, dept.department,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum(ac.carrier_charges) as Total_Carrier
										"))
				->get();
			foreach($result as $row)
			{
				$building = $row->name;
                $admin_call_by_building_dept_section_data[$building]['department'][] = $row;
			}

			$by_building_section_query = clone $query;

			$result = $by_building_section_query
				->groupBy('cs.building_id')
				->groupBy('cs.id')
				->select(DB::raw("cb.name,dept.department, cs.section,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum(ac.carrier_charges) as Total_Carrier
										"))
				->get();
/*
			foreach($result as $row)
			{
				$building = $row->name;
				if( empty($admin_call_by_building_dept_section_data[$building]) ) {
					$admin_call_by_building_dept_section_data[$building] = [];
				}

				if( empty($admin_call_by_building_dept_section_data[$building]['section']) ) {
					$admin_call_by_building_dept_section_data[$building]['section'] = [];
				}
$admin_call_by_building_dept_section_data[$building]['section'][] = $row;
			}
*/
/*
			foreach($result as $row)
			{
				$department = $row->department;
				if( empty($admin_call_by_building_dept_data[$department]) ) {
					$admin_call_by_building_dept_data[$department] = [];

				}
				if( empty($admin_call_by_building_dept_data[$department]['section']) ) {
					$admin_call_by_building_dept_data[$department]['section'] = [];
				}

                $admin_call_by_building_dept_data[$department]['section'][] = $row;
			}
*/

		foreach($result as $row)
		{
			$building = $row->name;
			$department = $row->department;
//
            $admin_call_by_building_dept_section_data[$building]['depart'][$department]['section'][] = $row;
			//$admin_call_by_building_dept_section_data[$building]['department'][$department]['section'] = $row;
		}
			$data_query = clone $query;

			$data_list = $data_query
				->orderBy('call_date')
				->select(DB::raw('ac.*, se.extension, cd.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, dept.department'))
				->get();

			$admin_call_list = [];

			foreach ($data_list as $row) {
				$group_key = $row->call_date;
				$ret['report_by_admin_call'] = 'Department';
				$group_key = $row->department;
				$admin_call_list[$group_key][] = $row;
			}

			$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

			$ret['currency'] = $currency->value;

			$ret['by_build_data'] = $by_build_data;
			$ret['minibaroption'] = '';
			$ret['total_value'] = $total_value;
			$ret['admin_by_build_data'] = $admin_call_by_building_data;
			$ret['admin_total_value'] = $total_admin_call;
			$ret['admin_by_build_dept_section_data'] = $admin_call_by_building_dept_section_data;
			$ret['admin_by_build_dept_data'] = $admin_call_by_building_dept_data;
			$ret['admin_call_list'] = $admin_call_list;

			$ret['report_type'] = "admin";
			$ret['title'] = "Daily Night Audit Report for Admin";
			$ret['property'] = Property::find($property_id);
			$ret['generate_date'] =  date('jS \of F Y H:i:s');
			//$ret['period'] =  date_format(new DateTime($last_date) ,'jS \of F Y').' to '.date('jS \of F Y');
			$ret['period'] =  date_format(new DateTime($last_date)  ,'jS \of F Y H:i:s').' to '.date('jS \of F Y H:i:s');
			$ret['extension'] = 'Admin';
			$ret['call_type'] = 'Charged Calls';
			$ret['report_by'] = 'admin';

		}

		return $ret;
	}

	// http://192.168.1.253/test/sendaudit?property_id=4&build_id=6&&channe_id=10
	public function testNightAuditReport(Request $request) {
		$property_id = $request->get('property_id', 4);
		$channel_id = $request->get('channel_id', 10);
		$build_id = $request->get('build_id', 6);
		$build_ids = [$build_id];
		$build_ids = [];
		$this->sendNightAuditReport($property_id, $channel_id, $build_ids);
	}

	function getPropertySetting($property_id, $setting_key) {

		$data = DB::table('property_setting')
			->where('settings_key', $setting_key)
			->where('property_id', $property_id)
			->first();
		return  $data;
	}

	public function sendNightAuditEmailPdf($property_id, $channel_id, $build_ids , $report_extension ) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);
		$datetime = date('d_M_Y');


		$deployment_flag = 1 ;
		if(empty($build_ids) || $build_ids[0] == 0) $deployment_flag = 3;

		if($deployment_flag == 3) {
			$builds = DB::table('common_building')->get();
			for($i = 0; $i < count($builds); $i++)
			{
				$build_ids[$i] = $builds[$i]->id;
			}
		}else {
			$builds = DB::table('common_building')->whereIn('id', $build_ids)->get();
		}

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
		$property_name = $property->name;

		$build_names = '';
		$build_id_array = '';
		for ($i = 0; $i < count($builds); $i++) {
			if ($i > 0) {
				$build_names = $build_names . ',';
				$build_id_array = $build_id_array . ',';
			}
			$build_names = $build_names . $builds[$i]->name;
			$build_id_array = $build_id_array . $builds[$i]->id;
		}

		$recipients = $this->getPropertySetting($property_id, 'night_audit_recipients');
		$settings = PropertySetting::getReportSetting($property_id);

		$condition_mail = $this->getPropertySetting($property_id, 'night_audit_email_flag');
		if(empty($condition_mail) || $condition_mail == null )
			$condition_mail = (object)array('value' => 'NO');

		$condition_minibar = $this->getPropertySetting($property_id, 'night_audit_include_mb');
		if(empty($condition_minibar) || $condition_minibar == null )
			$condition_minibar = (object)array('value' => 'false');


		ob_start();
		$filename = "";
		if($report_extension == 'guest') {
			if ($deployment_flag == 3) $filename = $property_name . '_Night_Audit_Guest_' . $datetime;
			else $filename = $build_names . '_Night_Audit_Guest_' . $datetime;
		}

		if($report_extension == 'admin') {
			if($deployment_flag == 3)  $filename = $property_name.'_Night_Audit_Admin_' . $datetime;
			else $filename = $build_names . '_Night_Audit_Admin_' . $datetime;
		}

		$folder_path = public_path() . '/uploads/reports/';
		$path = $folder_path . $filename . '.html';
		$path_pdf = $folder_path . $filename . '.pdf';

		if($report_extension == 'guest')
			$data = $this->makeNightAuditReportPdfData($property_id, $channel_id, $build_ids, 0 ,$condition_minibar);

		if($report_extension == 'admin')
			$data = $this->makeNightAuditReportPdfData($property_id, $channel_id, $build_ids, 1 , '');

		//report font size
		$data['font-size']='7px';

				$content = view('frontend.report.nightaudit_pdf', compact('data'))->render();
		echo $content;

		file_put_contents($path, ob_get_contents());
		ob_clean();

		$filters = [];
		$filters['property_id'] = $property_id;
		$filters['channel_id'] = $channel_id;
		$filters['build_id'] = $build_ids;

		$report_target = "Night Audit";
		$report_history = new ReportHistory();
		$report_history->type = $report_target;
		$report_history->folder_path = "/uploads/reports/";
		$report_history->filename = $filename . '.pdf';
		$report_history->filter = json_encode($filters);
		$report_history->created_at = $cur_time;
		$report_history->save();

		$request = [];
		$request['filename'] = $filename . '.pdf';
		$request['folder_path'] = $folder_path;
		$request['to'] = $recipients->value;

		if($report_extension == 'guest') {
			$subject = $settings['night_audit_guest_report_subject'];
		}

		if($report_extension == 'admin') {
			$subject = $settings['night_audit_admin_report_subject'];
		}

		$request['subject'] = $subject;
		$request['html'] = $subject;
		$request['content'] = view('emails.night_audit')->render();


		$smtp = Functions::getMailSetting($property_id, '');
		$request['smtp'] = $smtp;

		$options = [];
		$options['html'] = $path;
		$options['pdf'] = $path_pdf;
		//$options['paperSize'] = array('format' => 'A4', 'orientation' => 'landscape');
		$options['paperSize'] = array('format' => 'A4', 'orientation' => 'portrait');
		$options['mail_option'] = $condition_mail->value;
		$options['subject'] = "night_audit";
		$request['options'] = $options;

		$message = [];
		$message['type'] = 'report_pdf';
		$message['content'] = $request;

		Redis::publish('notify', json_encode($message));
	}

	public function sendNightAuditReport($property_id, $channel_id, $build_ids)
	{
		/*
		 * in first deployment
		 */
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		//read property_setting and compare  night_audit_file_type(PDF/Excel), night_audit_email_flag
		$condition = $this->getPropertySetting($property_id, 'night_audit_file_type');
		if(empty($condition) || $condition == null)
			$condition = (object)array('value' => 'PDF');

		$condition_mail = $this->getPropertySetting($property_id, 'night_audit_email_flag');
		if(empty($condition_mail) || $condition_mail == null )
			$condition_mail = (object)array('value' => 'NO');

		$condition_minibar = $this->getPropertySetting($property_id, 'night_audit_include_mb');
		if(empty($condition_minibar) || $condition_minibar == null )
			$condition_minibar = (object)array('value' => 'false');


		$recipients = $this->getPropertySetting($property_id, 'night_audit_recipients');

		$property = DB::table('common_property')->where('id', $property_id)->first();
		if (empty($property)) {
			echo "Property does not exist";
			return;
		}
        $property_name = $property->name;
		$logo_path = $property->logo_path;

		$report_extension = '';
		$extension = $this->getPropertySetting($property_id, 'night_audit_report_extensions');
        if(empty($extension) || $extension == null) {
			$report_extension = "guest" ;
		}else {
			$report_extension = $extension->value ;
		}


		//deployment1 = eachother, deployment3 = unify/integrate
		$deployment_flag = 1 ;
		if(empty($build_ids) || $build_ids[0] == 0) $deployment_flag = 3;

		if($deployment_flag == 3) {
			$builds = DB::table('common_building')->get();
			for($i = 0; $i < count($builds); $i++)
			{
				$build_ids[$i] = $builds[$i]->id;
			}
		}else {
			$builds = DB::table('common_building')->whereIn('id', $build_ids)->get();
		}


		$build_names = '';
		$build_id_array = '';
		for ($i = 0; $i < count($builds); $i++) {
			if ($i > 0) {
				$build_names = $build_names . ',';
				$build_id_array = $build_id_array . ',';
			}
			$build_names = $build_names . $builds[$i]->name;
			$build_id_array = $build_id_array . $builds[$i]->id;
		}

		$settings = PropertySetting::getReportSetting($property_id);


		if($condition->value == 'PDF') {
			//if condition is PDF  save common_report_history table
			if($report_extension == "guest") {
				$this->sendNightAuditEmailPdf($property_id,$channel_id, $build_ids, $report_extension);
			}

			if($report_extension == "admin") {
				$this->sendNightAuditEmailPdf($property_id,$channel_id, $build_ids, $report_extension);
			}

			if($report_extension == "both") {
				for ($i = 0; $i < 2; $i++) {
					if($i == 0)
						$this->sendNightAuditEmailPdf($property_id,$channel_id, $build_ids,  'guest');
					if($i == 1)
						$this->sendNightAuditEmailPdf($property_id,$channel_id, $build_ids, 'admin');
				}
			}
			$last_time = DB::table('call_night_audit_time')
				->where('channel_id', $channel_id)
				->first();

			if (empty($last_time)) {
				DB::table('call_night_audit_time')
					->insert(array('channel_id' => $channel_id, 'build_ids' => $build_id_array, 'created_at' => $cur_time));
			} else {
				DB::table('call_night_audit_time')
					->where('channel_id', $channel_id)
					->update(array('build_ids' => $build_id_array, 'created_at' => $cur_time));
			}

		}else { //excel_nightaudit
			$datetime = date('d_M_Y');

			$last_night_audit = DB::table('call_night_audit_time')
				->where('channel_id', $channel_id)
				->first();
			$period = $cur_time;
			if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
				$period = $last_night_audit->created_at;
			}
			$period = date_format(new DateTime($period) ,'jS \of F Y')." to ".date('jS \of F Y');

			if($report_extension == 'guest'||$report_extension == 'both') {
					if($deployment_flag == 3) $guest_call_filename = $property_name.'_Night_Audit_Guest_' . $datetime;
					else  $guest_call_filename = $build_names . '_Night_Audit_Guest_' . $datetime;

					$guest_call_ret = Excel::create($guest_call_filename, function ($excel) use ($property_id, $channel_id, $build_ids, $cur_time ,$period ,$logo_path,$condition_minibar) {
						$excel->sheet('New sheet', function ($sheet) use ($property_id, $channel_id, $build_ids, $cur_time ,$period ,$logo_path ,$condition_minibar) {
							$sheet->setOrientation('landscape');

							$this->outputLogo($sheet, $logo_path);

							$this->outputDescription($sheet, 'Guest' , $period);
							//$this->outputGraph($sheet);
							$row_num = 9;
							$row_num = $this->outputGuestCall($sheet, $row_num, $property_id, $channel_id, $build_ids, $cur_time ,$condition_minibar);
						});

					})->store('xls', false, true);
					$guest_call_path = $guest_call_ret['full'];
			}

			if($report_extension == 'admin'||$report_extension == 'both') {

				if($deployment_flag == 3) $admin_call_filename = $property_name.'_Night_Audit_Admin_' . $datetime;
				else $admin_call_filename = $build_names . '_Night_Audit_Admin_' . $datetime;

				$admin_call_ret = Excel::create($admin_call_filename, function ($excel) use ($property_id, $channel_id, $build_ids, $cur_time,$period ,$logo_path ) {
					$excel->sheet('New sheet', function ($sheet) use ($property_id, $channel_id, $build_ids, $cur_time ,$period ,$logo_path) {
						$sheet->setOrientation('landscape');

						$this->outputLogo($sheet , $logo_path);

						$this->outputDescription($sheet, 'Admin' , $period);

						$row_num = 9;
						$row_num = $this->outputAdminCall($sheet, $row_num, $property_id, $channel_id, $build_ids, $cur_time);
					});

				})->store('xls', false, true);

				$admin_call_path = $admin_call_ret['full'];
			}


			$last_time = DB::table('call_night_audit_time')
				->where('channel_id', $channel_id)
				->first();

			if (empty($last_time)) {
				DB::table('call_night_audit_time')
					->insert(array('channel_id' => $channel_id, 'build_ids' => $build_id_array, 'created_at' => $cur_time));
			} else {
				DB::table('call_night_audit_time')
					->where('channel_id', $channel_id)
					->update(array('build_ids' => $build_id_array, 'created_at' => $cur_time));
			}


			$smtp = [];
			$keys = ['smtp_server', 'smtp_port', 'smtp_user', 'smtp_password', 'smtp_sender', 'smtp_auth', 'smtp_tls'];
			for ($i = 0; $i < count($keys); $i++) {
				$data = DB::table('property_setting as ps')
					->where('ps.property_id', $property_id)
					->where('ps.settings_key', $keys[$i])
					->select(DB::raw('ps.value'))
					->first();

				if (empty($data))
					continue;

				$smtp[$keys[$i]] = $data->value;
			}

			//mail or list in day end list
			if($condition_mail->value == "YES") {
				$recipients = DB::table('property_setting')
					->where('property_id', $property_id)
					->where('settings_key', 'night_audit_recipients')
					->first();

				$message = [];
				if($report_extension == "guest") {
					$message['attach'] = $guest_call_path;
					$message['content'] = $build_names . ' Night Audit Report for ' . date('jS \of F Y');
				$message['type'] = 'excel';
				$message['smtp'] = $smtp;
				if (!empty($recipients))
					$message['to'] = $recipients->value;
				else
					$message['to'] = 'jyyblue1987@outlook.com';

				$message['subject'] = $settings['night_audit_report_subject'];
				$message['title'] = $build_names . ' Night Audit Report';




				Redis::publish('notify', json_encode($message));
				echo json_encode($message);
				}
				if($report_extension == "admin") {
					$message['attach'] = $admin_call_path;
					$message['content'] = $build_names . ' Night Audit Report for ' . date('jS \of F Y');
				$message['type'] = 'excel';
				$message['smtp'] = $smtp;
				if (!empty($recipients))
					$message['to'] = $recipients->value;
				else
					$message['to'] = 'jyyblue1987@outlook.com';

				$message['subject'] = $settings['night_audit_report_subject'];
				$message['title'] = $build_names . ' Night Audit Report';




				Redis::publish('notify', json_encode($message));
				echo json_encode($message);
				}
				if($report_extension == "both") {
					$message['attach'] = $guest_call_path;
					$message['content'] = 'Please find attached Guest Night Audit Report for ' . date('jS \of F Y');
				$message['type'] = 'excel';
				$message['smtp'] = $smtp;
				if (!empty($recipients))
					$message['to'] = $recipients->value;
				else
					$message['to'] = 'jyyblue1987@outlook.com';

				$message['subject'] = 'Guest Night Audit Report';
				$message['title'] = $build_names . ' Night Audit Report';




				Redis::publish('notify', json_encode($message));
				echo json_encode($message);
				$message['attach'] = $admin_call_path;
				$message['content'] = 'Please find attached Admin Night Audit Report for ' . date('jS \of F Y');
				$message['type'] = 'excel';
				$message['smtp'] = $smtp;
				if (!empty($recipients))
					$message['to'] = $recipients->value;
				else
					$message['to'] = 'jyyblue1987@outlook.com';

				$message['subject'] = 'Admin Night Audit Report';
				$message['title'] = $build_names . ' Night Audit Report';




				Redis::publish('notify', json_encode($message));
				echo json_encode($message);


				}

			}
				// save database
				$report_target = "Night Audit";
				$filters = [];
				$filters['property_id'] = $property_id;
				$filters['channel_id'] = $channel_id;
				$filters['build_id'] = $build_ids;
				if($report_extension == "guest") {
					$report_history = new ReportHistory();
					$report_history->type = $report_target;
					$report_history->folder_path = "/uploads/reports/";
					$report_history->filename = $guest_call_filename . '.xls';
					$report_history->filter = json_encode($filters);
					$report_history->created_at = $cur_time;
					$report_history->save();
				}
				if($report_extension == "admin") {
					$report_history = new ReportHistory();
					$report_history->type = $report_target;
					$report_history->folder_path = "/uploads/reports/";
					$report_history->filename = $admin_call_filename . '.xls';
					$report_history->filter = json_encode($filters);
					$report_history->created_at = $cur_time;
					$report_history->save();
				}
				if($report_extension == "both") {
					for ($m = 0; $m < 2; $m++) {
						$report_history = new ReportHistory();
						$report_history->type = $report_target;
						$report_history->folder_path = "/uploads/reports/";
						if ($m == 0) {
							$report_history->filename = $guest_call_filename . '.xls';
						}
						IF ($m == 1) {
							$report_history->filename = $admin_call_filename . '.xls';
						}

						$report_history->filter = json_encode($filters);
						$report_history->created_at = $cur_time;
						$report_history->save();
					}
				}

			//echo json_encode($guest_call_path);
		}
	}

	private function outputLogo($sheet,$logo_path) {
		// Hotlync Logo
		$sheet->mergeCells('A1:C1');
		$sheet->mergeCells('A2:C2');
		$sheet->mergeCells('A3:C3');

		$sheet->setMergeColumn(array(
				'columns' => array('G','H','I'),
				'rows' => array(
						array(1,3),
				)
		));

		$hotlync_logo = new PHPExcel_Worksheet_Drawing;
		$hotlync_logo->setPath(public_path('images/ennovatech_mark.png')); //your image path
		$hotlync_logo->setCoordinates('A1');
		$hotlync_logo->setHeight(60);
		$hotlync_logo->setWorksheet($sheet);

		// Arenco Logo
		$sheet->mergeCells('G1:I1');
		$sheet->mergeCells('G2:I2');
		$sheet->mergeCells('G3:I3');

		$sheet->setMergeColumn(array(
				'columns' => array('A','B','C'),
				'rows' => array(
						array(1,3),
				)
		));

		$arenco_logo = new PHPExcel_Worksheet_Drawing;
		//$arenco_logo->setPath(public_path('frontpage/img/goldensands.png')); //your image path
		$arenco_logo->setPath(public_path($logo_path)); //your image path
		$arenco_logo->setCoordinates('G1');
		$arenco_logo->setHeight(60);
		$arenco_logo->setWorksheet($sheet);
	}

	private function outputDescription($sheet, $extension, $period) {

		// Report title
		//$sheet->mergeCells('A4:I4');
		$sheet->mergeCells('C4:E4');
		$sheet->cell('C4', function($cell) use ($extension) {
			$cell->setAlignment('center');
			$cell->setValue('Daily Night Audit Report for '.$extension);
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});

		//Generate Date
		$sheet->mergeCells('G5:I5');
		$sheet->cell('G5', function($cell) {
			$cell->setAlignment('left');
			$cell->setFontColor('#1b1b1b');
			$cur_date = date('jS \of F Y');
			$cell->setValue('Date Generated: '  . $cur_date);
			$cell->setFont(array(
				'family'     => 'Calibri',
				'size'       => '11',
				'bold'       =>  true
			));
		});

		// Report Date
		$sheet->mergeCells('G6:I6');
		$sheet->cell('G6', function($cell) use ($period) {
			$cell->setAlignment('left');
			$cell->setFontColor('#1b1b1b');
			$cur_date = date('jS \of F Y');
			$cell->setValue('Period : '  . $period);
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});


		// Report Type
		$sheet->mergeCells('G7:I7');
		$sheet->cell('G7', function($cell) {
			$cell->setAlignment('left');
			$cell->setFontColor('#1b1b1b');
			$cell->setValue('Type : Detail');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});

//		// Extensions
//		$sheet->mergeCells('F5:I5');
//		$sheet->cell('F5', function($cell) use($extension) {
//			$cell->setAlignment('center');
//			$cell->setFontColor('#5b9bd5');
//			$cell->setValue('Extension: ' . $extension);
//			$cell->setFont(array(
//					'family'     => 'Calibri',
//					'size'       => '11',
//					'bold'       =>  true
//			));
//		});
//
//		// Call Type
//		$sheet->mergeCells('F6:I6');
//		$sheet->cell('F6', function($cell) {
//			$cell->setAlignment('center');
//			$cell->setFontColor('#5b9bd5');
//			$cell->setValue('Call Type : Charged Calls');
//			$cell->setFont(array(
//					'family'     => 'Calibri',
//					'size'       => '11',
//					'bold'       =>  true
//			));
//		});
	}

	private function outputGraph($sheet) {
		// Top Called Destinations
		$sheet->mergeCells('A14:D14');
		$sheet->cell('A14', function($cell) {
			$cell->setAlignment('center');
			$cell->setFontColor('#5b9bd5');
			$cell->setValue('Top Called Destinations (month to date)');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});

		// Telephone Cost Vs Profit
		$sheet->mergeCells('E14:I14');
		$sheet->cell('E14', function($cell) {
			$cell->setAlignment('center');
			$cell->setFontColor('#5b9bd5');
			$cell->setValue('Telephone Cost Vs Profit (month to date)');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});
	}

	private function outputGuestCall($sheet, $row_num, $property_id, $channel_id, $build_ids,  $cur_time ,$condition_minibar)
	{
		$last_night_audit = DB::table('call_night_audit_time')
				->where('channel_id', $channel_id)
				->first();

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$query = DB::table('call_guest_call as gc')
				->join('common_room as cr', 'gc.room_id', '=', 'cr.id')
				->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->leftJoin('call_guest_extn as ge', 'gc.extension_id', '=', 'ge.id')
				->leftJoin('call_destination as cd', 'gc.destination_id', '=', 'cd.id')
//				->leftJoin('common_guest as cg', 'gc.guest_id', '=', 'cg.guest_id')
				->leftJoin('common_guest as cg', function($join) {
					$join->on('gc.guest_id', '=', 'cg.guest_id');
					$join->on('cb.property_id', '=', 'cg.property_id');
				});

		$query->whereIn('cf.bldg_id', $build_ids);

		if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
			$query->whereRaw("CONCAT(call_date, ' ', start_time) > '" . $last_night_audit->created_at . "'");
		}

		$query->whereRaw("CONCAT(call_date, ' ', start_time) <= '" . $cur_time . "'");
		$query->where('total_charges', '>', 0);

		$by_building_query = clone $query;
		$total_guest_query = clone $query;

		$guestcalls = $query
				->orderBy('cr.room')
				->select(DB::raw('gc.*, cr.room, ge.extension, ge.primary_extn, cd.country, cg.guest_name '))
				->get();

		$guest_call_by_building_data = $by_building_query
			->groupBy('cf.bldg_id')
			->select(DB::raw("cb.name,
										sum((gc.call_type = 'International') * gc.total_charges) as International,
										sum((gc.call_type = 'Mobile') * gc.total_charges) as Mobile,
										sum((gc.call_type = 'Local') * gc.total_charges) as Local,
										sum(gc.carrier_charges) as Total_Carrier,
										sum(gc.hotel_charges) as Total_Hotel,
										sum(gc.total_charges) as Total
										"))
			->get();
		$total_guest_call = $total_guest_query
			->select(DB::raw("sum((gc.call_type = 'International') * gc.total_charges) as International,
										sum((gc.call_type = 'Mobile') * gc.total_charges) as Mobile,
										sum((gc.call_type = 'Local') * gc.total_charges) as Local,
										sum(gc.carrier_charges) as Total_Carrier,
										sum(gc.hotel_charges) as Total_Hotel,
										sum(gc.total_charges) as Total
										"))
			->first();

		// Guest Call
		$sheet->cell('A' . $row_num, function($cell) {
			$cell->setValue('Guest:');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});
		$row_num++;

		//$sheet->setBorder('A' . $row_num . ':G' . $row_num, 'thin');
		// table header
		$sheet->cell('A' . $row_num . ':G' . $row_num, function($cell) {
			$cell->setFontColor('#fafbfb');
			$cell->setBackground('#2c3e50');
			$cell->setFont(array(
					'family'     => 'Calibri',
					'size'       => '11',
					'bold'       =>  true
			));
		});

		$guestbuilding_header = array('Building', 'International', 'Local', 'Mobile', 'Total Carrier', 'Total Hotel', 'Total');
		$sheet->row($row_num, $guestbuilding_header);
		$row_num++;
		for($i = 0; $i < count($guest_call_by_building_data); $i++) {
			$call = $guest_call_by_building_data[$i];
			$row = array(
				$call->name, number_format($call->International,2), number_format($call->Local,2) ,
				number_format($call->Mobile,2), number_format($call->Total_Carrier,2), number_format($call->Total_Hotel,2),
				number_format($call->Total,2)
			);
			$sheet->cell('A' . $row_num . ':G' . $row_num, function($cell) {
				$cell->setAlignment('right');
			});
			$sheet->row($row_num, $row);
			$row_num++;
		}

		$call_1 = $total_guest_call;
		$row_1 = array(
			'Total', number_format($call_1->International,2), number_format($call_1->Local,2) ,
			number_format($call_1->Mobile,2), number_format($call_1->Total_Carrier,2), number_format($call_1->Total_Hotel,2),
			number_format($call_1->Total,2)
		);
		$sheet->cell('A' . $row_num . ':G' . $row_num, function($cell) {
			$cell->setAlignment('right');
		});
		$sheet->cell('A' . $row_num . ':G' . $row_num, function($cell) {
			$cell->setFontColor('#020202');
			$cell->setBackground('#e0e0e0');
			$cell->setFont(array(
				'family'     => 'Calibri',
				'size'       => '11',
				'bold'       =>  true
			));
		});
		$sheet->row($row_num, $row_1);
		$row_num +=2;

		$row_num++;

		$call_count = 0;
		$cost = 0;
		$profit = 0;
		$total = 0;
		$total_cost = 0;
		$total_profit = 0;
		$total_price = 0;

		$carrier_charges = 0;
		$hotel_charges =0;
		$tax  =  0;
		$total_charges = 0 ;

		$total_carrier_charges =0;
		$total_hotel_charges =0;
		$total_tax = 0 ;
		$total_total_charges = 0;

		$call_type_count = [];
		$call_type_count['Internal'] = 0;
		$call_type_count['Mobile'] = 0;
		$call_type_count['International'] = 0;
		$call_type_count['National'] = 0;
		$call_type_count['Local'] = 0;
		$call_type_count['Received'] = 0;
		$call_type_count['Toll Free'] = 0;
		$call_type_count['Total'] = 0;

		$call_type_price = [];
		$call_type_price['Internal'] = 0;
		$call_type_price['Mobile'] = 0;
		$call_type_price['International'] = 0;
		$call_type_price['National'] = 0;
		$call_type_price['Local'] = 0;
		$call_type_price['Received'] = 0;
		$call_type_price['Toll Free'] = 0;
		$call_type_price['Total'] = 0;
		$duration = 0;


		for($i = 0; $i < count($guestcalls); $i++)
		{
			$call = $guestcalls[$i];
			if($call_count == 0) {
				$title = array('Room: '.$call->room);
				$sheet->row($row_num, $title);
				$row_num++;

				//$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');
				// table header
				$sheet->cell('A' . $row_num . ':L' . $row_num, function($cell) {
					$cell->setFontColor('#fafbfb');
					$cell->setBackground('#2c3e50');
					$cell->setFont(array(
						'family'     => 'Calibri',
						'size'       => '11',
						'bold'       =>  true
					));
				});

				$guestcall_header = array('Date','Time', 'Extension', 'Guest Name', 'Called No', 'Duration', 'Call Type', 'Destination', 'Carrier Charges', 'Hotel charges','Tax','Total charges');

				$sheet->row($row_num, $guestcall_header);
				$row_num++;
			}

			$row = array(
				date_format(new Datetime($call->call_date),'d-M-Y') , $call->start_time, $call->extension,$call->guest_name,
				$call->called_no, gmdate("H:i:s", $call->duration), $call->call_type, $call->country,$call->carrier_charges,
				$call->hotel_charges, $call->tax , $call->total_charges
			);

			$sheet->row($row_num, $row);

			$sheet->cell('I' . $row_num . ':L' . $row_num, function($cell) {
				$cell->setAlignment('right');
			});

			$row_num++;
			$call_count++;
			$cost += $call->carrier_charges;
			$profit += $call->tax + $call->hotel_charges;
			$total += $call->total_charges;

			$total_cost += $call->carrier_charges;
			$total_profit += $call->tax + $call->hotel_charges;
			$total_price += $call->total_charges;

			$duration += $call->duration;

			$carrier_charges += $call->carrier_charges;
			$hotel_charges  += $call->hotel_charges;
			$tax  +=  $call->tax;
			$total_charges += $call->total_charges ;

			$total_carrier_charges += $call->carrier_charges;
			$total_hotel_charges += $call->hotel_charges;
			$total_tax  +=  $call->tax;
			$total_total_charges += $call->total_charges ;

			if($i == count($guestcalls) - 1 ||		// last row
					$call->room != $guestcalls[$i + 1]->room	// diff row
			)
			{
				$sheet->mergeCells('A' . $row_num . ':H' . $row_num);
				$sheet->cell('A' . $row_num, function($cell) use ($call_count) {
					$cell->setAlignment('right');
				});

				$sheet->cell('I' . $row_num . ':L' . $row_num, function($cell) {
					$cell->setFontColor('#020202');
					$cell->setBackground('#e0e0e0');
					$cell->setAlignment('right');
				});

				$sum_row = array('Total ' . $call_count . ' Calls', '', '', '', '', '', '', '', $currency->value. ' ' . number_format($carrier_charges, 2),
				$currency->value. ' ' . number_format($hotel_charges, 2),  $currency->value . ' ' . number_format($tax, 2),
				$currency->value . ' ' . number_format($total_charges, 2));
				$sheet->row($row_num, $sum_row);
				//$sheet->setBorder('A' . $row_num . ':I' . $row_num, 'thin');

				$call_count = 0;
				$cost = 0;
				$profit = 0;
				$total = 0;

				$carrier_charges = 0;
				$hotel_charges = 0;
				$tax  =  0;
				$total_charges = 0 ;
				$row_num +=2;

			}

			if( !array_key_exists($call->call_type, $call_type_count ) )
				$call_type_count[$call->call_type] = 0;
			$call_type_count[$call->call_type]++;

			if( !array_key_exists($call->call_type, $call_type_price ) )
				$call_type_price[$call->call_type] = 0;
			$call_type_price[$call->call_type] += $call->total_charges;

			$call_type_count['Total']++;
			$call_type_price['Total'] += $call->total_charges;
		}
		$row_num += 2;

		// -------------add minibarlist--------------------------------
		$minibarlist = [];
		$minibarlist_second = [];
		$minibartotal = [];
		$minibartotal_lost = [];
		if(!empty($condition_minibar) && $condition_minibar != null && $condition_minibar->value == true) {
			$query = DB::table('services_minibar_log as ml')
				->join('common_room as cr', 'ml.room_id', '=', 'cr.id')
				->join('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
				->join('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
				->join('common_users as cu', 'ml.user_id', '=', 'cu.id')
//				->leftJoin('common_guest as cg','cg.guest_id','=','ml.guest_id')
				->leftJoin('common_guest as cg', function($join) {
					$join->on('ml.guest_id', '=', 'cg.guest_id');
					$join->on('cb.property_id', '=', 'cg.property_id');
				})
				->where('cb.property_id', $property_id);

			$query->whereIn('cf.bldg_id', $build_ids);
			if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
				$query->whereRaw(" ml.created_at > '" . $last_night_audit->created_at . "'");
			}
			$query->whereRaw(" ml.created_at <= '" . $cur_time . "'");


			$data_query = clone $query;

			$minibarlist = $data_query
				->groupBy('ml.room_id')
				->groupBy('ml.created_at')
				->select(DB::raw('ml.*, date(ml.created_at) as date, time(ml.created_at) as time, cr.room, cg.guest_name,
								CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'))
				->get();

			$item_list = DB::table('services_rm_srv_itm')
				->get();
			$item_list_key = [];
			for($i = 0; $i < count($item_list); $i++ )
				$item_list_key[$item_list[$i]->id] = $item_list[$i];

			$count = 0;

			foreach ($minibarlist as $row) {
				$ids = json_decode($row->item_ids);
				$quantitys = json_decode($row->quantity);
				for($i = 0; $i < count($ids); $i++)
				{
					$item_name = $item_list_key[$ids[$i]]->item_name;
					$item_price = $item_list_key[$ids[$i]]->charge;
					$item_quantity = $quantitys[$i];
					$item_total = number_format($item_price * $item_name,2);
					$row ->item_id = $ids[$i];
					$row ->item_name = $item_name;
					$row ->item_quantity =$item_quantity;
					$row ->item_price =$item_price;
					$row ->item_total =$item_total;
					$minibarlist_second[$count] = clone $row ;
					$count++;
				}

			}


			foreach ($minibarlist_second as $row) {
				$item_name = $row->item_name;
				$item_quantity = $row->item_quantity;
				$item_price = $row->item_price;
				$item_total = $row->item_total;
				if($row->guest_id == 0) {
					if (empty($minibartotal_lost[$item_name])) {
						$minibartotal_lost[$item_name] = clone $row;
						$minibartotal_lost[$item_name]->item_name = $item_name;
						$minibartotal_lost[$item_name]->item_quantity = $item_quantity;
						$minibartotal_lost[$item_name]->item_price = $item_price;
						$minibartotal_lost[$item_name]->item_total = $item_total;
					} else {
						$minibartotal_lost[$item_name]->item_name = $item_name;
						$minibartotal_lost[$item_name]->item_quantity += $item_quantity;
						$minibartotal_lost[$item_name]->item_price += $item_price;
						$minibartotal_lost[$item_name]->item_total += $item_total;
					}
				}else {
					if (empty($minibartotal[$item_name])) {
						$minibartotal[$item_name] = clone $row;
						$minibartotal[$item_name]->item_name = $item_name;
						$minibartotal[$item_name]->item_quantity = $item_quantity;
						$minibartotal[$item_name]->item_price = $item_price;
						$minibartotal[$item_name]->item_total = $item_total;
					} else {
						$minibartotal[$item_name]->item_name = $item_name;
						$minibartotal[$item_name]->item_quantity += $item_quantity;
						$minibartotal[$item_name]->item_price += $item_price;
						$minibartotal[$item_name]->item_total += $item_total;
					}
				}
			}

			$price = 0;
			$price_lost = 0;
			$call_count = 0;
			$call_count_lost = 0;
			$total_price = 0;
			$total_price_lost = 0;
			$total_call_count = 0;
			$total_call_count_lost = 0;

			$sheet->cell('A' . $row_num, function ($cell) {
				$cell->setValue('Minibar:');
				$cell->setFont(array(
					'family' => 'Calibri',
					'size' => '11',
					'bold' => true
				));
			});
			$row_num++;
			$i = 0;
			foreach ($minibarlist_second as $key => $row) {
				if($call_count == 0) {
					$sheet->cell('A' . $row_num, function ($cell) use ($row) {
						$cell->setValue('Room:'.$row->room);
						$cell->setFont(array(
							'family' => 'Calibri',
							'size' => '11',
							'bold' => true
						));
					});
					$row_num++;

					$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
						$cell->setFontColor('#fafbfb');
						$cell->setBackground('#2c3e50');
						$cell->setFont(array(
							'family' => 'Calibri',
							'size' => '11',
							'bold' => true
						));
					});

					$minibar_header = array('Date', 'Time', 'Guest', 'Minibar item', 'Price', 'Quantity', 'Posted By', 'Total');
					$sheet->row($row_num, $minibar_header);
					$row_num++;
				}
					$guest_name = $row->guest_name;
					if($row->guest_id == 0) $guest_name = "Lost Posting";

					$row1 = array(
						date_format(new DateTime($row->date),'d-M-Y'), $row->time, $guest_name,
						$row->item_name, $row->item_price, $row->item_quantity, $row->wholename, $row->item_total
					);
					$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
						$cell->setAlignment('right');
					});
					$sheet->row($row_num, $row1);
					$row_num++;
					if($row->guest_id != 0 ) {
						$call_count++;
						$price += $row->item_total;
					}else {
						$call_count_lost++;
						$price_lost += $row->item_total;
					}

					 if($i == (count($minibarlist_second) - 1) ||  $row->room != $minibarlist_second[$i + 1]->room) {
						 $sheet->cell('G' . $row_num . ':H' . $row_num, function($cell) {
							 $cell->setFontColor('#020202');
							 $cell->setBackground('#e0e0e0');
							 $cell->setAlignment('right');
						 });
						 $row2 = array( '','','','','','','Total '.$call_count .' items',  $currency->value. ' ' .number_format($price,2));
						 $sheet->row($row_num, $row2);
						 $row_num++;

						 $sheet->cell('G' . $row_num . ':H' . $row_num, function($cell) {
							 $cell->setFontColor('#020202');
							 $cell->setBackground('#e0e0e0');
							 $cell->setAlignment('right');
						 });
						 $row2_1 = array( '','','','','','','Total Lost '.$call_count_lost .' items', 'Lost '. $currency->value . number_format($price_lost,2));
						 $sheet->row($row_num, $row2_1);
						 $row_num++;

						 $call_count = 0;
						 $price = 0;
						 $call_count_lost = 0;
						 $price_lost = 0;
					 }
					$i++;
			}
			$row_num++;

			$sheet->cell('A' . $row_num, function ($cell) {
				$cell->setValue('Grand Total');
				$cell->setFont(array(
					'family' => 'Calibri',
					'size' => '11',
					'bold' => true
				));
			});
			$row_num++;

			$sheet->cell('A' . $row_num . ':D' . $row_num, function ($cell) {
				$cell->setFontColor('#fafbfb');
				$cell->setBackground('#2c3e50');
				$cell->setFont(array(
					'family' => 'Calibri',
					'size' => '11',
					'bold' => true
				));
			});
			$all_header = array('Item', 'Quantity', 'Price', 'Total');
			$sheet->row($row_num, $all_header);
			$row_num++;
			foreach ($minibartotal as $key3 => $row3){
				$row4 = array($row3->item_name, $row3->item_quantity,$row3->item_price, $row3->item_total );
				$sheet->row($row_num, $row4);
				$row_num++;
				$total_call_count++ ;
				$total_price += $row->item_total;
			}

				$sheet->cell('C' . $row_num . ':D' . $row_num, function($cell) {
				$cell->setFontColor('#020202');
				$cell->setBackground('#e0e0e0');
				$cell->setAlignment('right');
			});
			$row5 = array( '','','Total '.$total_call_count .' items',  $currency->value . number_format($total_price,2));
			$sheet->row($row_num, $row5);
			$row_num++;

			$sheet->cell('A' . $row_num . ':D' . $row_num, function ($cell) {
				$cell->setFontColor('#fafbfb');
				$cell->setBackground('#2c3e50');
				$cell->setFont(array(
					'family' => 'Calibri',
					'size' => '11',
					'bold' => true
				));
			});
			$all_header_1 = array('Lost Item', 'Lost Quantity', 'Lost Price', 'Lost Total');
			$sheet->row($row_num, $all_header_1);
			$row_num++;
			foreach ($minibartotal_lost as $key3 => $row3){
				$row4_1 = array($row3->item_name, $row3->item_quantity,$row3->item_price, $row3->item_total );
				$sheet->row($row_num, $row4_1);
				$row_num++;
				$total_call_count_lost++ ;
				$total_price_lost += $row->item_total;
			}

			$sheet->cell('C' . $row_num . ':D' . $row_num, function($cell) {
				$cell->setFontColor('#020202');
				$cell->setBackground('#e0e0e0');
				$cell->setAlignment('right');
			});
			$row5 = array( '','','Total Lost Posting '.$total_call_count_lost .' items', 'Total Lost Amount ' . $currency->value .number_format($total_price_lost,2));
			$sheet->row($row_num, $row5);
			$row_num++;
		}
		$row_num +=2;
		return $row_num;
	}

	private function outputAdminCall($sheet, $row_num, $property_id, $channel_id, $build_ids, $cur_time)
	{
		$last_night_audit = DB::table('call_night_audit_time')
				->where('channel_id', $channel_id)
				->first();

		$currency = DB::table('property_setting as ps')
			    ->select(DB::raw('ps.value'))
			    ->where('ps.settings_key', 'currency')
				->first();

		$query = DB::table('call_admin_calls as ac')
			->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
			->join('call_section as cs', 'se.section_id', '=', 'cs.id')
			->join('common_building as cb', 'cs.building_id', '=', 'cb.id')
			->join('common_department as dept', 'cs.dept_id', '=', 'dept.id')
			->leftJoin('call_destination as cd', 'ac.destination_id', '=', 'cd.id')
//				->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id')
//				->leftJoin('common_user_group as cug', 'se.user_group_id', '=', 'cug.id');
			->leftJoin('common_users as cu', 'ac.user_id', '=', 'cu.id');


		$query->whereIn('cs.building_id', $build_ids);


		if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
			$query->whereRaw("CONCAT(call_date, ' ', start_time) > '" . $last_night_audit->created_at . "'");

		}

		$query->whereRaw("CONCAT(call_date, ' ', start_time) <= '" . $cur_time . "'");

		$query->where('carrier_charges', '>', 0);

		$by_building_query = clone $query;

		$admin_call_by_building_data = $by_building_query->groupBy('cs.building_id')
			->select(DB::raw("cb.name,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Tool,
										sum(ac.carrier_charges) as Total_Carrier
										"))
			->get();
		$by_build_data = [];
		$total_value = [];
		$total_value['International'] = 0;
		$total_value['Mobile'] = 0;
		$total_value['International'] = 0;
		$total_value['Local'] = 0;
		$total_value['National'] = 0;
		$total_value['Tool'] = 0;
		$total_value['Total'] = 0.0;
		$total_value['Total_Carrier'] = 0;
		$total_value['Profit'] = 0;

		foreach($admin_call_by_building_data as $row)
		{
			if(empty($by_build_data[$row->name]))
			{
				$by_build_data[$row->name] = [];
				$by_build_data[$row->name]['name'] = $row->name;
				$by_build_data[$row->name]['International'] = 0;
				$by_build_data[$row->name]['Mobile'] = 0;
				$by_build_data[$row->name]['Local'] = 0;
				$by_build_data[$row->name]['Total_Carrier'] = 0;
				$by_build_data[$row->name]['Total'] = 0;
				$by_build_data[$row->name]['Profit'] = 0;
				$by_build_data[$row->name]['National'] = 0;
				$by_build_data[$row->name]['Tool'] = 0;
			}

			$by_build_data[$row->name]['International'] += $row->International;
			$by_build_data[$row->name]['Mobile'] += $row->Mobile;
			$by_build_data[$row->name]['Local'] += $row->Local;
			$by_build_data[$row->name]['Total_Carrier'] += $row->Total_Carrier;
			$by_build_data[$row->name]['Total'] += $row->Total_Carrier;
			$by_build_data[$row->name]['National'] += $row->National;
			$by_build_data[$row->name]['Tool'] += $row->Tool;

			$total_value['International'] += $row->International;
			$total_value['Mobile'] += $row->Mobile;
			$total_value['Local'] += $row->Local;
			$total_value['Total_Carrier'] += $row->Total_Carrier;
			$total_value['Total'] += $row->Total_Carrier;
			$total_value['National'] += $row->National;
			$total_value['Tool'] += $row->Tool;
		}

		$total_admin_query = clone $query;

		$total_admin_call = $total_admin_query
			->select(DB::raw("sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Tool,
										sum(ac.carrier_charges) as Total_Carrier
										"))
			->first();

		$admin_call_by_building_dept_section_data = [];

		$by_building_dept_query = clone $query;

		$result = $by_building_dept_query
			->groupBy('cs.building_id')
			->groupBy('cs.dept_id')
			->select(DB::raw("cb.name, dept.department,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Tool,
										sum(ac.carrier_charges) as Total_Carrier
										"))
			->get();
		foreach($result as $row)
		{
			$building = $row->name;
            $admin_call_by_building_dept_section_data[$building]['department'][] = $row;
		}

		$by_building_section_query = clone $query;

		$result = $by_building_section_query
			->groupBy('cs.building_id')
			->groupBy('cs.id')
			->select(DB::raw("cb.name, dept.department, cs.section,
										sum((ac.call_type = 'International') * ac.carrier_charges) as International,
										sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile,
										sum((ac.call_type = 'Local') * ac.carrier_charges) as Local,
										sum((ac.call_type = 'National') * ac.carrier_charges) as National,
										sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Tool,
										sum(ac.carrier_charges) as Total_Carrier
										"))
			->get();

			foreach($result as $row)
			{
				$building = $row->name;
				$department = $row->department;
//
                $admin_call_by_building_dept_section_data[$building]['depart'][$department]['section'][] = $row;
				//$admin_call_by_building_dept_section_data[$building]['department'][$department]['section'] = $row;
			}

		$data_query = clone $query;

		$data_list = $data_query
			->orderBy('call_date')
			->select(DB::raw('ac.*, se.extension, cd.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, dept.department'))
			->get();

		$admin_call_list = [];

		foreach ($data_list as $row) {
			$group_key = $row->call_date;
			$ret['report_by_admin_call'] = 'Department';
			$group_key = $row->department;
			$admin_call_list[$group_key][] = $row;
		}

		$data = [];
		$data['by_build_data'] = $by_build_data;
		$data['total_value'] = $total_value;
		//-------------------Grand total by builkding-----------------------
		if( !empty($data['by_build_data']) ) {
			$row_num ++;
			$sheet->cell('A' . $row_num, function($cell) {
				$cell->setValue('Grand Total By Building');
			});
			$row_num++;

			// table header
			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#f8fafa');
				$cell->setBackground('#1b1b1b');
			});

			$table_header = array('Building', 'International', 'Local', 'Mobile','National','Tool Free', 'Total', 'Total Carrier', 'Profit');
			$sheet->row($row_num, $table_header);

			$row_num++;


			foreach ($data['by_build_data'] as $row) {
				$row = array(
					$row['name'],
					number_format($row['International'], 2), number_format($row['Local'], 2),
					number_format($row['Mobile'], 2),number_format($row['National'], 2),  number_format($row['Tool'], 2),
					number_format($row['Total'], 2), number_format($row['Total_Carrier'], 2),
					number_format($row['Profit'], 2)
				);

				$sheet->row($row_num, $row);
				$row_num++;
			}

			$sheet->cell('A' . $row_num . ':I' . $row_num, function ($cell) {
				$cell->setFontColor('#131313');
				$cell->setBackground('#e5e8e8');
			});
			$row = array(
				'Total',
				number_format($data['total_value']['International'], 2),
				number_format($data['total_value']['Local'], 2),
				number_format($data['total_value']['Mobile'], 2),
				number_format($data['total_value']['National'], 2),
				number_format($data['total_value']['Tool'], 2),
				number_format($data['total_value']['Total'], 2),
				number_format($data['total_value']['Total_Carrier'], 2),
				number_format($data['total_value']['Profit'], 2)
			);

			$sheet->row($row_num, $row);
			$row_num++;
		}
		//-----------------------admin grand total by building -------
		$data['admin_by_build_data'] = $admin_call_by_building_data;
		$data['admin_total_value'] = $total_admin_call;
		if( !empty($data['admin_by_build_data']) ) {
			$row_num ++;
			$sheet->cell('A' . $row_num, function($cell) {
				$cell->setValue('Admin Grand Total By Building');
			});
			$row_num++;

			// table header
			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#fcfcfc');
				$cell->setBackground('#131313');

			});

			$table_header = array('Building', 'International', 'Local', 'Mobile','National','Tool Free', 'Total' );
			$sheet->row($row_num, $table_header);

			$row_num++;


			foreach ($data['admin_by_build_data'] as $row) {
				$row = array(
					$row->name, number_format($row->International, 2), number_format($row->Local, 2),
					number_format($row->Mobile, 2),number_format($row->National, 2),number_format($row->Tool, 2), number_format($row->Total_Carrier, 2)
				);

				$sheet->row($row_num, $row);
				$row_num++;
			}

			$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
				$cell->setFontColor('#040404');
				$cell->setBackground('#cbcccc');
			});

			$row = array(
				'Total',
				number_format($data['admin_total_value']->International, 2),
				number_format($data['admin_total_value']->Local, 2),
				number_format($data['admin_total_value']->Mobile, 2),
				number_format($data['admin_total_value']->National, 2),
				number_format($data['admin_total_value']->Tool, 2),
				number_format($data['admin_total_value']->Total_Carrier, 2)
			);

			$sheet->row($row_num, $row);
			$row_num++;
		}
		//----------------Admin Grant Total By Building Department-------------------------------
		$row_num++;
		$data['admin_by_build_dept_section_data'] = $admin_call_by_building_dept_section_data;
		if( !empty($data['admin_by_build_dept_section_data']) ) {
			$sheet->mergeCells('B' . $row_num . ':D' . $row_num);
			$sheet->cell('B' . $row_num, function($cell) {
				$cell->setValue('Admin Grant Total By Building Department');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size'       => '12',
					'bold'       =>  true
				));
			});

			$row_num += 2;

			foreach ($data['admin_by_build_dept_section_data'] as  $key => $data_group)
			{
				$sheet->cell('A' . $row_num, function($cell) use($key) {
					$cell->setValue('Building : ' . $key);
				});
				$row_num++;

				// table header
				$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
					$cell->setFontColor('#fbfcfc');
					$cell->setBackground('#040404');
				});

				$table_header = array('Department', 'International', 'Local', 'Mobile','National','Tool Free', 'Total' );
				$sheet->row($row_num, $table_header);

				$row_num++;


				foreach ($data_group['department'] as $row) {
					$row = array(
						$row->department, number_format($row->International, 2), number_format($row->Local, 2),
						number_format($row->Mobile, 2),number_format($row->National, 2),number_format($row->Tool, 2), number_format($row->Total_Carrier, 2)
					);

					$sheet->row($row_num, $row);
					$row_num++;
				}
				foreach ($data_group['depart'] as  $key => $data_key){

				$sheet->cell('A' . $row_num, function($cell) use($key) {
						$cell->setValue('Department : ' . $key);
					});
					$row_num++;

				// table header
				$sheet->cell('A' . $row_num . ':G' . $row_num, function ($cell) {
					$cell->setFontColor('#fbfcfc');
					$cell->setBackground('#040404');
				});

				$table_header = array('Section', 'International', 'Local', 'Mobile','National','Tool Free', 'Total' );
				$sheet->row($row_num, $table_header);

				$row_num++;


				foreach ($data_key['section'] as $row) {
					$row = array(
						$row->section, number_format($row->International, 2), number_format($row->Local, 2),
						number_format($row->Mobile, 2),number_format($row->National, 2),number_format($row->Tool, 2), number_format($row->Total_Carrier, 2)
					);

					$sheet->row($row_num, $row);
					$row_num++;
				}
			}
				$row_num += 2;
			}
		}
		//-------Admin Call--------
		$data['admin_call_list'] = $admin_call_list;
		$data['report_by_admin_call'] = "Department";
		$data['report_type'] = 'Detailed';
		if( !empty($data['admin_call_list']) ) {
			$sheet->mergeCells('E' . $row_num . ':F' . $row_num);
			$sheet->cell('E' . $row_num, function ($cell) {
				$cell->setValue('Admin Call');
				$cell->setAlignment('center');
				$cell->setFont(array(
					'size' => '12',
					'bold' => true
				));
			});

			$row_num ++;

			foreach ($data['admin_call_list'] as $key => $data_group) {
				$sheet->mergeCells('A' . $row_num . ':H' . $row_num);
				$sheet->cell('A' . $row_num, function ($cell) use ($key, $data) {
					$cell->setValue($data['report_by_admin_call'] . ' : ' . $key);
					$cell->setFont(array(
						'bold' => true
					));
				});

				$row_num++;
				// table header
				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#fbfcfc');
					$cell->setBackground('#040404');
				});

				$admincall_header = array('Time', 'Extension', 'User Name', 'Called No', 'Duration', 'Call Type', 'Destination', 'Carrier Charges');
				$sheet->row($row_num, $admincall_header);

				$row_num++;

				$total_carrier = 0;

				foreach ($data_group as $call) {
					$row = array(
						$call->start_time, $call->extension, $call->wholename,
						$call->called_no, gmdate("H:i:s", $call->duration), $call->call_type,
						$call->country, $call->carrier_charges
					);

					if ($data['report_type'] == 'Detailed') {
						$sheet->row($row_num, $row);
						$row_num++;
					}

					$total_carrier += $call->carrier_charges;
				}

				$sheet->cell('A' . $row_num . ':H' . $row_num, function ($cell) {
					$cell->setFontColor('#060606');
					$cell->setBackground('#d5d7d7');
				});
				$sheet->cell('G' . $row_num, function ($cell) {
					$cell->setValue('Total');
					$cell->setFont(array(
						'bold' => true
					));
				});

				$sheet->cell('H' . $row_num, function ($cell) use ($total_carrier) {
					$cell->setValue($total_carrier);
					$cell->setFont(array(
						'bold' => true
					));
				});

				$row_num += 2;
			}
		}

		return $row_num;
	}

	private function outputAdminCall_old($sheet, $row_num, $property_id, $channel_id, $build_ids, $cur_time)
	{
		$old_row_num = $row_num;

		// table header
		$sheet->cell('A' . $row_num . ':K' . $row_num, function($cell) {
			$cell->setFontColor('#ffffff');
		});

		$dummy_header = array('Room', 'Extension', 'Date & Time', 'Called #', 'Destination', 'Duration', 'Cost111', 'Profit1111', 'Total1111', 'Profit1111', 'Total1111');
		$sheet->row($row_num, $dummy_header);
		$row_num++;


		$last_night_audit = DB::table('call_night_audit_time')
				->where('channel_id', $channel_id)
				->first();

		$query = DB::table('call_admin_calls as ac')
				->join('call_staff_extn as se', 'ac.extension_id', '=', 'se.id')
				->join('call_section as cs', 'se.section_id', '=', 'cs.id')
				->leftJoin('call_destination as dest', 'ac.destination_id', '=', 'dest.id')
				->leftJoin('common_building as cb', 'cs.building_id', '=', 'cb.id')
				->leftJoin('common_users as cu', 'se.user_id', '=', 'cu.id')
				->leftJoin('common_user_group as cug', 'se.user_group_id', '=', 'cug.id')
				->leftJoin('common_department as cd', 'cs.dept_id', '=', 'cd.id');

		$query->whereIn('cs.building_id', $build_ids);

		if (!empty($last_night_audit) && !empty($last_night_audit->created_at)) {
			$query->whereRaw("CONCAT(call_date, ' ', start_time) > '" . $last_night_audit->created_at . "'");
		}

		$query->whereRaw("CONCAT(call_date, ' ', start_time) <= '" . $cur_time . "'");

		$query->where('carrier_charges', '>', 0);

		$total_query = clone $query;
		$build_dept_query = clone $query;

//				->where('call_date', $cur_date)
		$admincalls = $query->orderBy('ac.extension_id')
			->select(DB::raw('ac.*, se.extension, dest.country, CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename, cs.dept_id, cs.building_id, cd.department, se.user_id as se_user_id, se.user_group_id, cug.name as group_name, cb.name as cb_name'))
			->get();

		$summary = $total_query
				->groupBy('cs.building_id')
				->select(DB::raw("cb.name,
									sum((ac.call_type = 'International')) as International,
									sum((ac.call_type = 'Mobile')) as Mobile,
									sum((ac.call_type = 'Local')) as Local,
									sum((ac.call_type = 'Local')) as National,
									sum((ac.call_type = 'Toll Free')) as Toll_Free,
									sum((ac.call_type = 'International') * ac.carrier_charges) as International_Charge,
									sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile_Charge,
									sum((ac.call_type = 'Local') * ac.carrier_charges) as Local_Charge,
									sum((ac.call_type = 'Local') * ac.carrier_charges) as National_Charge,
									sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Toll_Free_Charge
									"))
				->get();

		$build_dept_summary = $build_dept_query
				->groupBy('cs.building_id')
				->groupBy('cs.dept_id')
				->select(DB::raw("cb.name, cd.department,
									sum((ac.call_type = 'International')) as International,
									sum((ac.call_type = 'Mobile')) as Mobile,
									sum((ac.call_type = 'Local')) as Local,
									sum((ac.call_type = 'Local')) as National,
									sum((ac.call_type = 'Toll Free')) as Toll_Free,
									sum((ac.call_type = 'International') * ac.carrier_charges) as International_Charge,
									sum((ac.call_type = 'Mobile') * ac.carrier_charges) as Mobile_Charge,
									sum((ac.call_type = 'Local') * ac.carrier_charges) as Local_Charge,
									sum((ac.call_type = 'Local') * ac.carrier_charges) as National_Charge,
									sum((ac.call_type = 'Toll Free') * ac.carrier_charges) as Toll_Free_Charge
									"))
				->get();

		$call_count = 0;
		$total_cost = 0;


		$call_type_count = [];
		$call_type_count['Internal'] = 0;
		$call_type_count['Mobile'] = 0;
		$call_type_count['International'] = 0;
		$call_type_count['National'] = 0;
		$call_type_count['Local'] = 0;
		$call_type_count['Received'] = 0;
		$call_type_count['Toll Free'] = 0;
		$call_type_count['Total'] = 0;

		$call_type_price['Internal'] = 0;
		$call_type_price['Mobile'] = 0;
		$call_type_price['International'] = 0;
		$call_type_price['National'] = 0;
		$call_type_price['Local'] = 0;
		$call_type_price['Received'] = 0;
		$call_type_price['Toll Free'] = 0;
		$call_type_price['Total'] = 0;


		// ====  By building summary table =========================
		$call_type_count_by_building = [];
		$building_name = [];
		for($i = 0; $i < count($build_ids); $i++)
		{
			$call_type_count_by_building[$build_ids[$i]] = [];
			$call_type_count_by_building[$build_ids[$i]]['Internal'] = 0;
			$call_type_count_by_building[$build_ids[$i]]['Mobile'] = 0;
			$call_type_count_by_building[$build_ids[$i]]['International'] = 0;
			$call_type_count_by_building[$build_ids[$i]]['National'] = 0;
			$call_type_count_by_building[$build_ids[$i]]['Local'] = 0;
			$call_type_count_by_building[$build_ids[$i]]['Received'] = 0;
			$call_type_count_by_building[$build_ids[$i]]['Toll Free'] = 0;
			$call_type_count_by_building[$build_ids[$i]]['Total'] = 0;
		}

		$build_list = DB::table('common_building as cb')->whereIn('cb.id', $build_ids)->get();
		for($i = 0; $i < count($build_list); $i++)
		{
			$building_name[$build_list[$i]->id] = $build_list[$i]->name;
		}

		// table header
		$sheet->mergeCells('B' . $row_num . ':C' . $row_num);
		$sheet->mergeCells('D' . $row_num . ':E' . $row_num);
		$sheet->mergeCells('F' . $row_num . ':G' . $row_num);
		$sheet->mergeCells('H' . $row_num . ':I' . $row_num);
		$sheet->mergeCells('J' . $row_num . ':K' . $row_num);

		$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');
		$sheet->cell('A' . $row_num . ':K' . $row_num, function($cell) {
			$cell->setFontColor('#5b9bd5');
			$cell->setBackground('#d6dce4');
			$cell->setValignment('center');
			$cell->setFont(array(
					'bold'       =>  true
			));
		});

		$by_building_header = array('Building', 'International', '', 'Mobile', '', 'Local', '', 'National', '', 'Toll Free', '');
		$sheet->row($row_num, $by_building_header);
		$row_num++;

		foreach ($summary as $data) {
			$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');

			$row = array($data->name,
					$data->International, number_format($data->International_Charge, 2),
					$data->Mobile,  number_format($data->Mobile_Charge, 2),
					$data->Local,  number_format($data->Local_Charge, 2),
					$data->National, number_format($data->National_Charge, 2),
					$data->Toll_Free, number_format($data->Toll_Free_Charge, 2));
			$sheet->row($row_num, $row);
			$row_num++;
		}

		$row_num += 2;

		// ===== by department summary table ===========================
		// table header
		$sheet->cell('A' . $row_num . ':K' . $row_num, function($cell) {
			$cell->setFontColor('#5b9bd5');
			$cell->setBackground('#d6dce4');
			$cell->setFont(array(
					'bold'       =>  true
			));
		});
		$sheet->mergeCells('B' . $row_num . ':C' . $row_num);
		$sheet->mergeCells('D' . $row_num . ':E' . $row_num);
		$sheet->mergeCells('F' . $row_num . ':G' . $row_num);
		$sheet->mergeCells('H' . $row_num . ':I' . $row_num);
		$sheet->mergeCells('J' . $row_num . ':K' . $row_num);

		$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');

		$by_dept_header = array('Department', 'International', '', 'Mobile',  '', 'Local',  '', 'National',  '', 'Toll Free', '');
		$sheet->row($row_num, $by_dept_header);
		$row_num++;

		foreach ($build_dept_summary as $data) {
			$sheet->setBorder('A' . $row_num . ':K' . $row_num, 'thin');

			$row = array($data->department,
					$data->International, number_format($data->International_Charge, 2),
					$data->Mobile, number_format($data->Mobile_Charge, 2),
					$data->Local, number_format($data->Local_Charge, 2),
					$data->National, number_format($data->National_Charge, 2),
					$data->Toll_Free, number_format($data->Toll_Free_Charge, 2));
			$sheet->row($row_num, $row);
			$row_num++;
		}

		$row_num += 2;

		// ===== Real Data ======================================
		$duration = 0;

		for ($i = 0; $i < count($admincalls); $i++)
		{
			$call = $admincalls[$i];

			// User, Extension Info
			if($i == 0 ||		// last row
					$call->extension_id != $admincalls[$i - 1]->extension_id	// diff row
			)
			{
				$sheet->cell('A' . $row_num . ':I' . $row_num, function($cell) {
					$cell->setFontColor('#5b9bd5');
					$cell->setFont(array(
							'bold'       =>  true
					));
				});

				$sheet->mergeCells('C' . $row_num . ':D' . $row_num);

				if( $call->se_user_id > 0 )
					$row = array('Extension : ' . $call->extension, '', 'User : ' . $call->wholename, '', 'Dept : ' . $call->department);
				else
					$row = array('Extension : ' . $call->extension, '', 'User Group : ' . $call->group_name, '', 'Dept : ' . $call->department);

				$sheet->row($row_num, $row);
				$row_num++;

				// table header
				$sheet->cell('A' . $row_num . ':E' . $row_num, function($cell) {
					$cell->setFontColor('#5b9bd5');
					$cell->setBackground('#d6dce4');
					$cell->setFont(array(
							'bold'       =>  true
					));
				});

				$sheet->setBorder('A' . $row_num . ':F' . $row_num, 'thin');

				$admincall_header = array('Date & Time', 'Called #', 'Destination', 'Duration', 'Cost');
				$sheet->row($row_num, $admincall_header);
				$row_num++;

			}

			$row = array(
					$call->call_date . ' ' . $call->start_time,
					$call->called_no, $call->country, gmdate("H:i:s", $call->duration),
					$call->carrier_charges
			);

			$sheet->row($row_num, $row);

			$sheet->cell('A' . $row_num . ':I' . $row_num, function($cell) {
				$cell->setAlignment('right');
			});
			$sheet->setBorder('A' . $row_num . ':F' . $row_num, 'thin');

			$row_num++;

			$call_count++;
			$total_cost += $call->carrier_charges;

			if( !array_key_exists($call->call_type, $call_type_count ) )
				$call_type_count[$call->call_type] = 0;
			$call_type_count[$call->call_type]++;

			$call_type_count['Total']++;

			if( !array_key_exists($call->call_type, $call_type_price ) )
				$call_type_price[$call->call_type] = 0;
			$call_type_price[$call->call_type] += $call->carrier_charges;

			$call_type_price['Total'] += $call->carrier_charges;

			$duration += $call->duration;

			if($i == count($admincalls) - 1 ||		// last row
					$call->extension_id != $admincalls[$i + 1]->extension_id	// diff row
			)
			{
				// Total Price
				$sheet->setMergeColumn(array(
						'columns' => array('A', 'F'),
						'rows' => array(
								array($row_num, $row_num + 1),
						)
				));

				$sheet->cell('A' . $row_num . ':F' . $row_num, function($cell) {
					$cell->setFontColor('#5b9bd5');
				});

				$sheet->cell('A' . $row_num, function($cell) {
					$cell->setValignment('center');
					$cell->setFont(array(
							'bold'       =>  true
					));
				});

				$sheet->cell('F' . $row_num, function($cell) {
					$cell->setValignment('center');
				});

				$sum_row = array('Total',
						'Mobile: ' . $call_type_count['Mobile'],
						'International: ' . $call_type_count['International'],
						'National: ' . $call_type_count['National'],
						$call_type_count['Total'] . ' Calls',
						gmdate("H:i:s", $duration),
				);

				$sheet->row($row_num, $sum_row);
				$sheet->setBorder('A' . $row_num . ':F' . $row_num, 'thin');

				$row_num ++;

				$sheet->cell('A' . $row_num . ':F' . $row_num, function($cell) {
					$cell->setFontColor('#5b9bd5');
				});
				$sheet->cell('B' . $row_num . ':F' . $row_num, function($cell) {
					$cell->setBackground('#d6dce4');
				});

				$sum_row = array('',
						'AED: ' . number_format($call_type_price['Mobile'], 2),
						'AED: ' . number_format($call_type_price['International'], 2),
						'AED: ' . number_format($call_type_price['National'], 2),
						'AED: ' . number_format($call_type_price['Total'], 2),);
				$sheet->row($row_num, $sum_row);
				$sheet->setBorder('A' . $row_num . ':F' . $row_num, 'thin');

				$row_num ++;

				$call_type_count['Internal'] = 0;
				$call_type_count['Mobile'] = 0;
				$call_type_count['International'] = 0;
				$call_type_count['National'] = 0;
				$call_type_count['Local'] = 0;
				$call_type_count['Received'] = 0;
				$call_type_count['Toll Free'] = 0;
				$call_type_count['Total'] = 0;

				$call_type_price['Internal'] = 0;
				$call_type_price['Mobile'] = 0;
				$call_type_price['International'] = 0;
				$call_type_price['National'] = 0;
				$call_type_price['Local'] = 0;
				$call_type_price['Received'] = 0;
				$call_type_price['Toll Free'] = 0;
				$call_type_price['Total'] = 0;
				$duration = 0;
			}
		}

		return $row_num;
	}

	public function testGraph(Request $request) {
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="graph.xlsx"');
		header('Cache-Control: max-age=0');

		$phpexcel = new PHPExcel();

		$phpexcel->setActiveSheetIndex(0);
		$sheet = $phpexcel->getActiveSheet();

		$data = array('20', '31', '50', '80', '105', '139', '180', 'k', '256', '308','359','405','449','491','516');
		$row = 7;
		foreach($data as $point) {
			$sheet->setCellValueByColumnAndRow(1, $row++, $point);
		}

		$data = array('20', '31', '50', '80', '105', '139', '180', '219', '256', '308','359','405','449','491','516');
		$row = 7;
		foreach($data as $point) {
			$sheet->setCellValueByColumnAndRow(0, $row++, $point);
		}

		$values = new PHPExcel_Chart_DataSeriesValues('Number', 'Worksheet!$B$7:$B$21');
		$categories = new PHPExcel_Chart_DataSeriesValues('String', 'Worksheet!$A$7:$A$21');

		$series = new PHPExcel_Chart_DataSeries(
				PHPExcel_Chart_DataSeries::TYPE_AREACHART,       // plotType
				PHPExcel_Chart_DataSeries::GROUPING_CLUSTERED,  // plotGrouping
				array(0),                                       // plotOrder
				[],                                        // plotLabel
				array($categories),                             // plotCategory
				array($values)                                  // plotValues
		);
		$series->setPlotDirection(PHPExcel_Chart_DataSeries::DIRECTION_VERTICAL);

		$layout = new PHPExcel_Chart_Layout();
		$plotarea = new PHPExcel_Chart_PlotArea($layout, array($series));
		$xTitle = new PHPExcel_Chart_Title('xAxisLabel');
		$yTitle = new PHPExcel_Chart_Title('yAxisLabel');

		$chart = new PHPExcel_Chart('sample', null, null, $plotarea, true,0,$xTitle,$yTitle);

		$chart->setTopLeftPosition('C1');
		$chart->setBottomRightPosition('J15');

		$sheet->addChart($chart);

		$writer = PHPExcel_IOFactory::createWriter($phpexcel, 'Excel2007');
		$writer->setIncludeCharts(TRUE);
		$writer->save('php://output');
	}

	public function makeCallcenterReportDataForAgent($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		$call_start_time = $report['call_time_start'];
		$call_end_time = $report['call_time_end'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$hours_array =array(
			"1:00" => "time(ivr.start_date_time) >= '00:00:00' and time(ivr.start_date_time) < '01:00:00'",
			"2:00" => "time(ivr.start_date_time) >= '01:00:00' and time(ivr.start_date_time) < '02:00:00'",
			"3:00" => "time(ivr.start_date_time) >= '02:00:00' and time(ivr.start_date_time) < '03:00:00'",
			"4:00" => "time(ivr.start_date_time) >= '03:00:00' and time(ivr.start_date_time) < '04:00:00'",
			"5:00" => "time(ivr.start_date_time) >= '04:00:00' and time(ivr.start_date_time) < '05:00:00'",
			"6:00" => "time(ivr.start_date_time) >= '05:00:00' and time(ivr.start_date_time) < '06:00:00'",
			"7:00" => "time(ivr.start_date_time) >= '06:00:00' and time(ivr.start_date_time) < '07:00:00'",
			"8:00" => "time(ivr.start_date_time) >= '07:00:00' and time(ivr.start_date_time) < '08:00:00'",
			"9:00" => "time(ivr.start_date_time) >= '08:00:00' and time(ivr.start_date_time) < '09:00:00'",
			"10:00" => "time(ivr.start_date_time) >= '09:00:00' and time(ivr.start_date_time) < '10:00:00'",
			"11:00" => "time(ivr.start_date_time) >= '10:00:00' and time(ivr.start_date_time) < '11:00:00'",
			"12:00" => "time(ivr.start_date_time) >= '11:00:00' and time(ivr.start_date_time) < '12:00:00'",
			"13:00" => "time(ivr.start_date_time) >= '12:00:00' and time(ivr.start_date_time) < '13:00:00'",
			"14:00" => "time(ivr.start_date_time) >= '13:00:00' and time(ivr.start_date_time) < '14:00:00'",
			"15:00" => "time(ivr.start_date_time) >= '14:00:00' and time(ivr.start_date_time) < '15:00:00'",
			"16:00" => "time(ivr.start_date_time) >= '15:00:00' and time(ivr.start_date_time) < '16:00:00'",
			"17:00" => "time(ivr.start_date_time) >= '16:00:00' and time(ivr.start_date_time) < '17:00:00'",
			"18:00" => "time(ivr.start_date_time) >= '17:00:00' and time(ivr.start_date_time) < '18:00:00'",
			"19:00" => "time(ivr.start_date_time) >= '18:00:00' and time(ivr.start_date_time) < '19:00:00'",
			"20:00" => "time(ivr.start_date_time) >= '19:00:00' and time(ivr.start_date_time) < '20:00:00'",
			"21:00" => "time(ivr.start_date_time) >= '20:00:00' and time(ivr.start_date_time) < '21:00:00'",
			"22:00" => "time(ivr.start_date_time) >= '21:00:00' and time(ivr.start_date_time) < '22:00:00'",
			"23:00" => "time(ivr.start_date_time) >= '22:00:00' and time(ivr.start_date_time) < '23:00:00'",
			"24:00" => "time(ivr.start_date_time) >= '23:00:00' and time(ivr.start_date_time) < '24:00:00'"
			);
		

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

		$dial_status = $report['status'] ; // '[]'
		if(!empty($dial_status) && count($dial_status) > 0)
		{
			if( $dial_status != 'Callback' )
				$query->whereIn("ivr.dial_status", $dial_status);
			else
				$query->whereIn('ivr.callback_flag', '>', 0);
		}

		$query_cond = clone $query;
		$query_hour = $query;
		$date_list = $query->select(DB::raw('distinct(ivr.user_id) as userid, CONCAT_WS(" ", cu.first_name, cu.last_name) as agent'))
			->get();

		$date_list_hour = $query_hour->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
			->get();

		$summarylist = [];
		$agent_ids = [];
		for( $i = 0 ; $i < count($date_list); $i++) {
			$summarylist[$i] = $date_list[$i];
			//$date = $date_list[$i]->date;
			$user_id = $date_list[$i]->userid;
			$agent_ids[] = $user_id;
			$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
				->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
				->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

			if( !empty($agent_tags) && count($agent_tags) > 0 )
				$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}

			$query= $this->setGeneraterFilter($report ,$query);
			$userinform = $query->where('ivr.user_id', '=', $user_id)
									 ->whereBetween('ivr.start_date_time', array($start_time, $end_time))
									 //->groupby('ivr.user_id')
									 ->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Callback') as callback,
								sum(ivr.dial_status = 'Outgoing') as outgoing,
								sum(ivr.dial_status = 'Dropped') as dropped,
								sum(ivr.dial_status = 'Missed') as missed,
								SEC_TO_TIME(ROUND(sum(ivr.duration))) as totaltime,
								SEC_TO_TIME(ROUND(AVG(time_to_answer))) as tta																	
								"))
				->first();
			$summarylist[$i]->userinform1 = $userinform;

			// $historyinform = DB::table('ivr_agent_status_history as his')
			// 	->where('his.user_id', '=', $user_id)
			// 	->whereBetween('his.created_at', array($start_time, $end_time))
			// 	->select(DB::raw("SEC_TO_TIME(sum((his.status = 'Available') * his.duration)) as available,
			// 					SEC_TO_TIME(sum((his.status = 'Idle') * his.duration)) as idle,
			// 					SEC_TO_TIME(sum((his.status = 'Busy') * his.duration)) as busy,
			// 					SEC_TO_TIME(sum((his.status = 'Wrapup') * his.duration)) as wrapup,
			// 					SEC_TO_TIME(sum((his.status = 'On Break') * his.duration)) as onbreak,
			// 					SEC_TO_TIME(sum((his.status = 'Online') * his.duration)) as online,

			// 					COALESCE(sum((his.status = 'Available') * his.duration), 0) / 60 as available_min,
			// 					COALESCE(sum((his.status = 'Idle') * his.duration), 0) / 60 as idle_min,
			// 					COALESCE(sum((his.status = 'Busy') * his.duration), 0) / 60 as busy_min,
			// 					COALESCE(sum((his.status = 'Wrapup') * his.duration), 0) / 60 as wrapup_min,
			// 					COALESCE(sum((his.status = 'On Break') * his.duration), 0) / 60 as onbreak_min,
			// 					COALESCE(sum((his.status = 'Online') * his.duration), 0) / 60 as online_min
			// 					"))
			// 	->first();

				//above query exceeds big int calculation of seconds

				$hisinfo = new StdClass;
				$hisinfo->available = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Available')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("SEC_TO_TIME(sum(his.duration)) as available")
				->first()->available;
				$hisinfo->idle = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Idle')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("SEC_TO_TIME(sum(his.duration)) as idle")
				->first()->idle;
				$hisinfo->busy = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Busy')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("SEC_TO_TIME(sum(his.duration)) as busy")
				->first()->busy;
				$hisinfo->wrapup = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Wrapup')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("SEC_TO_TIME(sum(his.duration)) as wrapup")
				->first()->wrapup;
				$hisinfo->onbreak = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'On Break')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("SEC_TO_TIME(sum(his.duration)) as onbreak")
				->first()->onbreak;
				$hisinfo->online = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Online')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("SEC_TO_TIME(sum(his.duration)) as online")
				->first()->online;

				$hisinfo->available_min = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Available')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("COALESCE(sum(his.duration), 0) / 60 as available_min")
				->first()->available_min;
				$hisinfo->idle_min = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Busy')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("COALESCE(sum(his.duration), 0) / 60 as idle_min")
				->first()->idle_min;
				$hisinfo->busy_min = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Busy')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("COALESCE(sum(his.duration), 0) / 60 as busy_min")
				->first()->busy_min;
				$hisinfo->wrapup_min = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Wrapup')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("COALESCE(sum(his.duration), 0) / 60 as wrapup_min")
				->first()->wrapup_min;
				$hisinfo->onbreak_min = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'On Break')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("COALESCE(sum(his.duration), 0) / 60 as onbreak_min")
				->first()->onbreak_min;
				$hisinfo->online_min = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->where('his.status', '=', 'Online')
				->whereBetween('his.created_at', array($start_time, $end_time))
				->selectRaw("COALESCE(sum(his.duration), 0) / 60 as online_min")
				->first()->online_min;
				

			$summarylist[$i]->historyinform = $hisinfo;
			}
//perhour

$summary_hour = [];
$count = 0 ;
for( $i = 0 ; $i < count($date_list_hour); $i++) {

			$date = $date_list_hour[$i]->date;
			$query_date = clone $query_hour;
			$query_date = $this->setGeneraterFilter($report ,$query_date);
			foreach($hours_array as $key=>$value) {
				$hour_query = clone $query_date;
				$dateform = $hour_query->whereRaw("date(ivr.start_date_time) like '".$date."%'")
					->whereRaw($value)
					->orderby('ivr.start_date_time')
					->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Callback') as callback,
								sum(ivr.dial_status = 'Missed') as missed																
								"))
					->get();
					$summary_hour[$count] = clone $date_list_hour[$i];
					if(!empty($summary_hour[$i])) {
						$summary_hour[$count]->date = $date;
						$summary_hour[$count]->hour = $key;
						$summary_hour[$count]->dateform1 = $dateform;
					}
				$count++;
			}


			$hour_query = clone $query_date;
			$dateform = $hour_query->whereRaw(" date(ivr.start_date_time) like '".$date ."%'")
				->orderby('ivr.start_date_time')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,
							count(*) as total_calls,
							
							sum(ivr.dial_status = 'Answered') as answered,
							sum(ivr.dial_status = 'Abandoned') as abandoned,
							sum(ivr.dial_status = 'Callback') as callback,
							sum(ivr.dial_status = 'Missed') as missed
							"))
				->first();
			if(!empty($summary_hour[$count])) {
				$summary_hour[$count]->date = "Total of day";
				$summary_hour[$count]->hour = $key;
				$summary_hour[$count]->dateform1 = $dateform;
				$count++;
			}
//perhour

		}
		$ret['summary'] = $summarylist;
		$ret['summary_hour'] = $summary_hour;


		$query_all_hour = clone $query_hour;
		$query_all_hour= $this->setGeneraterFilter($report, $query_all_hour);
		$dateinform_all_hour = $query_all_hour->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,								
								sum(ivr.dial_status = 'Callback') as callback														
								"))
			->first();
		$ret['total_hour'] = 'TOTAL';
		$ret['totalcall_hour'] = $dateinform_all_hour->total_calls;
		$ret['answered_hour'] = $dateinform_all_hour->answered;
		$ret['abandoned_hour'] = $dateinform_all_hour->abandoned;
		$ret['callback_hour'] = $dateinform_all_hour->callback;
		$ret['missed_hour'] = $dateinform_all_hour->missed;
	
		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

			if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}

		$query = $this->setGeneraterFilter($report ,$query);

		$query_all = clone $query;
		$userinform_all = $query_all->whereIn('ivr.user_id', $agent_ids)
						->whereBetween('ivr.start_date_time', array($start_time, $end_time))
						->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,
								sum(ivr.dial_status = 'Outgoing') as outgoing,
								sum(ivr.dial_status = 'Dropped') as dropped,
								sum(ivr.dial_status = 'Ringing') as ringing,
								sum(ivr.dial_status = 'Queue') as queue,
								sum(ivr.dial_status = 'Callback') as callback,
								SEC_TO_TIME(ROUND(sum(ivr.duration))) as totaltime,
								SEC_TO_TIME(ROUND(AVG(time_to_answer))) as tta								
								"))
			->first();
		$ret['total'] = 'TOTAL';
		if(!empty($userinform_all)) {
			$ret['totalcall'] = $userinform_all->total_calls;
			$ret['answered'] = $userinform_all->answered;
			$ret['abandoned'] = $userinform_all->abandoned;
			$ret['callback'] = $userinform_all->callback;
			$ret['outgoing'] = $userinform_all->outgoing;
			$ret['dropped'] = $userinform_all->dropped;
			$ret['missed'] = $userinform_all->missed;
			$ret['totaltime'] = $userinform_all->totaltime;
			$ret['tta'] = $userinform_all->tta;
		}else {
			$ret['totalcall'] = '';
			$ret['answered'] = '';
			$ret['abandoned'] = '';
			$ret['callback'] = '';
			$ret['outgoing'] = '';
			$ret['dropped'] = '';
			$ret['missed'] = '';
			$ret['totaltime'] = '';
			$ret['tta'] = '';
		}
		$historyinform_all = DB::table('ivr_agent_status_history as his')
			->whereIn('his.user_id', $agent_ids)
			->whereBetween('his.created_at', array($start_time, $end_time))
			->select(DB::raw("SEC_TO_TIME(sum((his.status = 'Available') * abs(his.duration))) as available,
								SEC_TO_TIME(sum((his.status = 'Idle') * abs(his.duration))) as idle,
								SEC_TO_TIME(sum((his.status = 'Busy') * abs(his.duration))) as busy,
								SEC_TO_TIME(sum((his.status = 'Wrapup') * abs(his.duration))) as wrapup,
								SEC_TO_TIME(sum((his.status = 'On Break') * abs(his.duration))) as onbreak,
								SEC_TO_TIME(sum((his.status = 'Online') * abs(his.duration))) as online
								"))
			->first();

		if(!empty($historyinform_all)) {
			$ret['available'] = $historyinform_all->available;
			$ret['idle'] = $historyinform_all->idle;
			$ret['busy'] = $historyinform_all->busy;
			$ret['wrapup'] = $historyinform_all->wrapup;
			$ret['onbreak'] = $historyinform_all->onbreak;
			$ret['online'] = $historyinform_all->online;
			$ret['report_type'] = $report['report_type'];
		}else {
			$ret['available'] = '';
			$ret['idle'] = '';
			$ret['busy'] = '';
			$ret['wrapup'] = '';
			$ret['onbreak'] = '';
			$ret['online'] = '';
			$ret['report_type'] = $report['report_type'];
		}



		$origin_list = DB::table('common_users as cu')
			->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as agent, cu.id as user_id'))
			->get();
		$detaillist = [];

		for( $i = 0; $i < count($date_list) ;$i++) {
			$detaillist[$i] = $date_list[$i];
			$user_id = $date_list[$i]->userid;
			//$list_query = clone $query;
			$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
				->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
				->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
				->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
				->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');
				if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}
			$query = $this->setGeneraterFilter($report, $query);
			$userinform = $query->where('ivr.user_id', '=', $user_id)
				->whereBetween('ivr.start_date_time', array($start_time, $end_time))
				->orderBy('ivr.start_date_time', 'desc')
				->select(DB::raw("DATE(ivr.start_date_time) as date,ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
								 time(ivr.start_date_time) as time,
								CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
			 					des.country as origin,
			 					ivr.callerid as callerid,
			 					ivr.dial_status as status,
			 					des.country as origin,
			 					ivr.call_type as calltype,
			 					ivr.type as type,
			 					ivr.channel as channel,
			 					ivr.follow as followup,			 					
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue								
								"))
				->get();

				$detaillist[$i]->userinform = $userinform;



		}

		$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
				->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
				->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
				->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
				->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');
				if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}
			$query = $this->setGeneraterFilter($report, $query);
			$nouser = $query->where('ivr.user_id', '=', 0)
				->whereBetween('ivr.start_date_time', array($start_time, $end_time))
				->orderBy('ivr.start_date_time', 'desc')
				->select(DB::raw("DATE(ivr.start_date_time) as date,ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
								 time(ivr.start_date_time) as time,
								CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
			 					des.country as origin,
			 					ivr.callerid as callerid,
			 					ivr.dial_status as status,
			 					des.country as origin,
			 					ivr.call_type as calltype,
			 					ivr.type as type,
			 					ivr.channel as channel,
			 					ivr.follow as followup,			 					
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue								
								"))
				->get();
		$ret['noagent']	= $nouser;
		$ret['detailed'] = $detaillist;
		//echo json_encode($detaillist);

		$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
				->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
				->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
				->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
				->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');
		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}
			$query = $this->setGeneraterFilter($report, $query);
			$total = $query->whereBetween('ivr.start_date_time', array($start_time, $end_time))
					->where('ivr.dial_status', ANSWERED)
					->select(DB::raw("SEC_TO_TIME(round(COALESCE(avg(TIME_TO_SEC(ivr.time_to_answer)), 0))) as total_tta, SEC_TO_TIME(round(COALESCE(avg(TIME_TO_SEC(ivr.duration)),0))) as total_att							
								"))
				->first();
			if(!empty($total)) {
			$ret['total_tta'] = $total->total_tta;
			$ret['total_att'] = $total->total_att;
			}
			else{
				$ret['total_tta'] = "00:00";
				$ret['total_att'] = "00:00";

			}

			$ret['total_ans_per'] = round(($ret['answered'] / ($ret['answered'] + $ret['abandoned'] + $ret['missed']))*100);

			$hourly_statistics['mcalls'] = array();

			for ($i = 0; $i < 24; $i++) {
				$start_time1 = sprintf("%02d:00:00", $i);
				$end_time1 = sprintf("%02d:00:00", $i + 1);
	
				$time_range = sprintf("TIME(start_date_time) >= '%s' AND TIME(start_date_time) < '%s'", $start_time1, $end_time1);
	
				$summary_time_query = clone $query;
				$summary_time = $summary_time_query
					->whereRaw($time_range)
					->select(DB::raw("
							count(*) as calls,
							sum(ivr.dial_status = '". ANSWERED ."') as answered,
							sum(ivr.dial_status = '". ABANDONED ."') as abandoned,
							sum(ivr.dial_status = '". MISSED ."') as missed
							"))
					->first();
	
				$hourly_statistics['mcalls'][] =($summary_time->answered)+($summary_time->abandoned)+($summary_time->missed);
			}

			$maxKey = array_search(max($hourly_statistics['mcalls']), $hourly_statistics['mcalls']);

			if (strlen($maxKey)>1)
			{
			$ret['peak_hour'] = $maxKey . ":00";
			}
			else{

				$ret['peak_hour'] = "0". $maxKey . ":00";
			}

			$query = DB::table('ivr_agent_status_history as ash');					
			
			$summary_query = clone $query;
			$summary_status = $summary_query
				->whereBetween('ash.created_at', array($start_time, $end_time))
				->select(DB::raw("
							COALESCE(sum((ash.status = '". ONLINE ."') * abs(ash.duration)), 0) as online,
							COALESCE(sum((ash.status = '". AVAILABLE ."') * abs(ash.duration)), 0) as available,
							COALESCE(sum((ash.status = '". BUSY  ."') * abs(ash.duration)), 0) as busy,
							COALESCE(sum((ash.status = '". ONBREAK ."') * abs(ash.duration)), 0) as on_break,
							COALESCE(sum((ash.status = '". AWAY ."') * abs(ash.duration)), 0) as away,
							COALESCE(sum((ash.status = '". IDLE ."') * abs(ash.duration)), 0) as idle,
							COALESCE(sum((ash.status = '". WRAPUP ."') * abs(ash.duration)), 0) as wrapup									
							"))
				->first();

			$ret['total_au'] = round(($summary_status->busy / ($summary_status->online+$summary_status->available+$summary_status->busy+$summary_status->on_break+$summary_status->away+$summary_status->idle+$summary_status->wrapup))*100);

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeCallcenterAgentGraph($ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;

	}

	public function makeCallcenterReportDataForAgent1($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_agent_status_log as asl')
			->leftJoin('common_users as cu', 'asl.user_id', '=', 'cu.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('ivr_status_priority as sp', 'asl.status', '=', 'sp.status')
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('asl.user_id', $agent_tags);

		$dial_status = $report['status'] ; // '[]'
		if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}

		$agent_list = $query->orderBy('sp.priority', 'asc')
			->orderBy('asl.created_at', 'desc')
			->select(DB::raw('asl.*, CONCAT_WS(" ", cu.first_name, cu.last_name) as agent, cu.picture'))
			->get();

		$summarylist = [];

		$agent_ids = [];
		for( $i = 0 ; $i < count($agent_list); $i++) {
			$summarylist[$i] = $agent_list[$i];
			$user_id = $agent_list[$i]->user_id;

			$agent_ids[] = $user_id;

			$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
				->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');
			$query = $this->setGeneraterFilter($report ,$query);
			$query = $query->where('ivr.user_id', '=', $user_id)
				->whereBetween('ivr.start_date_time', array($start_time, $end_time));
			$userinform = $query->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,
								sum(ivr.callback_flag = 1) as callback,
								SEC_TO_TIME(ROUND(sum(ivr.duration))) as totaltime,
								SEC_TO_TIME(ROUND(AVG(time_to_answer))) as tta								
								"))
					->first();

			$summarylist[$i]->userinform1 = $userinform;

			$historyinform = DB::table('ivr_agent_status_history as his')
				->where('his.user_id', '=', $user_id)
				->whereBetween('his.created_at', array($start_time, $end_time))
				->select(DB::raw("SEC_TO_TIME(sum((his.status = 'Available') * his.duration)) as available,
								SEC_TO_TIME(sum((his.status = 'Idle') * his.duration)) as idle,
								SEC_TO_TIME(sum((his.status = 'Busy') * his.duration)) as busy,
								SEC_TO_TIME(sum((his.status = 'Wrapup') * his.duration)) as wrapup,
								SEC_TO_TIME(sum((his.status = 'On Break') * his.duration)) as onbreak,
								SEC_TO_TIME(sum((his.status = 'Online') * his.duration)) as online,

								COALESCE(sum((his.status = 'Available') * his.duration), 0) / 60 as available_min,
								COALESCE(sum((his.status = 'Idle') * his.duration), 0) / 60 as idle_min,
								COALESCE(sum((his.status = 'Busy') * his.duration), 0) / 60 as busy_min,
								COALESCE(sum((his.status = 'Wrapup') * his.duration), 0) / 60 as wrapup_min,
								COALESCE(sum((his.status = 'On Break') * his.duration), 0) / 60 as onbreak_min,
								COALESCE(sum((his.status = 'Online') * his.duration), 0) / 60 as online_min
								"))
				->first();

			$summarylist[$i]->historyinform = $historyinform;


		}
		$ret['summary'] = $summarylist;

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

		$query = $this->setGeneraterFilter($report ,$query);

		$query = $query
					->whereIn('ivr.user_id', $agent_ids)
		            ->whereBetween('ivr.start_date_time', array($start_time, $end_time));
		$userinform_all = $query->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,
								sum(ivr.dial_status = 'Ringing') as ringing,
								sum(ivr.dial_status = 'Queue') as queue,
								sum(ivr.callback_flag = 1) as callback,
								SEC_TO_TIME(ROUND(sum(ivr.duration))) as totaltime,
								SEC_TO_TIME(ROUND(AVG(time_to_answer))) as tta								
								"))
			->first();
		$ret['total'] = 'TOTAL';
		if(!empty($userinform_all)) {
			$ret['totalcall'] = $userinform_all->total_calls;
			$ret['answered'] = $userinform_all->answered;
			$ret['abandoned'] = $userinform_all->abandoned;
			$ret['callback'] = $userinform_all->callback;
			$ret['missed'] = $userinform_all->missed;
			$ret['totaltime'] = $userinform_all->totaltime;
			$ret['tta'] = $userinform_all->tta;
		}else {
			$ret['totalcall'] = '';
			$ret['answered'] = '';
			$ret['abandoned'] = '';
			$ret['callback'] = '';
			$ret['missed'] = '';
			$ret['totaltime'] = '';
			$ret['tta'] = '';
		}
		$historyinform_all = DB::table('ivr_agent_status_history as his')
			->whereIn('his.user_id', $agent_ids)
			->whereBetween('his.created_at', array($start_time, $end_time))
			->select(DB::raw("SEC_TO_TIME(sum((his.status = 'Available') * his.duration)) as available,
								SEC_TO_TIME(sum((his.status = 'Idle') * his.duration)) as idle,
								SEC_TO_TIME(sum((his.status = 'Busy') * his.duration)) as busy,
								SEC_TO_TIME(sum((his.status = 'Wrapup') * his.duration)) as wrapup,
								SEC_TO_TIME(sum((his.status = 'On Break') * his.duration)) as onbreak,
								SEC_TO_TIME(sum((his.status = 'Online') * his.duration)) as online
								"))
			->first();

		if(!empty($historyinform_all)) {
			$ret['available'] = $historyinform_all->available;
			$ret['idle'] = $historyinform_all->idle;
			$ret['busy'] = $historyinform_all->busy;
			$ret['wrapup'] = $historyinform_all->wrapup;
			$ret['onbreak'] = $historyinform_all->onbreak;
			$ret['online'] = $historyinform_all->online;
			$ret['report_type'] = $report['report_type'];
		}else {
			$ret['available'] = '';
			$ret['idle'] = '';
			$ret['busy'] = '';
			$ret['wrapup'] = '';
			$ret['onbreak'] = '';
			$ret['online'] = '';
			$ret['report_type'] = $report['report_type'];
		}

		$detaillist = [];
  		for( $i = 0; $i < count($agent_list) ;$i++) {
			$detaillist[$i] = $agent_list[$i];
			$user_id = $agent_list[$i]->user_id;
			$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
				->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
				->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');
			$query = $this->setGeneraterFilter($report ,$query);
			$userinform =$query->where('ivr.user_id', '=', $user_id)
					->whereBetween('ivr.start_date_time', array($start_time, $end_time))
					->orderBy('ivr.start_date_time', 'desc')
			 		->select(DB::raw("DATE(ivr.start_date_time) as date,
			 					time(ivr.start_date_time) as time,
			 					ivr.callerid as callerid,
			 					des.country as origin,
			 					ivr.call_type as calltype,
			 					ivr.follow as followup,
			 					ivr.dial_status as status,
			 					ivr.channel as channel,
			 					ivr.type as type,
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue								
								"))
				->get();
			$detaillist[$i]->userinform = $userinform;
		}
		$ret['detailed'] = $detaillist;

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeCallcenterAgentGraph($ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;
	}

	private function makeCallcenterAgentGraph($ret) {
		$summarylist = $ret['summary'];

		// graph data
		$param = [];

		$param['type'] = 'png';
		// $param['scale'] = 2;

		$width = 800;
		$height = Functions::isSuperAgent() ? 400: 300;

		$options = [];
		$options['title'] = array('text' => 'Agent Statistics');
		$options['chart'] = array('type' => 'column', 'width' => $width, 'height' => $height);
		$options['colors'] = ['#00b0f0', '#70ad47', '#8e5cb4', '#c00000', '#ed7d31', '#416629', '#be0000', '#ed7d31', '#ffff00'];

		$categories = [];
		$series = [];

		foreach($summarylist as $row) {
			$categories[] = $row->agent;
		}

		$list = [
			['Online', 'online_min', 'column', 0],
			['Available', 'available_min', 'column', 0],
			['On Break', 'onbreak_min', 'column', 0],
			['Busy', 'busy_min', 'column', 0],
			['Idle', 'idle_min', 'column', 0],
			// ['Wrapup', 'wrapup_min', 'column', 0],
			['Answered', 'answered', 'line', 1],
			['Abandoned', 'abandoned', 'line', 1],
			['Missed', 'missed', 'line', 1],
			['Call Back', 'callback', 'line', 1]
		];

		foreach($list as $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['type'] = $row1[2];
			$item['yAxis'] = $row1[3];

			$item['data'] = [];

			foreach($summarylist as $row) {
				if( $item['yAxis'] == 0 )
					$value = $row->historyinform->{$row1[1]};
				else
					$value = $row->userinform1->{$row1[1]};

				$value = (int)$value;
				$item['data'][] = $value;
				// $item['data'][] = 100;
			}

			$series[] = $item;
		}

		$options['xAxis'] = array('categories' => $categories);

		$options['yAxis'] = [];

		$yaxis1 = array('min' => 0, 'title' => array('text' => 'Duration(mins)'));
		$options['yAxis'][] = $yaxis1;

		$options['plotOptions'] = array('series' => array('stacking' => 'normal'));
		$options['series'] = $series;
		$options['legend'] = array(
									'layout' => 'vertical',
									'align' => 'right',
									'verticalAlign' => 'middle');

		$yaxis2 = array('title' => array('text' => 'Count'), 'opposite' => true, 'min' => 0);
		$options['yAxis'][] = $yaxis2;

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeCallcenterReportDataForCallStatus($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}

		$query_cond = clone $query;
		$date_list = $query_cond->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
			->get();

		$summarylist = [];
		for( $i = 0 ; $i < count($date_list); $i++) {
			$summarylist[$i] = $date_list[$i];
			$date = $date_list[$i]->date;
			//$query_date = DB::table('ivr_voice_recording as ivr');
			$query_date = clone $query;
			$query_date = $this->setGeneraterFilter($report ,$query_date);
			$dateform = $query_date->where('ivr.start_date_time', 'like', $date.'%')
					->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Callback') as callback,
								sum(ivr.dial_status = 'Missed') as missed																
								"))
				->first();
			$summarylist[$i]->dateform1 = $dateform;
		}
		$ret['summary'] = $summarylist;

        $query_all = clone $query;
		$dateinform_all = $query_all->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,								
								sum(ivr.dial_status = 'Callback') as callback														
								"))
			->first();
		$ret['total'] = 'TOTAL';
		$ret['totalcall'] = $dateinform_all->total_calls;
		$ret['answered'] = $dateinform_all->answered;
		$ret['abandoned'] = $dateinform_all->abandoned;
		$ret['callback'] = $dateinform_all->callback;
		$ret['missed'] = $dateinform_all->missed;
		$ret['report_type'] = $report['report_type'];

		$status_query = clone $query;
		$status_list = $status_query->select(DB::raw('DISTINCT(ivr.dial_status) as status'))
			->get();
		$detaillist = [];
		$count =0;
		for( $i = 0; $i < count($status_list) ;$i++) {
			$detaillist[$i] = $status_list[$i];
			$status = $status_list[$i]->status;
				$list_query = clone $query;
				$list_query = $this->setGeneraterFilter($report, $list_query);
				$userinform = $list_query->where('ivr.dial_status', '=', $status)
					->orderBy('ivr.start_date_time', 'desc')
					->select(DB::raw("DATE(ivr.start_date_time) as date,ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
			 					time(ivr.start_date_time) as time,
								 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								 CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
			 					ivr.callerid as callerid,
			 					des.country as origin,
			 					ivr.call_type as calltype,
			 					ivr.type as type,
			 					ivr.channel as channel,
			 					ivr.follow as followup,			 					
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue								
								"))
					->get();
				$detaillist[$i]->userinform = $userinform;
		}
		$ret['detailed'] = $detaillist;

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeCallcenterCallstatusGraph($dateinform_all);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;

	}

	private function makeCallcenterCallstatusGraph($dateinform_all) {
		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = array('text' => 'Call Status');
		$options['chart'] = array('type' => 'column', 'width' => 640, 'height' => 480);
		$options['colors'] = ['#23b7e5', '#27c24c', '#6254b2', '#f05050', '#f89406', '#beb411'];

		$series = [];

		$series[] = array('name' => 'Abandoned', 'data' => [(int)$dateinform_all->abandoned, 0, 0, 0]);
		$series[] = array('name' => 'Answered', 'data' => [0, (int)$dateinform_all->answered, 0, 0]);
		$series[] = array('name' => 'Missed', 'data' => [0, 0, (int)$dateinform_all->missed, 0]);
		$series[] = array('name' => 'Call Back', 'data' => [0, 0, 0, (int)$dateinform_all->callback]);

		$options['xAxis'] = array('categories' => ['Abandoned', 'Answered', 'Missed', 'Call Back']);
		$options['yAxis'] = array('min' => 0, 'title' => array('text' => null));

		$options['series'] = $series;

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeCallcenterReportDataForDate($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}

		$query_cond = clone $query;
		$date_list = $query_cond->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
		->orderBy('ivr.start_date_time', 'desc')
			->get();

		$summarylist = [];
		for( $i = 0 ; $i < count($date_list); $i++) {
			$summarylist[$i] = $date_list[$i];
			$date = $date_list[$i]->date;
			//$query_date = DB::table('ivr_voice_recording as ivr');
			$query_date = clone $query;
			$query_date = $this->setGeneraterFilter($report ,$query_date);
			$dateform = $query_date->where('ivr.start_date_time', 'like', $date.'%')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Callback') as callback,
								sum(ivr.dial_status = 'Missed') as missed																
								"))
				->first();
			$summarylist[$i]->dateform1 = $dateform;
		}
		$ret['summary'] = $summarylist;


		$query_all = clone $query;
		$dateinform_all = $query_all->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,								
								sum(ivr.dial_status = 'Callback') as callback														
								"))
			->first();
		$ret['total'] = 'TOTAL';
		$ret['totalcall'] = $dateinform_all->total_calls;
		$ret['answered'] = $dateinform_all->answered;
		$ret['abandoned'] = $dateinform_all->abandoned;
		$ret['callback'] = $dateinform_all->callback;
		$ret['missed'] = $dateinform_all->missed;
		$ret['report_type'] = $report['report_type'];


		$detaillist = [];
		for( $i = 0; $i < count($date_list) ;$i++) {
			$detaillist[$i] = $date_list[$i];
			$date = $date_list[$i]->date;
			$list_query = clone $query;
			$list_query = $this->setGeneraterFilter($report, $list_query);
			$userinform = $list_query->where('ivr.start_date_time', 'like', $date.'%')
				->orderBy('ivr.start_date_time', 'desc')
				->select(DB::raw("DATE(ivr.start_date_time) as date,
								ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
			 					time(ivr.start_date_time) as time,
								 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
			 					ivr.callerid as callerid,
			 					ivr.dial_status as status,
			 					des.country as origin,
			 					ivr.call_type as calltype,
			 					ivr.type as type,
			 					ivr.channel as channel,
			 					ivr.follow as followup,			 					
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue								
								"))
				->get();
			$detaillist[$i]->userinform = $userinform;
		}

		$ret['detailed'] = $detaillist;

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeCallcenterDateGraph($ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;
	}

	private function makeCallcenterDateGraph($ret) {
		$summarylist = $ret['summary'];

		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = array('text' => 'Calls Per Date');
		$options['chart'] = array('type' => 'line', 'width' => 1000, 'height' => 480);
		$options['colors'] = ['#27c24c', '#F44336', '#FFEA00', '#FF9100', '#f89406', '#beb411'];

		$categories = [];
		$series = [];

		foreach($summarylist as $row) {
			$categories[] = $row->dateform1->call_date;
		}

		$list = [
			['Answered', 'answered'],
			['Abandoned', 'abandoned'],
			['Call Back', 'callback'],
			['Missed', 'missed'],
		];

		foreach($list as $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['data'] = [];

			foreach($summarylist as $row) {
				$value = $row->dateform1->{$row1[1]};
				$value = (int)$value;
				$item['data'][] = $value;
				// $item['data'][] = 100;
			}

			$series[] = $item;
		}

		$options['xAxis'] = array('categories' => $categories);
		$options['yAxis'] = array('min' => 0, 'title' => null);
		// $options['plotOptions'] = array('series' => array('stacking' => 'normal'));
		$options['series'] = $series;

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeCallcenterReportDataForOrigin($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}

		$query_cond = clone $query;
		$date_list = $query_cond->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
			->get();

		$summarylist = [];
		for( $i = 0 ; $i < count($date_list); $i++) {
			$summarylist[$i] = $date_list[$i];
			$date = $date_list[$i]->date;
			//$query_date = DB::table('ivr_voice_recording as ivr');
			$query_date = clone $query;
			$query_date = $this->setGeneraterFilter($report ,$query_date);
			$dateform = $query_date->where('ivr.start_date_time', 'like', $date.'%')
				->groupby('ivr.call_origin')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								des.country as origin,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Callback') as callback,
								sum(ivr.dial_status = 'Missed') as missed																
								"))
				->get();
			$summarylist[$i]->dateform1 = $dateform;
		}
		$ret['summary'] = $summarylist;


		$query_all = clone $query;
		$dateinform_all = $query_all->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,								
								sum(ivr.dial_status = 'Callback') as callback															
								"))
			->first();
		$ret['total'] = 'TOTAL';
		$ret['totalcall'] = $dateinform_all->total_calls;
		$ret['answered'] = $dateinform_all->answered;
		$ret['abandoned'] = $dateinform_all->abandoned;
		$ret['callback'] = $dateinform_all->callback;
		$ret['missed'] = $dateinform_all->missed;
		$ret['report_type'] = $report['report_type'];

		$origin_list = DB::table('call_destination as des')
			->select(DB::raw('distinct(des.country) as origin, des.id as origin_id'))
			->get();
		$detaillist = [];
		$count = 0;
		for( $i = 0; $i < count($origin_list) ;$i++) {
			$detaillist[$i] = $origin_list[$i];
			$origin_id = $origin_list[$i]->origin_id;
			$list_query = clone $query;
			$list_query = $this->setGeneraterFilter($report, $list_query);
			$userinform = $list_query->where('ivr.call_origin', '=', $origin_id)
				->orderBy('ivr.start_date_time', 'desc')
				->select(DB::raw("DATE(ivr.start_date_time) as date,
								ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
			 					time(ivr.start_date_time) as time,
								 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
			 					ivr.callerid as callerid,
			 					ivr.dial_status as status,
			 					des.country as origin,
			 					ivr.call_type as calltype,
			 					ivr.type as type,
			 					ivr.channel as channel,
			 					ivr.follow as followup,			 					
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue								
								"))
				->get();
			if(!empty($userinform)) {
				$detaillist[$count]->userinform = $userinform;
				$count++;
			}
			if($i == count($origin_list)-1) {
				$internal_query = clone $query;
				$internal_query = $this->setGeneraterFilter($report, $internal_query);
				$userinform1 = $internal_query->where('ivr.call_origin', '=', 0)
					->orderBy('ivr.start_date_time', 'desc')
					->select(DB::raw("DATE(ivr.start_date_time) as date,
								ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
			 					time(ivr.start_date_time) as time,
								 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								 CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
			 					ivr.callerid as callerid,
			 					ivr.dial_status as status,
			 					des.country as origin,
								ivr.call_type as calltype,
								ivr.channel as channel,
								ivr.type as type,
			 					ivr.follow as followup,			 					
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue								
								"))
					->get();
				$detaillist[$count]->userinform = $userinform1;
				$count++;
			}
		}
		$ret['detailed'] = $detaillist;

		$query_destination = clone $query;
		$query_destination = $this->setGeneraterFilter($report, $query_destination);
		$destination_list = $query->groupBy('ivr.call_origin')
			->orderBy(DB::raw('count(*)'), 'desc')
			->select(DB::raw('des.country, count(*) as cnt'))
			->limit(10)
			->get();

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeCallcenterOriginGraph($destination_list);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;

	}

	private function makeCallcenterOriginGraph($destination_list) {
		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = array('text' => 'Call Origin');
		$options['chart'] = array('type' => 'column', 'width' => 640, 'height' => 480);
		// $options['colors'] = ['#23b7e5', '#27c24c', '#6254b2', '#f05050', '#f89406', '#beb411'];

		$categories = [];
		$series = [];

		foreach($destination_list as $key => $row) {
			$item = [];
			$country = '';
			if( empty($row->country) || $row->country == null )
				$country = 'Internal';
			else
				$country = $row->country;

			$item['name'] = $country;
			$item['data'] = [];

			$categories[] = $country;
			foreach($destination_list as $key1 => $row1) {
				if( $key != $key1 )
					$item['data'][] = 0;
				else
					$item['data'][] = (int)$row->cnt;
			}

			$series[] = $item;
		}

		$options['xAxis'] = array('categories' => $categories);
		$options['yAxis'] = array('min' => 0, 'title' => array('text' => null));

		$options['series'] = $series;
		$options['plotOptions'] = array('series' => array('stacking' => 'normal'));

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeCallcenterReportDataForPerHour($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];


		$hours_array =array(
			"1:00" => "time(ivr.start_date_time) >= '00:00:00' and time(ivr.start_date_time) < '01:00:00'",
			"2:00" => "time(ivr.start_date_time) >= '01:00:00' and time(ivr.start_date_time) < '02:00:00'",
			"3:00" => "time(ivr.start_date_time) >= '02:00:00' and time(ivr.start_date_time) < '03:00:00'",
			"4:00" => "time(ivr.start_date_time) >= '03:00:00' and time(ivr.start_date_time) < '04:00:00'",
			"5:00" => "time(ivr.start_date_time) >= '04:00:00' and time(ivr.start_date_time) < '05:00:00'",
			"6:00" => "time(ivr.start_date_time) >= '05:00:00' and time(ivr.start_date_time) < '06:00:00'",
			"7:00" => "time(ivr.start_date_time) >= '06:00:00' and time(ivr.start_date_time) < '07:00:00'",
			"8:00" => "time(ivr.start_date_time) >= '07:00:00' and time(ivr.start_date_time) < '08:00:00'",
			"9:00" => "time(ivr.start_date_time) >= '08:00:00' and time(ivr.start_date_time) < '09:00:00'",
			"10:00" => "time(ivr.start_date_time) >= '09:00:00' and time(ivr.start_date_time) < '10:00:00'",
			"11:00" => "time(ivr.start_date_time) >= '10:00:00' and time(ivr.start_date_time) < '11:00:00'",
			"12:00" => "time(ivr.start_date_time) >= '11:00:00' and time(ivr.start_date_time) < '12:00:00'",
			"13:00" => "time(ivr.start_date_time) >= '12:00:00' and time(ivr.start_date_time) < '13:00:00'",
			"14:00" => "time(ivr.start_date_time) >= '13:00:00' and time(ivr.start_date_time) < '14:00:00'",
			"15:00" => "time(ivr.start_date_time) >= '14:00:00' and time(ivr.start_date_time) < '15:00:00'",
			"16:00" => "time(ivr.start_date_time) >= '15:00:00' and time(ivr.start_date_time) < '16:00:00'",
			"17:00" => "time(ivr.start_date_time) >= '16:00:00' and time(ivr.start_date_time) < '17:00:00'",
			"18:00" => "time(ivr.start_date_time) >= '17:00:00' and time(ivr.start_date_time) < '18:00:00'",
			"19:00" => "time(ivr.start_date_time) >= '18:00:00' and time(ivr.start_date_time) < '19:00:00'",
			"20:00" => "time(ivr.start_date_time) >= '19:00:00' and time(ivr.start_date_time) < '20:00:00'",
			"21:00" => "time(ivr.start_date_time) >= '20:00:00' and time(ivr.start_date_time) < '21:00:00'",
			"22:00" => "time(ivr.start_date_time) >= '21:00:00' and time(ivr.start_date_time) < '22:00:00'",
			"23:00" => "time(ivr.start_date_time) >= '22:00:00' and time(ivr.start_date_time) < '23:00:00'",
			"24:00" => "time(ivr.start_date_time) >= '23:00:00' and time(ivr.start_date_time) < '24:00:00'"
			);
		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

			$dial_status = $report['status'] ; // '[]'
			if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}

		$query_cond = clone $query;
		$date_list = $query_cond->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
			->get();

		$summarylist = [];
		$count = 0 ;
		for( $i = 0 ; $i < count($date_list); $i++) {
			$date = $date_list[$i]->date;
			$query_date = clone $query;
			$query_date = $this->setGeneraterFilter($report ,$query_date);
			foreach($hours_array as $key=>$value) {
				$hour_query = clone $query_date;
				$dateform = $hour_query->whereRaw("date(ivr.start_date_time) like '".$date."%'")
					->whereRaw($value)
					->orderby('ivr.start_date_time')
					->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								des.country as origin,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Callback') as callback,
								sum(ivr.dial_status = 'Missed') as missed																
								"))
					->get();
					$summarylist[$count] = clone $date_list[$i];
					if(!empty($summarylist[$i])) {
						$summarylist[$count]->date = $date;
						$summarylist[$count]->hour = $key;
						$summarylist[$count]->dateform1 = $dateform;
					}
				$count++;
			}


			$hour_query = clone $query_date;
			$dateform = $hour_query->whereRaw(" date(ivr.start_date_time) like '".$date ."%'")
				->orderby('ivr.start_date_time')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,
							count(*) as total_calls,
							des.country as origin,
							sum(ivr.dial_status = 'Answered') as answered,
							sum(ivr.dial_status = 'Abandoned') as abandoned,
							sum(ivr.dial_status = 'Callback') as callback,
							sum(ivr.dial_status = 'Missed') as missed
							"))
				->first();
			if(!empty($summarylist[$count])) {
				$summarylist[$count]->date = "Total of day";
				$summarylist[$count]->hour = $key;
				$summarylist[$count]->dateform1 = $dateform;
				$count++;
			}
		}
		$ret['summary'] = $summarylist;


		$query_all = clone $query;
		$query_all = $this->setGeneraterFilter($report, $query_all);
		$dateinform_all = $query_all->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								sum(ivr.dial_status = 'Answered') as answered,
								sum(ivr.dial_status = 'Abandoned') as abandoned,
								sum(ivr.dial_status = 'Missed') as missed,								
								sum(ivr.dial_status = 'Callback') as callback														
								"))
			->first();
		$ret['total'] = 'TOTAL';
		$ret['totalcall'] = $dateinform_all->total_calls;
		$ret['answered'] = $dateinform_all->answered;
		$ret['abandoned'] = $dateinform_all->abandoned;
		$ret['callback'] = $dateinform_all->callback;
		$ret['missed'] = $dateinform_all->missed;
		$ret['report_type'] = $report['report_type'];


		$detaillist = [];
		$query_detail = clone $query;
		$date_list = $query_detail->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
			->get();
		$count = 0;
		for( $i = 0; $i < count($date_list) ;$i++) {
			$date = $date_list[$i]->date;
			$list_query = clone $query;
			$list_query = $this->setGeneraterFilter($report, $list_query);
			foreach ($hours_array as $key => $value) {
				$hour_query = clone $list_query;
				$userinform = $hour_query->whereRaw("date(ivr.start_date_time)  like '".$date."%'")
					->whereRaw($value)
					->where('ivr.dial_status','Answered')
					->orderBy('ivr.start_date_time', 'desc')
					->select(DB::raw("DATE(ivr.start_date_time) as date,
								 ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
			 					time(ivr.start_date_time) as time,
								 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								 CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
			 					ivr.callerid as callerid,
			 					ivr.dial_status as status,
			 					des.country as origin,
			 					ivr.call_type as calltype,
			 					ivr.type as type,
			 					ivr.channel as channel,
			 					ivr.follow as followup,
			 					ivr.duration,
			 					ivr.time_to_answer as tta,
			 					ivr.waiting as queue
								"))
					->get();
				$detaillist[$count] = clone $date_list[$i];
				if(!empty($detaillist[$count])) {
					$detaillist[$count]->date = $date;
					$detaillist[$count]->hour = $key;
					$detaillist[$count]->userinform = $userinform;
					$count++;
				}
			}
		}
		$ret['detailed'] = $detaillist;

		$ret['per_hour_data'] = [];

		$query_hour = clone $query;
		$query_hour = $this->setGeneraterFilter($report, $query_hour);
		foreach($hours_array as $key=>$value) {
			$hour_query = clone $query_hour;
			$dateform = $hour_query
				->whereRaw($value)
				->select(DB::raw("
							count(*) as total_calls,							
							sum(ivr.dial_status = 'Answered') as answered,
							sum(ivr.dial_status = 'Abandoned') as abandoned,
							sum(ivr.dial_status = 'Callback') as callback,
							sum(ivr.dial_status = 'Missed') as missed	
							"))
				->first();

			$ret['per_hour_data'][] = $dateform;
		}

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeCallcenterPerHourGraph($ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;
	}

	private function makeCallcenterPerHourGraph($ret) {
		$per_hour_data = $ret['per_hour_data'];

		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = array('text' => 'Calls Per Hour');
		$options['chart'] = array('type' => 'line', 'width' => 640, 'height' => 480);
		$options['colors'] = ['#27c24c', '#F44336', '#FFEA00', '#FF9100', '#f89406', '#beb411'];

		$categories = [];
		$series = [];

		foreach($per_hour_data as $key => $row) {
			$categories[] = sprintf('%02d', $key);
		}

		$list = [
			['Answered', 'answered'],
			['Abandoned', 'abandoned'],
			['Call Back', 'callback'],
			['Missed', 'missed'],
		];

		foreach($list as $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['data'] = [];

			foreach($per_hour_data as $row) {
				$value = $row->{$row1[1]};
				$value = (int)$value;
				$item['data'][] = $value;
			}

			$series[] = $item;
		}

		$options['xAxis'] = array('categories' => $categories);
		$options['yAxis'] = array('min' => 0, 'title' => null);
		// $options['plotOptions'] = array('series' => array('stacking' => 'normal'));
		$options['series'] = $series;

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeCallcenterReportDataForCallType($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

		$dial_status = $report['status'] ; // '[]'
		if(!empty($dial_status) && count($dial_status) >0) {
				if( $dial_status != 'Callback' )
					$query->whereIn("ivr.dial_status", $dial_status);
				else
					$query->whereIn('ivr.callback_flag', '>', 0);
			}

			$type_query = clone $query;
			$type_list = $type_query->select(DB::raw('DISTINCT(ivr.type) as type'))
				->get();
			$detaillist = [];
			$count =0;
			for( $i = 0; $i < count($type_list) ;$i++) {
				$detaillist[$i] = $type_list[$i];
				$type = $type_list[$i]->type;
					$list_query = clone $query;
					$list_query = $this->setGeneraterFilter($report, $list_query);
					$userinform = $list_query->where('ivr.type', '=', $type)
						->orderBy('ivr.start_date_time', 'desc')
						->select(DB::raw("DATE(ivr.start_date_time) as date,
									 ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
									 time(ivr.start_date_time) as time,
									 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
									  CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
									 ivr.callerid as callerid,
									 des.country as origin,
									 ivr.dial_status as status,
									 ivr.call_type as calltype,
									 ivr.type as type,
									 ivr.channel as channel,
									 ivr.follow as followup,			 					
									 ivr.duration,
									 ivr.time_to_answer as tta,
									 ivr.waiting as queue								
									"))
						->get();
					$detaillist[$i]->userinform = $userinform;
			}
			$ret['detailed'] = $detaillist;

			$query_cond = clone $query;
		$data_list_total = $query_cond->select(DB::raw("distinct(DATE(ivr.start_date_time)) as date"))
									  ->orderBy('ivr.start_date_time', 'desc')
									  ->get();
		$date_list = $data_list_total;
		$query_date = clone $query;
		$list=$this->setGeneraterFilter($report ,$query_date);
		$summarylist = [];
		$count = 0 ;
		//$count = 0 ;
		//$booking=0;
		//$inquiry=0;
		//$other=0;

		$sum_query="";
		$call_type_arr=[];
		$calltypes=Db::table('ivr_call_types')->whereNotNull('label')->select('label')->get();
			$call_type_ids=[];
			$call_type_each=[];
			//$k=0;
			foreach($calltypes as $row)

				$call_type_ids[] = $row->label;


		for( $i = 0 ; $i < count($date_list); $i++) {
			$date = $date_list[$i]->date;
			$hour_query = clone $list;
			$dateform = $hour_query->whereRaw("date(ivr.start_date_time) like '".$date."%'")
								->groupby('ivr.type')
								->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
									count(*) as total_calls,des.country as origin, ivr.type"))
								->get();


/*			$booking=$booking+ ($dateform->booking);
			$inquiry=$inquiry+ ($dateform->inquiry);
			$other=$other+($dateform->other);
*/


//$call_type_each[$i][]=0;
if(!empty($dateform))
{
		foreach($dateform as $row)
		{
			//$j=0;
			//echo json_encode($call_type_ids);
			foreach ($call_type_ids as $call_type)

			{
			if(empty( $call_type_arr[$call_type]))
			{
				//echo $call_type;
				$call_type_arr[$call_type]=0;}

			if ($call_type==($row->type))
			{
				//echo ($row->type);
				$call_type_each[$i][$call_type]=$row->total_calls;
				$call_type_arr[$call_type]=$call_type_arr[$call_type]+$row->total_calls;
		//echo $i;

			}

		 	else {
		 		if(empty($call_type_each[$i][$call_type]))
					 $call_type_each[$i][$call_type]=0;
		// //echo $i;
		 	}
			//$j=$j+1;
		}

		}
	}
	else {
		foreach($call_type_ids as $call_type)
		$call_type_each[$i][$call_type]=0;
	}

		//echo json_encode($call_type_each);


    		$summarylist[$count] = clone $date_list[$i];
				if(!empty($summarylist[$count])) {
					$summarylist[$count]->date = $date;
					$summarylist[$count]->dateform1 = $dateform;
					$count++;
				}
		}
		$ret['summary'] = $summarylist;
		$ret['total'] = 'TOTAL';
		$k = 0;

		$ret['call_type_total']=$call_type_arr;
		$ret['call_type_names']=$call_type_ids;
		$ret['call_type_each']= $call_type_each;
//echo json_encode($call_type_arr);
/*
		if( $report['chart_graph_flag'] == 'true' )
		{





				$call_type_query = clone $list;

				$call_type_data = $call_type_query->select(DB::raw("
										sum(ivr.call_type = 'Local') as local,
										sum(ivr.call_type = 'Mobile') as mobile,
										sum(ivr.call_type = 'Internal') as internal,
										sum(ivr.call_type = 'International') as international,
										sum(ivr.call_type = 'National') as national,
										sum(ivr.type = 'Booking') as booking,
										sum(ivr.type = 'Inquiry') as inquiry,
										sum(ivr.type = 'Other') as other
										"))
					->first();
			$ret['graph1'] = $this->makeCallcenterCallTypeGraph($call_type_data);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}
	*/
		$ret['report_type'] = $report['report_type'];
		return $ret;
	}

	public function makeCallcenterReportDataForChannelType($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu2', 'ivr.agent_take', '=', 'cu2.id')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

		$dial_status = $report['status'] ; // '[]'
		if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}


				$channel_query = clone $query;
				$channel_list = $channel_query->select(DB::raw('DISTINCT(ivr.channel) as channel'))
					->get();
				$detaillist = [];
				$count =0;
				for( $i = 0; $i < count($channel_list) ;$i++) {
					$detaillist[$i] = $channel_list[$i];
					$channel = $channel_list[$i]->channel;
						$list_query = clone $query;
						$list_query = $this->setGeneraterFilter($report, $list_query);
						$userinform = $list_query->where('ivr.channel', '=', $channel)
							->orderBy('ivr.start_date_time', 'desc')
							->select(DB::raw("DATE(ivr.start_date_time) as date,
										 ivr.callback_flag,ivr.missed_flag,ivr.abandon_flag,
										 time(ivr.start_date_time) as time,
										 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
										CONCAT_WS(\" \", cu2.first_name, cu2.last_name) as agent_taken,
										 ivr.callerid as callerid,
										 des.country as origin,
										 ivr.dial_status as status,
										 ivr.call_type as calltype,
										 ivr.type as type,
										 ivr.channel as channel,
										 ivr.follow as followup,			 					
										 ivr.duration,
										 ivr.time_to_answer as tta,
										 ivr.waiting as queue								
										"))
							->get();
						$detaillist[$i]->userinform = $userinform;
				}
				$ret['detailed'] = $detaillist;


		$query_cond = clone $query;
		$data_list_total = $query_cond->select(DB::raw("distinct(DATE(ivr.start_date_time)) as date"))
									  ->orderBy('ivr.start_date_time', 'desc')
									  ->get();
		$date_list = $data_list_total;
		$query_date = clone $query;
		$list=$this->setGeneraterFilter($report ,$query_date);
		$summarylist = [];
		$count = 0 ;
		// $ref=0;
		// $email=0;
		// $website=0;
		// $others=0;
		$sum_query="";
		$channel_arr=[];
		$channels=Db::table('ivr_channels')->whereNotNull('label')->select('label')->get();
			$channel_ids=[];
			$channel_each=[];
			//$k=0;
			foreach($channels as $row)

				$channel_ids[] = $row->label;



		// for($i=0;$i<(count($channel_ids)-1);$i++)
		// {
		// 	$sum_query=$sum_query."sum(ivr.channel = '".$channel_ids[$i]."') as channel".$i.",";

		// }
		// $sum_query=$sum_query."sum(ivr.channel = '".$channel_ids[(count($channel_ids)-1)]."') as channel".(count($channel_ids)-1);


		for( $i = 0 ; $i < count($date_list); $i++) {
			$date = $date_list[$i]->date;
			$hour_query = clone $list;
			$dateform = $hour_query->whereRaw("date(ivr.start_date_time) like '".$date."%'")
			->groupby('ivr.channel')

					->select(DB::raw("DATE(ivr.start_date_time) as call_date,						
								count(*) as total_calls,
								des.country as origin, ivr.channel																
								"))
					->get();

					 $j=0;
					// $json = json_encode($dateform);



			if(!empty($dateform))
			{
			foreach($dateform as $row)
			{

				foreach($channel_ids as $channel)

			{
			if(empty( $channel_arr[$channel]))
				$channel_arr[$channel]=0;

			if($channel==($row->channel))
			{
				//echo ($row->type);
				$channel_each[$i][$channel]=$row->total_calls;
				$channel_arr[$channel]=$channel_arr[$channel]+$row->total_calls;


			}

		 	else {
		 		if(empty($channel_each[$i][$channel]))
					 $channel_each[$i][$channel]=0;

		 	}
			//$j=$j+1;
		}
				//echo count($channel_ids);
				//echo $channel_ids[$j];
				//echo $row->channel;
		// 	if($channel==($row->channel))
		// 	{

		// 		$channel_each[$i][]=$row->total_calls;
		// 		$channel_arr[$j]=$channel_arr[$j]+$row->total_calls;
		// 		//echo $i;

		// 	}
		// 	else {
		// 		$channel_each[$i][]=0;
		// 		//echo $i;
		// 	}
		// 				//$ref=$ref+ ($dateform->ref);
		// 			// $email=$email+ ($dateform->email);
		// 			// $website=$website+ ($dateform->website);
		// 			// $others=$others+($dateform->others);
		// }
		// $j=$j+1;
		}
	}
	else {
		foreach($channel_ids as $channel)
		$channel_each[$i][$channel]=0;
	}


				$summarylist[$count] = clone $date_list[$i];
				if(!empty($summarylist[$count])) {
					$summarylist[$count]->date = $date;
					$summarylist[$count]->dateform1 = $dateform;
					$count++;
				}
		}

		$ret['summary'] = $summarylist;


		$ret['total'] = 'TOTAL';
		$k=0;
		// foreach($channel_arr as $row) {
		// 	$ret[$channel_ids[$k]]=$row;
		// 	echo
		// 	$k=$k+1;
		// }
			// $ret['totalcall'] = $total_calls;

		$ret['channel_total']=$channel_arr;
		$ret['channel_names']=$channel_ids;
		$ret['channel_each']= ($channel_each);
		//echo json_encode($ret['channel_each'][0]);
		$ret['report_type'] = $report['report_type'];



		// $call_type_query = clone $query;

		// $call_type_query = $this->setGeneraterFilter($report, $call_type_query);

		// $call_type_data = $call_type_query->select(DB::raw("
		// 						sum(ivr.call_type = 'Local') as local,
		// 						sum(ivr.call_type = 'Mobile') as mobile,
		// 						sum(ivr.call_type = 'Internal') as internal,
		// 						sum(ivr.call_type = 'International') as international,
		// 						sum(ivr.call_type = 'National') as national
		// 						"))
		// 	->first();

		// if( $report['chart_graph_flag'] == 'true' )
		// {
		// 	$ret['graph1'] = $this->makeCallcenterCallTypeGraph($call_type_data);
		// 	$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		// }

		return $ret;
	}


	private function makeCallcenterCallTypeGraph($call_type_data) {
		$param = [];

		$param['type'] = 'png';

		$width = 800;
		$height = Functions::isSuperAgent() ? 400: 300;

		$options = [];
		$options['title'] = array('text' => 'Call Type');
		$options['chart'] = array('type' => 'column', 'width' => $width, 'height' => $height);
		$options['colors'] = ['#9C27B0', '#3F51B5', '#FF5722', '#009688', '#ee900a'];

		$series = [];

		$series[] = array('name' => 'Local', 'data' => [(int)$call_type_data->local, 0, 0, 0, 0, 0, 0, 0], 'type' => 'column', 'yAxis' => 0);
		$series[] = array('name' => 'Mobile', 'data' => [0, (int)$call_type_data->mobile, 0, 0, 0, 0, 0, 0], 'type' => 'column', 'yAxis' => 0);
		$series[] = array('name' => 'Internal', 'data' => [0, 0, (int)$call_type_data->internal, 0, 0, 0, 0, 0], 'type' => 'column', 'yAxis' => 0);
		$series[] = array('name' => 'International', 'data' => [0, 0, 0, (int)$call_type_data->international, 0, 0, 0, 0], 'type' => 'column', 'yAxis' => 0);
		$series[] = array('name' => 'National', 'data' => [0, 0, 0, 0, (int)$call_type_data->national, 0, 0, 0], 'type' => 'column', 'yAxis' => 0);
		$series[] = array('name' => 'Booking', 'data' => [0, 0, 0, 0, 0, (int)$call_type_data->booking, 0, 0], 'type' => 'line', 'yAxis' => 1);
		$series[] = array('name' => 'Inquiry', 'data' => [0, 0, 0, 0, 0, 0, (int)$call_type_data->inquiry, 0], 'type' => 'line', 'yAxis' => 1);
		$series[] = array('name' => 'Others', 'data' => [0, 0, 0, 0, 0, 0, 0, (int)$call_type_data->other], 'type' => 'line', 'yAxis' => 1);

		$options['xAxis'] = array('categories' => ['Local', 'Mobile', 'Internal', 'International', 'National', 'Booking', 'Inquiry', 'Other']);

		$options['yAxis'] = [];
		$options['yAxis'][] = array('min' => 0, 'title' => array('text' => null));
		$options['yAxis'][] = array('min' => 0, 'title' => array('text' => null));

		$options['series'] = $series;
		$options['legend'] = array(
									'layout' => 'vertical',
									'align' => 'right',
									'verticalAlign' => 'middle');

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeCallcenterReportDataForAgentStatus($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('call_destination as des', 'ivr.call_origin', '=', 'des.id')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_channels as ic', 'ivr.channel', '=', 'ic.label')
			->leftJoin('ivr_call_center_skill_group as icsg', 'ivr.skill_group_id', '=', 'icsg.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		$query = $this->setGeneraterFilter($report ,$query);
		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);

		$dial_status = $report['status'] ; // '[]'
		if(!empty($dial_status) && count($dial_status) >0) {
					if( $dial_status != 'Callback' )
						$query->whereIn("ivr.dial_status", $dial_status);
					else
						$query->whereIn('ivr.callback_flag', '>', 0);
				}
		$date_list = $query->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
			->orderby('ivr.start_date_time')
			->get();

		$query = DB::table('ivr_agent_status_log as asl')
			->leftJoin('common_users as cu', 'asl.user_id', '=', 'cu.id')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->leftJoin('ivr_status_priority as sp', 'asl.status', '=', 'sp.status')
			->where('cd.property_id', $property_id);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('asl.user_id', $agent_tags);

		$agent_list = $query->orderBy('sp.priority', 'asc')
			->orderBy('asl.created_at', 'desc')
			->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as agent, cu.id as user_id'))
			->get();

		$summarylist = [];
		$detaillist = [];
		$query = DB::table('ivr_agent_status_history as his')
			->leftJoin('common_users as cu', 'his.user_id', '=', 'cu.id');

		$count = 0 ;
		$count1 = 0 ;
		for( $i = 0 ; $i < count($date_list); $i++) {
			$date = $date_list[$i]->date;
			$summarylist[$count] =	clone $date_list[$i];
			$status_fields =[];
			$agent_number = 0;
			for($j = 0 ; $j< count($agent_list); $j++ ) {
				$user_id = $agent_list[$j]->user_id;
				$query_date = clone $query;
				$dateform = $query_date->where("his.user_id", $user_id)
					->whereRaw("date(his.created_at) like '".$date."%'" )
					->select(DB::raw("CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								his.created_at  as createddate,	
								sum(his.status = 'Online') as online,
								sum(his.status = 'Available') as available,
								sum(his.status = 'Busy') as busy,
								sum(his.status = 'Hold') as hold,
								sum(his.status = 'Idle') as idle,
								sum(his.status = 'On Break') as onbreak,
								sum(his.status = 'Away') as away,
								sum(his.status = 'Wrapup') as wrapup																									
								"))
					->get();
				$status_fields[$agent_number] = clone $agent_list[$j];
				if (!empty($dateform)) {
					$status_fields[$agent_number]->dateform1 = $dateform;
					$agent_number++;
				}
			}
			if(!empty($status_fields)) {
				$summarylist[$count]->date = $date;
				$summarylist[$count]->status =  $status_fields;
				$count++;
			}
		}
		$ret['summary'] = $summarylist;

		$query = DB::table('ivr_agent_status_history as his')
			->leftJoin('common_users as cu', 'his.user_id', '=', 'cu.id')
			->whereBetween('his.created_at', array($start_time, $end_time));

		for( $i = 0; $i < count($agent_list) ;$i++) {
			$detaillist[$i] = $agent_list[$i];
			$agent_id = $agent_list[$i]->user_id;
			$list_query = clone $query;
			$list_query = $this->setGeneraterFilter($report, $list_query);
			$userinform = $list_query->where('his.user_id', '=', $agent_id)
				->orderBy('his.created_at', 'desc')
				->select(DB::raw("DATE(his.created_at) as date,
			 					time(his.created_at) as time,
								 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								 his.status,
								 his.duration,
								 his.extension
																
								"))
				->get();
			if(!empty($userinform)) {
				$detaillist[$count1]->userinform = $userinform;
				$count1++;
			}
			/*
			if($i == count($agent_list)-1) {
				$internal_query = clone $query;
				$internal_query = $this->setGeneraterFilter($report, $internal_query);
			//	$userinform1 = $internal_query->where('ivr.call_origin', '=', 0)
				$userinform1 = $list_query->where('his.user_id', '=', 0)
				->orderBy('his.created_at', 'desc')
				->select(DB::raw("DATE(his.created_at) as date,
			 					time(his.created_at) as time,
								 CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,
								 his.status,
								 his.duration

								"))
					->get();
				$detaillist[$count1]->userinform = $userinform1;
				$count++;
			}
			*/
		}
		$ret['detailed'] = $detaillist;

		$ret['report_type'] = $report['report_type'];

		$agent_status_list = [];

		for($j = 0 ; $j< count($agent_list); $j++ ) {
			$user_id = $agent_list[$j]->user_id;
			$query_agent = clone $query;
			$dateform = $query_agent->where("his.user_id", $user_id)
				->select(DB::raw("CONCAT_WS(\" \", cu.first_name, cu.last_name) as agent,							
							sum(his.status = 'Online') as online,
							sum(his.status = 'Available') as available,
							sum(his.status = 'Busy') as busy,
							sum(his.status = 'Hold') as hold,
							sum(his.status = 'Idle') as idle,
							sum(his.status = 'On Break') as onbreak,
							sum(his.status = 'Away') as away,
							sum(his.status = 'Wrapup') as wrapup																									
							"))
				->first();

			$agent_status_list[] = $dateform;
		}

		if( $report['chart_graph_flag'] == 'true' )
		{
			$ret['graph1'] = $this->makeCallcenterAgentStatusGraph($agent_status_list, $ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;
	}

	private function makeCallcenterAgentStatusGraph($agent_status_list, $ret) {
		// graph data
		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = array('text' => 'Agent Status');
		$options['chart'] = array('type' => 'bar');
		$options['colors'] = ['#23b7e5', '#27c24c', '#6254b2', '#f05050', '#f89406', '#beb411'];

		$categories = [];
		$series = [];

		foreach($agent_status_list as $row) {
			$categories[] = $row->agent;
		}

		$list = [
			['Online', 'online'],
			['Available', 'available'],
			['On Break', 'onbreak'],
			['Busy', 'busy'],
			['Idle', 'idle'],
			// ['Hold', 'hold'],
			['Away', 'away'],
			['Wrapup', 'wrapup'],
		];

		foreach($list as $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['data'] = [];

			foreach($agent_status_list as $row) {
				$value = $row->{$row1[1]};
				$value = (int)$value;
				$item['data'][] = $value;
			}

			$series[] = $item;
		}

		$options['xAxis'] = array('categories' => $categories);
		$options['yAxis'] = array('min' => 0, 'title' => null);
		$options['plotOptions'] = array('series' => array('stacking' => 'normal'));
		$options['series'] = $series;

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';

	}

	public function makeCallcenterReportDataForAutoAttendant($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
//		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];

		$ret = [];

		$query = DB::table('ivr_auto_attendant as ivr')
			->leftJoin('ivr_call_types as ict', 'ivr.type', '=', 'ict.label')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid')
			->leftJoin('call_staff_extn as se', 'ivr.ext', '=', 'se.extension')
			->whereBetween('ivr.start_date_time', array($start_time, $end_time))
			->where('ivr.property_id', $property_id);

		$duration = $report['call_duration'];// ''
		$duration_time = $report['call_duration_time']; // 0;
		if($duration_time > 0) {
				$query->whereRaw("TIME_TO_SEC(ivr.duration)" . $duration . "'" . $duration_time . "'");
		}

		$origin = $report['origin_tags'] ; // []
		if(!empty($origin)) {
			$query->whereIn('pro.national', [$origin]);
		}

		$call_type_auto = $report['call_type_auto_ids'] ;// []
		if(!empty($call_type_auto) && count($call_type_auto) >0) {
			$query->whereIn('ivr.call_type', $call_type_auto);
		}

		$start_date_time = $report['call_time_start'] ;
		$call_time_end = $report['call_time_end'] ;

		if ( $start_date_time != '00:00:00' && $call_time_end != '00:00:00'){

			$time_range = sprintf("TIME(ivr.start_date_time) >= '%s' AND TIME(ivr.end_date_time) < '%s'", $start_date_time, $call_time_end);

			$query->whereRaw($time_range);
		}


		$query_cond = clone $query;
		$date_list = $query_cond->select(DB::raw('distinct(DATE(ivr.start_date_time)) as date'))
		->orderBy('ivr.start_date_time', 'desc')
			->get();


		$ret['report_type'] = $report['report_type'];


		$detaillist = [];
		for( $i = 0; $i < count($date_list) ;$i++) {
			$detaillist[$i] = $date_list[$i];
			$date = $date_list[$i]->date;
			$list_query = clone $query;
	//		$list_query = $this->setGeneraterFilter($report, $list_query);
			$userinform = $list_query->where('ivr.start_date_time', 'like', $date.'%')
				->orderBy('ivr.start_date_time', 'desc')
				->select(DB::raw("DATE(ivr.start_date_time) as date,
								ivr.callback_flag,
			 					time(ivr.start_date_time) as time,
								ivr.ext,
								ivr.callerid as callerid,
								 
			 					se.description,
			 					ivr.call_type as calltype,
			 					ivr.type as type,
			 					 ivr.status,					
			 					ivr.duration
			 											
								"))
				->get();
			$detaillist[$i]->userinform = $userinform;
		}

		$ret['detailed'] = $detaillist;

		$summary = $query
			->groupBy('date')
			->groupBy('group_key')
			->select(DB::raw('
									 count(*) as total, 
									 DATE(ivr.start_date_time) as date,
									 COALESCE(sum(ivr.status = "ANSWER"), 0) as answered,
									 (COALESCE(sum(ivr.status = "ANSWER"), 0)/count(*)) * 100 as ans_per,
									 COALESCE(sum(ivr.status = "NO INPUT"), 0) as noinput,
									 (COALESCE(sum(ivr.status = "NO INPUT"), 0)/count(*)) * 100 as inp_per,
									 COALESCE(sum(ivr.status = "CANCEL"), 0) as cancel,
									 (COALESCE(sum(ivr.status = "CANCEL"), 0)/count(*)) * 100 as can_per,
			     					ivr.call_type as group_key'))

			->get();


		$summarylist = [];
		foreach ($summary as $row) {
            $date = $row->date;
            $summarylist[$date][] = $row;
		}

		$ret['summary_list'] = $summarylist;

		if( $report['chart_graph_flag'] == 'true' )
		{
		//	$ret['graph1'] = $this->makeCallcenterDateGraph($ret);
			$ret['graph1_style'] = Functions::isSuperAgent() && Functions::isLinux() ? 'style=width:500px' : '';
		}

		return $ret;
	}

	private function makeCallcenterAutoGraph($ret) {
		$summarylist = $ret['summary'];

		$param = [];

		$param['type'] = 'png';

		$options = [];
		$options['title'] = array('text' => 'Calls Per Date');
		$options['chart'] = array('type' => 'line', 'width' => 1000, 'height' => 480);
		$options['colors'] = ['#27c24c', '#F44336', '#FFEA00', '#FF9100', '#f89406', '#beb411'];

		$categories = [];
		$series = [];

		foreach($summarylist as $row) {
			$categories[] = $row->dateform1->call_date;
		}

		$list = [
			['Answered', 'answered'],
			['Abandoned', 'abandoned'],
			['Call Back', 'callback'],
			['Missed', 'missed'],
		];

		foreach($list as $row1) {
			$item = [];
			$item['name'] = $row1[0];
			$item['data'] = [];

			foreach($summarylist as $row) {
				$value = $row->dateform1->{$row1[1]};
				$value = (int)$value;
				$item['data'][] = $value;
				// $item['data'][] = 100;
			}

			$series[] = $item;
		}

		$options['xAxis'] = array('categories' => $categories);
		$options['yAxis'] = array('min' => 0, 'title' => null);
		// $options['plotOptions'] = array('series' => array('stacking' => 'normal'));
		$options['series'] = $series;

		$param['options'] = $options;

		// echo json_encode($param);

		$setting = PropertySetting::getServerConfig(0);

		$graph = Curl::to($setting['export_server'] . 'exportchart')
            ->withData($param)
            ->asJson()
            ->post();

        if( !empty($graph) && !empty($graph->data) )
        	return $graph->data;
        else
        	return '';
	}

	public function makeCallcenterReportDataForAbandonedCall($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

		$query = $this->setGeneraterFilter($report ,$query);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);
		$query->where('ivr.user_id', '>', 0);
		$query->whereBetween('ivr.start_date_time', array($start_time, $end_time));

		$detailquery = clone $query;
		$calllist = $detailquery->groupBy('call_date')
			->groupBy('ivr.user_id')
			->select(DB::raw("DATE(ivr.start_date_time) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								count(*) as total_calls,
								sum(ivr.dial_status = '". ABANDONED ."') as abandoned,
								SEC_TO_TIME(max((ivr.dial_status = '". ABANDONED ."') * TIME_TO_SEC(ivr.time_to_answer))) as abandoned_max,
								sum(ivr.dial_status = '". ABANDONED ."' AND TIME_TO_SEC(ivr.time_to_answer) > 20) as abandoned_20
								"))
			->get();

		$ret['detail'] = $calllist;

		$summaryquery = clone $query;
		$summarylist = $summaryquery
				->groupBy('ivr.user_id')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								count(*) as total_calls,
								sum(ivr.dial_status = '". ABANDONED ."') as abandoned,
								SEC_TO_TIME(max((ivr.dial_status = '". ABANDONED ."') * TIME_TO_SEC(ivr.time_to_answer))) as abandoned_max,
								sum(ivr.dial_status = '". ABANDONED ."' AND TIME_TO_SEC(ivr.time_to_answer) > 20) as abandoned_20
								"))
				->get();

		$ret['summary'] = $summarylist;

		return $ret;

	}

	public function makeCallcenterReportDataForAbandonedDetail($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

		$query = $this->setGeneraterFilter($report ,$query);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);
		$query->where('ivr.user_id', '>', 0);

		$query->where('ivr.dial_status', ABANDONED);
		$query->whereBetween('ivr.start_date_time', array($start_time, $end_time));

		$detailquery = clone $query;
		$calllist = $detailquery->orderBy('call_date')
				->select(DB::raw("ivr.*,
								DATE(ivr.start_date_time) as call_date,
								DATE(ivr.start_date_time) as call_time,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								pro.national
								"))
				->get();

		$ret['detail'] = $calllist;

		$summaryquery = clone $query;
		$summarylist = $summaryquery
				->groupBy('ivr.user_id')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								count(*) as total_calls,
								sum(ivr.dial_status = '". ABANDONED ."') as abandoned,
								SEC_TO_TIME(max((ivr.dial_status = '". ABANDONED ."') * TIME_TO_SEC(ivr.time_to_answer))) as abandoned_max,
								sum(ivr.dial_status = '". ABANDONED ."' AND TIME_TO_SEC(ivr.time_to_answer) > 20) as abandoned_20
								"))
				->get();

		$ret['summary'] = $summarylist;

		return $ret;

	}
	public function setGeneraterFilter($report ,$query) {

		$callerid = $report['caller_id'];// 0
		if($callerid !=0 ) {
			$query->where('ivr.callerid','like', $callerid.'%' ) ;
		}
		$origin = $report['origin_tags'] ; // []
		if(!empty($origin)) {
			$query->whereIn('pro.national', [$origin]);
		}

		$call_type = $report['call_type_ids'] ;// []
		if(!empty($call_type) && count($call_type) >0) {
			$query->whereIn('ict.id', $call_type);
		}

		$type = $report['type_ids'] ;// []
		if(!empty($type) && count($type) >0) {
			$query->whereIn('ivr.call_type', $type);
		}

		$channel_type = $report['channel_type_ids'] ;// []
		if(!empty($channel_type) && count($channel_type) >0) {
			$query->whereIn('ic.id', $channel_type);
		}

		$skill_group = $report['skill_group_ids'] ;// []
		if(!empty($skill_group) && count($skill_group) >0) {
			$query->whereIn('icsg.id', $skill_group);
		}

		$follow = $report['follow_up'] ; // 'All'
		if($follow == 'Yes') {
			$query->where('ivr.follow', '=', 0);
		}else if($follow == 'No') {
			$query->where('ivr.follow', '=', 1);
		}

		$taken = $report['taken'] ; // 'All'
		if($taken == 'true') {
			$query->where('ivr.agent_take', '!=', 'NULL');
		}
		/*
		$dial_status = $report['status'] ; // '[]'
		if(!empty($dial_status) && count($dial_status) >0) {
			if( $dial_status != 'Callback' )
				$query->where("ivr.dial_status", $dial_status);
			else
				$query->whereIn('ivr.callback_flag', '>', 0);
		}
*/
		$hours = 0 ;
		$minutes = 0 ;
		$seconds = 0;
		$start_date_time = $report['call_time_start'] ;// '00:00:00');
	//	$str_time = preg_replace("/^([\d]{1,2})\:([\d]{2})$/", "00:$1:$2", $start_date_time);
	//	sscanf($str_time, "%d:%d:%d", $hours, $minutes, $seconds);
	//	$time_seconds = $hours * 3600 + $minutes * 60 + $seconds;
	//	if($time_seconds > 0) {
	//		$query->whereRaw("ivr.start_date_time >= CAST('$start_date_time' AS time) ");
	//	}

		$call_time_end = $report['call_time_end'] ;// '00:00:00'
	//	$str_time = preg_replace("/^([\d]{1,2})\:([\d]{2})$/", "00:$1:$2", $call_time_end);
	//	sscanf($str_time, "%d:%d:%d", $hours, $minutes, $seconds);
	//	$time_seconds = $hours * 3600 + $minutes * 60 + $seconds;
	//	if($time_seconds > 0) {
	//		$query->whereRaw("ivr.end_date_time >= CAST('$call_time_end' AS time) ");
	//	}

		if ( $start_date_time != '00:00:00' && $call_time_end != '00:00:00'){

			$time_range = sprintf("TIME(ivr.start_date_time) >= '%s' AND TIME(ivr.end_date_time) < '%s'", $start_date_time, $call_time_end);

			$query->whereRaw($time_range);
		}

		$duration = $report['call_duration'];// ''
		$duration_time = $report['call_duration_time']; // 0;
		if($duration_time > 0) {
			$query->whereRaw("TIME_TO_SEC(ivr.duration)" . $duration . "'" . $duration_time . "'");
		}
		$queue = $report['call_in_queue'] ; // '';
		$queue_time = $report['call_in_queue_time'] ; //  0;

		return $query;
	}

	public function makeCallcenterReportDataForAgentCallDetail($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
			->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
		    ->leftjoin(DB::raw('(SELECT SUM(duration)  hold_time, user_id ,
						 ticket_id FROM ivr_agent_status_history where
						 status ="hold"  GROUP BY ticket_id) as his'), 'ivr.id', '=', 'his.ticket_id')
			->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

		$query = $this->setGeneraterFilter($report ,$query);


		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);
		$query->where('ivr.user_id', '>', 0);
		$query->where('ivr.start_date_time', '>=', $start_time);
		$query->where('ivr.start_date_time', '<=', $end_time);

		$detailquery = clone $query;
		$calllist = $detailquery
		//$calllist = $detailquery->groupBy('call_start_date')
			->orderBy('ivr.start_date_time')
			->select(DB::raw("	CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								DATE(ivr.start_date_time) as call_start_date,
								TIME(ivr.start_date_time) as call_start_time,
								DATE(ivr.end_date_time) as call_end_date,
								TIME(ivr.end_date_time) as call_end_time,
								ivr.call_type as call_type,
								ivr.callerid as caller_id,
								ivr.waiting as waiting,
								ivr.time_to_answer,
								ivr.duration as talk_time,
								TIME_FORMAT(SEC_TO_TIME(his.hold_time),'%lm') as hold_time,
								ivr.type as type,
								ivr.channel as channel"))
			->get();
		$ret['detail'] = $calllist;

		$summaryquery = clone $query;
		$summarylist = $summaryquery
			->groupBy('ivr.user_id')
			->select(DB::raw("DATE(ivr.start_date_time) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								FLOOR(avg(TIME_TO_SEC(time_to_answer))) as avg_time_answer,
								FLOOR(avg(TIME_TO_SEC(duration)/60)) as avg_talk_time,
								(SELECT COUNT(*)  FROM ivr_voice_recording WHERE type ='Inquiry' and user_id = 'ivr.user_id'  ) AS  inquiry,
								(SELECT COUNT(*)  FROM ivr_voice_recording WHERE type ='Booking' and user_id = 'ivr.user_id' ) AS  reservation,
								(SELECT COUNT(*)  FROM ivr_voice_recording WHERE type ='Modify' and user_id = 'ivr.user_id' ) AS  follow"))
			->get();

		$ret['summary'] = $summarylist;

		return $ret;

	}

	public function makeCallcenterReportDataForAgentActivity($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];

		$ret = [];

		$query = DB::table('ivr_agent_status_history as ash')
				->leftJoin('common_users as cu', 'ash.user_id', '=', 'cu.id')
				->leftJoin('ivr_voice_recording as ivr', 'ash.ticket_id', '=', 'ivr.id');


		//$query = $this->setGeneraterFilter($report ,$query);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ash.user_id', $agent_tags);
		$query->where('ash.user_id', '>', 0);
		$query->whereBetween('ash.created_at', array($start_time, $end_time));

		$detailquery = clone $query;
		$actionlist = $detailquery
				->select(DB::raw("ash.*, CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								ivr.type, ivr.callerid, ivr.call_type"))
				->get();

		$ret['detail'] = $actionlist;

		$summaryquery = clone $query;
		$summarylist = $summaryquery
				->groupBy('ash.status')
				->select(DB::raw("sum(ash.duration) as duration, ash.status"))
				->get();

		$ret['summary'] = $summarylist;

		return $ret;
	}

	public function makeCallcenterReportDataForCallTypeSummaryByAgent($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr')
				->leftJoin('common_users as cu', 'ivr.user_id', '=', 'cu.id')
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

		$query = $this->setGeneraterFilter($report ,$query);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);
		$query->where('ivr.user_id', '>', 0);
		$query->whereBetween('ivr.start_date_time', array($start_time, $end_time));

		$detailquery = clone $query;
		$calllist = $detailquery->groupBy('call_date')
				->groupBy('ivr.user_id')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								count(*) as total_calls,
								sum(ivr.type = 'Booking') as booking,
								sum(ivr.type = 'Inquiry') as inquiry,
								sum(ivr.type = 'Followup') as followup,
								sum(ivr.type = 'Other') as other
								"))
				->get();

		$ret['detail'] = $calllist;

		$summaryquery = clone $query;
		$summarylist = $summaryquery
				->groupBy('ivr.user_id')
				->select(DB::raw("DATE(ivr.start_date_time) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								count(*) as total_calls,
								sum(ivr.type = 'Booking') as booking,
								sum(ivr.type = 'Inquiry') as inquiry,
								sum(ivr.type = 'Followup') as followup,
								sum(ivr.type = 'Others') as other

								"))
				->get();

		$ret['summary'] = $summarylist;

		return $ret;
	}

	public function makeCallcenterReportDataForAgentActivitySummary($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];

		$ret = [];

		$query = DB::table('ivr_agent_status_history as ash')
				->leftJoin('common_users as cu', 'ash.user_id', '=', 'cu.id');

		//$query = $this->setGeneraterFilter($report ,$query);

		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ash.user_id', $agent_tags);
		$query->where('ash.user_id', '>', 0);
		$query->whereBetween('ash.created_at', array($start_time, $end_time));

		$detailquery = clone $query;
		$calllist = $detailquery->groupBy('call_date')
				->groupBy('ash.user_id')
				->select(DB::raw("DATE(ash.created_at) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								SEC_TO_TIME(sum((ash.status = '". ONLINE ."') * ash.duration)) as online,
								SEC_TO_TIME(sum((ash.status = '". AVAILABLE ."') * ash.duration)) as available,
								SEC_TO_TIME(sum((ash.status = '". NOTAVAILABLE ."') * ash.duration)) as notavailable,
								SEC_TO_TIME(sum((ash.status = '". BUSY ."') * ash.duration)) as busy,
								SEC_TO_TIME(sum((ash.status = '". HOLD ."') * ash.duration)) as hold,
								SEC_TO_TIME(sum((ash.status = '". IDLE ."') * ash.duration)) as idle
								"))
				->get();

		$ret['detail'] = $calllist;

		$summaryquery = clone $query;
		$summarylist = $summaryquery
				->groupBy('ash.user_id')
				->select(DB::raw("DATE(ash.created_at) as call_date,
								CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename,
								SEC_TO_TIME(sum((ash.status = '". ONLINE ."') * ash.duration)) as online,
								SEC_TO_TIME(sum((ash.status = '". AVAILABLE ."') * ash.duration)) as available,
								SEC_TO_TIME(sum((ash.status = '". NOTAVAILABLE ."') * ash.duration)) as notavailable,
								SEC_TO_TIME(sum((ash.status = '". BUSY ."') * ash.duration)) as busy,
								SEC_TO_TIME(sum((ash.status = '". HOLD ."') * ash.duration)) as hold,
								SEC_TO_TIME(sum((ash.status = '". IDLE ."') * ash.duration)) as idle
								"))
				->get();

		$ret['summary'] = $summarylist;

		return $ret;

	}

	public function makeCallcenterReportDataFoCallTraficTimeAnalysis($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];
		$agent_tags = $report['agent_tags'];

		$start_date_time = new DateTime($start_time);
		$end_date_time = new DateTime($end_time);

		$start_date = $start_date_time->format('Y-m-d');
		$end_date = $end_date_time->format('Y-m-d');

		$ret = [];

		$query = DB::table('ivr_voice_recording as ivr');
		if( !empty($agent_tags) && count($agent_tags) > 0 )
			$query->whereIn('ivr.user_id', $agent_tags);
		$query->where('ivr.user_id', '>', 0)
				->leftJoin('ivr_caller_profile as pro', 'ivr.callerid', '=', 'pro.callerid');

		$query = $this->setGeneraterFilter($report ,$query);

		$date_range = sprintf("DATE(ivr.start_date_time) >= '%s' AND DATE(ivr.start_date_time) <= '%s'", $start_date, $end_date);
		$query->whereRaw($date_range);

		$call_trafic = [];

		for ($i = 0; $i < 48; $i++) {
			$call_trafic[$i] = [];
			$start_time = sprintf("%02d:%02d:00", $i / 2, $i % 2 == 0 ? 0 : 30);
			$end_time = sprintf("%02d:%02d:00", ($i + 1) / 2, $i % 2 == 0 ? 30 : 0);

			$time_range = sprintf("TIME(ivr.start_date_time) >= '%s' AND TIME(ivr.start_date_time) < '%s'", $start_time, $end_time);
			$data_query = clone $query;

			$data_query->whereRaw($time_range);

			$datalist = $data_query
					->select(DB::raw("
						count(*) as total_calls,
						sum(ivr.dial_status = '". ANSWERED ."') as answered,
						floor(avg((ivr.dial_status = '". ANSWERED ."') * TIME_TO_SEC(ivr.duration))) as avg_duration,
						floor(avg((ivr.dial_status = '". ANSWERED ."') * TIME_TO_SEC(ivr.time_to_answer))) as avg_tta,
						sum(ivr.dial_status = '". ABANDONED ."') as abandoned,
						floor(avg((ivr.dial_status = '". ABANDONED ."') * TIME_TO_SEC(ivr.waiting))) as avg_waiting,
						sum(ivr.call_type = 'outgoing') as outgoing,
						avg((ivr.call_type = 'outgoing') * TIME_TO_SEC(ivr.duration)) as avg_outgoing_duration
					"))
					->first();

			$call_trafic[$i]['time_name'] = $start_time;
			$call_trafic[$i]['call_trafic'] = $datalist;
		}

		$ret['detail'] = $call_trafic;

		$data_query = clone $query;

		$datalist = $data_query
				->select(DB::raw("
						count(*) as total_calls,
						sum(ivr.dial_status = '". ANSWERED ."') as answered,
						floor(avg((ivr.dial_status = '". ANSWERED ."') * TIME_TO_SEC(ivr.duration))) as avg_duration,
						floor(avg((ivr.dial_status = '". ANSWERED ."') * TIME_TO_SEC(ivr.time_to_answer))) as avg_tta,
						sum(ivr.dial_status = '". ABANDONED ."') as abandoned,
						floor(avg((ivr.dial_status = '". ABANDONED ."') * TIME_TO_SEC(ivr.waiting))) as avg_waiting,
						sum(ivr.call_type = 'outgoing') as outgoing,
						floor(avg((ivr.call_type = 'outgoing') * TIME_TO_SEC(ivr.duration))) as avg_outgoing_duration
					"))
				->first();

		$ret['summary'] = $datalist;

		return $ret;
	}

	public function makeCallcenterReportData($report) {
		$report_by = $report['report_by'];

		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		if( !isset($report['chart_graph_flag']) )
			$report['chart_graph_flag'] = 'true';

		if( !isset($report['taken']) )
			$report['taken'] = 'true';

		$start_date_time = new DateTime($start_time);
		$end_date_time = new DateTime($end_time);

		$ret = [];

		////////////////
		if($report_by == 'Agent' ) {
			$ret = $this->makeCallcenterReportDataForAgent($report);
		}
		if($report_by == 'Call Status' ) {
			$ret = $this->makeCallcenterReportDataForCallStatus($report);
		}

		if($report_by == 'Date') {
			$ret = $this->makeCallcenterReportDataForDate($report);
		}

		if($report_by == 'Origin') {
			$ret = $this->makeCallcenterReportDataForOrigin($report);
		}

		if($report_by == 'Per Hour') {
			$ret = $this->makeCallcenterReportDataForPerHour($report);

		}
		if($report_by == 'Call Type') {
			$ret = $this->makeCallcenterReportDataForCallType($report);
		}
		if($report_by == 'Channel') {
			$ret = $this->makeCallcenterReportDataForChannelType($report);
		}
		if($report_by == 'Agent Status') {
			$ret = $this->makeCallcenterReportDataForAgentStatus($report);
		}
		if($report_by == 'Auto Attendant') {
			$ret = $this->makeCallcenterReportDataForAutoAttendant($report);
		}

		if($report['report_type'] == 'Detailed' )
			$ret['title'] = $report_by.' Detailed Report';
		if($report['report_type'] == 'Summary' )
			$ret['title'] = $report_by.' Summary Report';
		///////////////////////////////////////////////
		if($report_by == 'Abandoned Summary' ) {
			$ret = $this->makeCallcenterReportDataForAbandonedCall($report);
			$ret['title'] = 'Abandoned Summary Report';
		}

		if($report_by == 'Abandoned Detail' ) {
			$ret = $this->makeCallcenterReportDataForAbandonedDetail($report);
			$ret['title'] = 'Abandoned Detail Report';
		}

		if($report_by == 'Agent Call Detailed') {
			$ret = $this->makeCallcenterReportDataForAgentCallDetail($report);
			$ret['title'] = 'Agent Call Detailed Report';
		}
		if($report_by == 'Agent Activity') {
			$ret = $this->makeCallcenterReportDataForAgentActivity($report);
			$ret['title'] = 'Agent Activity Detailed Report';
		}
		if($report_by == 'Call Type Summary by Agent') {
			$ret = $this->makeCallcenterReportDataForCallTypeSummaryByAgent($report);
			$ret['title'] = 'Call Type Summary Report by Agent';
		}

		if($report_by == 'Agent Activity Summary') {
			$ret = $this->makeCallcenterReportDataForAgentActivitySummary($report);
			$ret['title'] = 'Agent Activity Summary report';
		}

		if($report_by == 'Call Trafic Time Analysis') {
			$ret = $this->makeCallcenterReportDataFoCallTraficTimeAnalysis($report);
			$ret['title'] = 'Call Traffic Time Analysis';
		}

		if( count($report['agent_tags']) < 1 )
			$ret['agentlist'] = 'All';
		else {
			$userlist = DB::table('common_users as cu')->whereIn('id', $report['agent_tags'])
					->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'))
					->get();
			$str = '';
			foreach($userlist as $key => $row) {
				if($key > 0 )
					$str = $str . ", ";
				$str = $str . $row->wholename;
			}
			$ret['agentlist'] = $str;
		}

		$ret['start_date'] = $start_date_time->format('Y-m-d');
		$ret['end_date'] = $end_date_time->format('Y-m-d');
		$ret['start_time'] = $start_date_time->format('H:i');
		$ret['end_time'] = $end_date_time->format('H:i');
		$ret['report_by'] = $report_by;
		$ret['property'] = Property::find($report['property_id']);
		$ret['chart_graph_flag'] = $report['chart_graph_flag'];

		return $ret;
	}

	public function makeWakeupcallReportData($report) {
		$start_time = $report['start_time'];
		$end_time = $report['end_time'];

		//$start_date_time = new DateTime($start_time);
		//$end_date_time = new DateTime($end_time);

		$agent_tags = $report['agent_tags'];
		$property_id = $report['property_id'];
		$report_type = $report['report_type'];
		$report_by = $report['report_by'];
		$room_tags = $report['room_tags'];
		$status_tags = $report['status_tags'];
		$building_id = $report['building_id'];
		$cur_date = $report['cur_date'];
		$cur_time = $report['cur_time'];

		$ret = [];

		$query = DB::table('services_awu as au')
			->leftJoin('common_room as cr', 'au.room_id', '=', 'cr.id')
			->leftJoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			//->leftJoin('call_guest_extn as ge', 'au.extension_id', '=', 'ge.id')
			->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
			->leftJoin('common_users as cu', 'au.set_by_id', '=', 'cu.id')
			->leftJoin('common_guest as gu', 'au.guest_id', '=', 'gu.guest_id')
			->where('au.property_id', $property_id);



		$hours = 0 ;
		$minutes = 0 ;
		$seconds = 0;
		$str_time = preg_replace("/^([\d]{1,2})\:([\d]{2})$/", "00:$1:$2", $start_time);
		sscanf($str_time, "%d:%d:%d", $hours, $minutes, $seconds);
		$time_seconds = $hours * 3600 + $minutes * 60 + $seconds;
		if($time_seconds > 0) {
			//$query->whereRaw("au.time >= CAST('$end_time' AS time) ");
			$query->whereRaw("au.time >= '$str_time'");
		}

		$str_time = preg_replace("/^([\d]{1,2})\:([\d]{2})$/", "00:$1:$2", $end_time);
		sscanf($str_time, "%d:%d:%d", $hours, $minutes, $seconds);
		$time_seconds = $hours * 3600 + $minutes * 60 + $seconds;
		if($time_seconds > 0) {
			//$query->whereRaw("au.time <= CAST('$end_time' AS time) ");
			$query->whereRaw("au.time <= '$end_time' ");
		}

		$query1 = DB::table('services_awu as awu')
			->leftJoin('common_room as cr', 'awu.room_id', '=', 'cr.id')
			->leftJoin('call_guest_extn as ge', 'awu.extension_id', '=', 'ge.id')
			->leftJoin('common_floor as cf', 'cr.flr_id', '=', 'cf.id')
			->leftJoin('common_building as cb', 'cf.bldg_id', '=', 'cb.id')
			->leftJoin('common_guest as cg', function($join) {
				$join->on('awu.guest_id', '=', 'cg.guest_id');
				$join->on('awu.property_id', '=', 'cg.property_id');
			})
			->where('awu.property_id', $property_id)
			->whereRaw(sprintf("DATE(awu.time) >= '%s' and DATE(awu.time) <= '%s'", $start_time, $end_time));

		if($building_id > 0) $query1->where('cb.id', $building_id);
		if( !empty($room_tags) && count($room_tags) > 0 )
			$query1->whereIn('cr.room', $room_tags);
		if( !empty($status_tags) && count($status_tags) > 0 )
			$query1->whereIn('awu.status', $status_tags);
		//if( !empty($agent_tags) && count($agent_tags) > 0 )
			//$query->whereIn('cu.id', $agent_tags);

		$buildquery = clone $query1;
		$buildquery->groupby('cb.id');
		$buildinglist = $buildquery->select(DB::raw("cb.name as name,awu.*,cr.room,
								sum(awu.status = 'Success') as success,
								sum(awu.status = 'Pending') as pending,
								sum(awu.status = 'Failed') as failed,
								sum(awu.status = 'Canceled') as canceled,								
								count(*) as total								
								"))
						->get();
		//summary
		$ret['building'] =$buildinglist;


		$detailquery = clone $query1;
		$data_list = $detailquery
					->select(DB::raw('awu.*, cr.room,cg.guest_name, DATE(awu.time) as date '))
					->get();


		$roomquery = clone $query;
		$roomquery->groupby('au.room_id');
		$roomlist = $roomquery->select(DB::raw("cr.room as room, 
								au.room_id as room_id,
								sum(au.status = 'Success') as success,
								sum(au.status = 'Failed') as failed,
								sum(au.status = 'Canceled') as canceled,								
								count(*) as total								
								"))
					->get();
		$ret['room'] =$roomlist;

		//detail
		$detailroomquery = clone $query;
		$detailroomquery->groupby('au.room_id')
			->groupby('au.guest_id');
		$detailroomlist = $detailroomquery->select(DB::raw("cr.room as room, 
								au.room_id,
								gu.guest_name"))
								->get();
		$detaillist = [];
		$count = 0 ;
		for($i = 0 ; $i < count($detailroomlist) ; $i++) {
			$room_id = $detailroomlist[$i]->room_id;
			$room_name = $detailroomlist[$i]->room;
			$guest_name = $detailroomlist[$i]->guest_name;
			$roominformquery = clone $query;
			$roominform = $roominformquery->where('au.room_id', $room_id)
						->select(DB::raw("au.*, cf.floor as room, CONCAT_WS(\" \", cu.first_name, cu.last_name) as wholename"))
						->orderBy('au.id')
						->get();
			$detaillist[$count] = clone $detailroomlist[$i];
			if(!empty($roominform)&&!empty($room_name)) {
				$detaillist[$count]->room_name = $room_name;
				$detaillist[$count]->guest_name = $guest_name;
				$detaillist[$count]->roominform = $roominform;
				$count++;
			}
		}
		$wakeup_list = [];
		foreach ($data_list as $row) {
			$group_key = $row->time;

			switch($report_by)
			{
				case 'Date':
					$group_key = date("d-M-Y", strtotime($row->time));
					break;
				case 'Room':
					$group_key = $row->room;
					break;
				case 'Status':
					$group_key = $row->status;
					break;
				default:
					$group_key = date("d-M-Y", strtotime($row->time));
					$ret['report_by'] = 'Date';
					break;
			}

			$wakeup_list[$group_key][] = $row;

		}
		$building_list = [];
		foreach ($buildinglist as $row) {
			$group_key = date("d-M-Y", strtotime($row->time));

			switch($report_by)
			{
				case 'Date':
					$group_key = date("d-M-Y", strtotime($row->time));
					break;
				case 'Room':
					$group_key = $row->room;
					break;
				case 'Status':
					$group_key = $row->status;
					break;
				default:
					$group_key = date("d-M-Y", strtotime($row->time));
					$ret['report_by'] = 'Date';
					break;
			}

			$building_list[$group_key][] = $row;

		}
		$ret['wakeup_list'] = $wakeup_list;
		$ret['building_list'] = $building_list;
		$ret['detailed'] = $detaillist;
		$ret['data_list'] = $data_list;
		$property = DB::table('common_property')
			->where('id', $property_id)
			->first();
		$ret['property'] = $property;

		$ret['report_type'] = $report_type;
		$ret['status_tags'] = $status_tags;
		$ret['room_tags'] = $room_tags;
		$ret['report_by'] = $report_by;
		$ret['period'] =  date_format(new DateTime($start_time), "d-M-Y H:i")." to ". date_format(new DateTime($end_time), "d-M-Y H:i");
		/////////////////////////////
//		$ret['start_date'] = $start_time->format('Y-m-d');
//		$ret['end_date'] = $end_time->format('Y-m-d');
//		$ret['start_time'] = $start_time->format('H:i');
//		$ret['end_time'] = $end_time->format('H:i');
		$ret['cur_date'] = $cur_date;
		$ret['cur_time'] = $cur_time;
		if($report['report_type'] == 'Detailed' )
			$ret['title'] = 'AWC Detailed Report by ' . $report_by;
		if($report['report_type'] == 'Summary' )
			$ret['title'] = 'AWC Summary Report';
		return $ret;
	}

	public function getCallcenterReportData(Request $request) {
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');

		$report = [];
		$report['report_by'] = $request->get('report_by', 'Abandoned Summary');
		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);
		$report['agent_tags'] = json_decode($request->get('agent_tags', '[]'));
		$report['orderby'] = $request->get('field', 'call_date');
		$report['property_id'] = $request->get('property_id', 4);

		$report['caller_id'] = $request->get('caller_id', 0);
		$report['origin_tags'] = json_decode($request->get('origin_tags', '[]'));
		$report['type_ids'] = json_decode($request->get('type_ids', '[]'));
		$report['call_type_ids'] = json_decode($request->get('call_type_ids', '[]'));
		$report['call_type_auto_ids'] = json_decode($request->get('call_type_auto_ids', '[]'));
		$report['channel_type_ids'] = json_decode($request->get('channel_type_ids', '[]'));
		$report['skill_group_ids'] = json_decode($request->get('skill_group_ids', '[]'));
		$report['follow_up'] = $request->get('follow_up', 'All');
		$report['status'] = json_decode($request->get('status', '[]'));
		$report['call_time_start'] = $request->get('call_time_start', '00:00:00');
		$report['call_time_end'] = $request->get('call_time_end', '00:00:00');
		$report['call_duration'] = $request->get('call_duration', '');
		$report['call_duration_time'] = $request->get('call_duration_time', 0);
		$report['call_in_queue'] = $request->get('call_in_queue', '');
		$report['call_in_queue_time'] = $request->get('call_in_queue_time', 0);
		$report['chart_graph_flag'] = $request->get('chart_graph_flag', 'true');
		$report['taken'] = $request->get('taken', 'false');

		return $this->makeCallcenterReportData($report);
	}
	public function getWakeupcallReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');

		$report = [];
		$report['report_type'] = $request->get('report_type', 'Detailed');
		$report['report_by'] = $request->get('report_by', 'Date');
		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);
		$report['agent_tags'] = json_decode($request->get('agent_tags', '[]'));
		$report['room_tags'] = json_decode($request->get('room_tags', '[]'));
		$report['status_tags'] = json_decode($request->get('status_tags', '[]'));
		$report['orderby'] = $request->get('field', 'time');
		$report['property_id'] = $request->get('property_id', 4);
		$report['building_id'] = $request->get('building_id', 0);
		$report['start_time'] = $request->get('start_time', $cur_date . ' 00:00:00');
		$report['end_time'] = $request->get('end_time', $cur_time);
		$report['cur_time'] = $cur_time;
		$report['cur_date'] = $cur_date;

		return $this->makeWakeupcallReportData($report);
	}

	public function generateCallcenterReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		$data = $this->getCallcenterReportData($request);

		$param = $request->all();

		$this->sendNotifyDownloadCompleted($param);

		return view('frontend.report.callcenter_pdf', compact('data'));
	}

	public function generateWakeupcallReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		$data = $this->getWakeupcallReportData($request);
		$param = $request->all();

		$this->sendNotifyDownloadCompleted($param);


		return view('frontend.report.wakeupcall_pdf', compact('data'));
	}

	public function generateLnfReport(Request $request) {
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);

		$data = $this->getWakeupcallReportData($request);
		$param = $request->all();
		$this->sendNotifyDownloadCompleted($param);

		return view('frontend.report.lostfound_report', compact('data'));
	}

	public function downloadLnfExcelReport(Request $request)
	{
		ini_set('memory_limit','-1');
		ini_set('max_execution_time', 300);
		set_time_limit(0);

		$data = $this->getLNFReportData($request);
		$property_id = $request->get('property_id',4);

		// $logo_path = $property->logo_path;
		// if ($data['report_type'] = 'Detailed')
		// {
		// 	$filename = 'Detailed_Auto Wakeup Call_Report_by_' . $data['report_by'] . '_' . date('d_M_Y_H_i');
		// }
		// else
		// {
		// 	$filename = 'Summary_Auto Wakeup Call_Report_' . date('d_M_Y_H_i');
		// }
		// $param = $request->all();

		// Excel::create($filename, function($excel) use ($data, $logo_path, $param) {
		// 	$excel->sheet('AWC Report', function($sheet) use ($data, $logo_path) {
		// 		$sheet->setOrientation('landscape');
		// 		$this->outputComplaintLogo($sheet,$logo_path);
		// 		$this->outputWakeupcallDescription($sheet, $data);

		// 		$row_num = 7;

		// 		if (($data['report_type'] == 'Detailed') || ($data['report_type'] == 'Summary'))
		// 		{
		// 			$row_num = $this->outputWakeupCallReport($sheet, $row_num, $data);
		// 		}

		// 	});

		// 	$this->sendNotifyDownloadCompleted($param);

		// })->export(config('app.report_file_type'));
	}

	public function createScheduleReport(Request $request) {
		$property_id = $request->get('property_id', '');
		$report_type = $request->get('report_type', '');
		$name = $request->get('name', '');
		$frequency = $request->get('frequency', '');
		$format = $request->get('report_format','');
		$date = $request->get('date', '');
		$day = $request->get('day', '');
		$time = $request->get('time', '');
		$start_time = $request->get('start_time', '');
		$end_time = $request->get('end_time', '');
		$recipient = $request->get('recipient', '');
		//$recipient = json_decode($recipients);
		$filter = $request->get('filter', '');
		$repeat_flag = $request->get('repeat_flag', 0);
		$attach_flag = $request->get('attach_flag', 0);
		$submitter = $request->get('submitter','0');

		date_default_timezone_set(config('app.timezone'));
		$created_at = date('Y-m-d H:i:s');

		$str = preg_replace(array('/\"/','/\[/','/\]/'), '', $recipient);

		$setting = new ScheduleReportSetting();

		$setting->property_id=$property_id;
		$setting->report_type = $report_type;
		$setting->name = $name;
		$setting->frequency = $frequency;
		$setting->format = $format;
		$setting->date = $date;
		$setting->day = $day;
		$setting->time = $time;
		$setting->start_time = $start_time;
		$setting->end_time = $end_time;
		$setting->recipient = $str;
		$setting->filter = json_encode($filter);
		$setting->repeat_flag = $repeat_flag;
		$setting->attach_flag = $attach_flag;
		$setting->created_at = $created_at;
		$setting->submitter = $submitter;
		$setting->save();

		$message = [];
		$message['type'] = 'refresh_schedulereport';
		Redis::publish('notify', json_encode($message));

		return Response::json($setting);
	}

	public function getScheduleSubmitter(Request $request) {
		$property_id = $request->get('property_id', '');
		$submitter = $request->get('submitter', '');
		$list = DB::table('common_schedule_report_setting as re')
			->where('re.property_id', $property_id)
			->where('re.submitter', $submitter)
			->get();
		$schedule = false;
		if(!empty($list)) $schedule = true;
		return Response::json($schedule);
	}
	public function updateScheduleReport(Request $request) {
		$id = $request->get('id', '');
		$input = $request->all();
		DB::table('common_schedule_report_setting')
			->where('id', $id)
			->update($input);	// read state

		$message = [];
		$message['type'] = 'refresh_schedulereport';
		Redis::publish('notify', json_encode($message));

		return Response::json($input);
	}


	public function getScheduledReportList(Request $request) {
		$page = $request->get('page', 0);
		$pageSize = $request->get('pagesize', 20);
		$skip = $page;
		$orderby = $request->get('field', 'id');
		$sort = $request->get('sort', 'asc');
		$property_id = $request->get('property_id', '0');
		$user_id = $request->get('user_id', '0');

		$admin_flag = CommonUser::isValidModule($user_id, 'app.reports.admin');

		if($pageSize < 0 )
			$pageSize = 20;

		$ret = [];

		$query = DB::table('common_schedule_report_setting as re')
			->where('re.property_id', $property_id);

		if( $admin_flag == false )
			$query->where('re.submitter', $user_id);

		$data_query = clone $query;

		$data_list = $data_query
			->orderBy($orderby, $sort)
			->select(DB::raw('re.*'))
			->skip($skip)->take($pageSize)
			->get();

		$count_query = clone $query;
		$totalcount = $count_query->count();

		$ret['datalist'] = $data_list;
		$ret['totalcount'] = $totalcount;

		return Response::json($ret);
	}

	public function getDayEndReportList(Request $request) {
		$page = $request->get('page', 0);
		$pageSize = $request->get('pagesize', 20);
		$skip = $page;
		$orderby = $request->get('field', 'created_at');
		$sort = $request->get('sort', 'desc');
		$property_id = $request->get('property_id', '0');

		if($pageSize < 0 )
			$pageSize = 20;
		$ret = [];

		$query = DB::table('common_report_history as re');
			//->where('re.property_id', $property_id);

		$data_query = clone $query;

		$data_list = $data_query
			->orderBy($orderby, $sort)
			->select(DB::raw('re.*'))
			->skip($skip)->take($pageSize)
			->get();

		$count_query = clone $query;
		$totalcount = $count_query->count();

		$ret['datalist'] = $data_list;
		$ret['totalcount'] = $totalcount;

		return Response::json($ret);
	}

	public function deleteScheduleReport(Request $request) {
		$id = $request->get('id', '');
		DB::table('common_schedule_report_setting')->where('id', $id)->delete();

		$message = [];
		$message['type'] = 'refresh_schedulereport';
		Redis::publish('notify', json_encode($message));

		return Response::json($id);
	}

//SELECT cu.id, ugm.group_id, COUNT(ac.id) FROM common_users AS cu
//LEFT JOIN call_admin_calls AS ac ON cu.id = ac.user_id
//LEFT JOIN common_user_group_members AS ugm ON cu.id = ugm.user_id
//WHERE ac.classify = 'Unclassified' AND ac.approval = 'Waiting For Approval'
//AND ac.extension_id IN (SELECT se.id FROM call_staff_extn AS se WHERE se.user_id = cu.id OR se.user_group_id = ugm.group_id)
//GROUP BY cu.id
//ORDER BY cu.id
	public function setMaxCalledNo(Request $request) {

	}

	public function checkCallClassify(Request $request) {
		ini_set('max_execution_time', 300);

		$property_id = $request->get('property_id', 0);
		$test_mode = $request->get('test_mode', 0);

		$rules = PropertySetting::getClassifyRuleSetting($property_id);
		$smtp = Functions::getMailSetting($property_id, 'notification_');

		$status = CommonStatusPerProperty::find($property_id);
		if( empty($status) )
		{
			// set max call no based on 1 month ago
			$status = new CommonStatusPerProperty();
			$status->id = $property_id;

			date_default_timezone_set(config('app.timezone'));
			$month_ago = date("Y-m-d", strtotime('-1 month'));

			// $month_ago = '2000-10-10';

			$max_admin_call_no = DB::table('call_admin_calls')
				->where('call_date', '<=', $month_ago)
			    ->max('id');

			if( empty($max_admin_call_no) )
			    $max_admin_call_no = 0;

			$status->max_admin_call_no = $max_admin_call_no;
		}

		$total_start = microtime(true);

		$this->checkUnapprovedCall($property_id, $rules, $smtp, $status, $test_mode);
		$this->checkUnclosedCall($property_id, $rules, $smtp, $status, $test_mode);

		$total_end = microtime(true);

		echo ($total_end - $total_start) . '_';

		$max_admin_call_no = DB::table('call_admin_calls')->max('id');
		if($test_mode == 1) {
			$status->max_admin_call_no = $max_admin_call_no;
			$status->save();
		}
	}

	private function checkUnapprovedCall($property_id, $rules, $smtp, $status, $test_mode)
	{
		// find all department in a property
		$department_list = DB::table('common_department as cd')
				->where('cd.property_id', $property_id)
				->select(DB::raw('cd.*'))
				->get();


		foreach($department_list as $dept) {
			// find extesion list in department
			$ext_list = StaffExternal::getExtIdsInDept($dept->id);

			$start = microtime(true);

			$unmarked_info = DB::table('call_admin_calls')
				->where('classify', 'Unclassified')
				->where('approval', 'Unclassified')
				->where('carrier_charges', '>', 0)
				->whereIn('extension_id', $ext_list)
				->where('id', '>', $status->max_admin_call_no)
				->select(DB::raw('count(*) as cnt'))
				->first();

			$unmarked_cnt = 0;
			if( !empty($unmarked_info) )
			{
				$unmarked_cnt = $unmarked_info->cnt;
			}

			// find unapproved call in department
			$unapproved_info = DB::table('call_admin_calls as ac')
					->leftJoin('common_users as cu', 'ac.submitter', '=', 'cu.id')
					->where('cu.dept_id', $dept->id)
					->where('ac.carrier_charges', '>', 0)
					->where('ac.approval', 'Waiting for Approval')
					->where('ac.classify', 'Business')
					->where('ac.id', '>', $status->max_admin_call_no)
					->select(DB::raw('count(*) as cnt'))
					->first();

			$unapproved_cnt = 0;
			if( !empty($unapproved_info) )
			{
				$unapproved_cnt	= $unapproved_info->cnt;
			}

			// find appoval list(department head)
			$approver_list = DB::table('common_users as cu')
				->join('common_job_role as jr', 'cu.job_role_id', '=', 'jr.id')
				->join('common_permission_members as pm', 'jr.permission_group_id', '=', 'pm.perm_group_id')
				->join('common_page_route as pr', 'pm.page_route_id', '=', 'pr.id')
				->where('cu.dept_id', $dept->id)
				->where('pr.name', 'app.callaccounting.myapproval')
				->select(DB::raw('cu.*, pr.name'))
				->get();
			$end = microtime(true);

			echo ($end - $start) . '_';

			$info = [];
			$info['dept_name'] = $dept->department;
			$info['unmarked_cnt'] = $unmarked_cnt;
			$info['unapproved_cnt'] = $unapproved_cnt;

			if( $unmarked_cnt == 0 && $unapproved_cnt == 0 )
				continue;

			// if( $count > $rules['max_approver_notify'] )		// ignore this setting
			{
				foreach ($approver_list as $key => $user)
				{
					$info['wholename'] = $user->first_name . ' ' . $user->last_name;

					$message = [];
					$message['type'] = 'email';
					$message['to'] = $user->email;

					if( $test_mode == 1 )
						$message['to'] = 'shen.baylon@ennovatech.ae,jyyblue1987@yandex.com';

					$message['subject'] = 'HotLync Notification';
					$message['content'] = view('emails.callaccounting_reminder', ['info' => $info])->render();
					$message['smtp'] = $smtp;

					Redis::publish('notify', json_encode($message));
				}
			}
		}
	}

	private function checkUnclosedCall($property_id, $rules, $smtp, $status, $test_mode)
	{

		// find unclosed call in property
		$unclosed_info = DB::table('call_admin_calls as ac')
				->leftJoin('common_users as cu', 'ac.submitter', '=', 'cu.id')
				->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
				->leftJoin('common_property as cp', 'cd.property_id', '=', 'cp.id')
				->where('cd.property_id', $property_id)
				->where('ac.carrier_charges', '>', 0)
				->where('ac.approval', 'Approved')
				->where('ac.classify', 'Business')
				->where('ac.id', '>', $status->max_admin_call_no)
				->select(DB::raw('count(*) as cnt, cp.name as property_name'))
				->first();


		if( empty($unclosed_info) )
			return;

		$financer_list = DB::table('common_users as cu')
			->leftJoin('common_department as cd', 'cu.dept_id', '=', 'cd.id')
			->join('common_job_role as jr', 'cu.job_role_id', '=', 'jr.id')
			->join('common_permission_members as pm', 'jr.permission_group_id', '=', 'pm.perm_group_id')
			->join('common_page_route as pr', 'pm.page_route_id', '=', 'pr.id')
			->where('cd.property_id', $property_id)
			->where('pr.name', 'app.callaccounting.finance')
			->select(DB::raw('cu.*, pr.name'))
			->get();

		$unclosed_cnt = $unclosed_info->cnt;

		if( $unclosed_cnt == 0 )
			return;

		$info = [];
		$info['property_name'] = $unclosed_info->property_name;
		$info['unclosed_cnt'] = $unclosed_cnt;

		// if( $unclosed_cnt > $rules['max_close_notify'] )
		{
			foreach ($financer_list as $key => $user)
			{
				$info['wholename'] = $user->first_name . ' ' . $user->last_name;

				$message = [];
				$message['type'] = 'email';
				$message['to'] = $user->email;

				if( $test_mode == 1 )
					$message['to'] = 'shen.baylon@ennovatech.ae,jyyblue1987@yandex.com';

				if( $key > 2 )
					continue;

				$message['subject'] = 'HotLync Notification';
				$message['content'] = view('emails.callaccounting_finance_reminder', ['info' => $info])->render();
				$message['smtp'] = $smtp;

				Redis::publish('notify', json_encode($message));
			}
		}

	}

	public function callReminder(Request $request) {
		$property_id = $request->get('property_id', 0);

		echo $property_id;
	}

	public function getModChecklistReportData(Request $request)
	{
		date_default_timezone_set(config('app.timezone'));
		$cur_time = date('Y-m-d H:i:s');
		$cur_date = date('Y-m-d');
		$report = [];
		$report['property'] = Property::find($request->get("property_id" ,'0'));
		$report['id'] = $request->get('id', '');
		$report['property_id'] = $request->get('property_id', '');
		$report['generated_by'] = $request->get('generated_by', '');
		$report['name'] = $request->get('name', '');

		return $this->makeModChecklistReportData($report);

	}

	public function makeModChecklistReportData($report) {
		$data = $report;

		$id = $report['id'];
		$property_id = $report['property_id'];
		$user = $report['generated_by'];


		$query = DB::table('services_mod_checklist as smc')
				->leftJoin('services_mod_tasklist as smt', 'smc.id', '=', 'smt.checklist_id')
				->leftJoin('common_users as cu', 'smc.created_by', '=', 'cu.id')
				->where('smc.property_id' , $property_id)
				->where('smc.id',$id);

		$data_query = clone $query;

		$data_list = $data_query
					->select(DB::raw('smc.*,smt.*,CONCAT_WS(" ", cu.first_name, cu.last_name) as creator'))
					->get();

		$check_list = $data_query
					->select(DB::raw('smc.*,CONCAT_WS(" ", cu.first_name, cu.last_name) as creator'))
					->first();

		$generated_by =DB::table('common_users as cu')
					->select(DB::raw('CONCAT_WS(" ", cu.first_name, cu.last_name) as wholename'))
					->where('cu.id',$user)
					->first();
		$data['generated_by'] = $generated_by->wholename;
		$data['creator'] = $check_list->creator;
		$data['created_at'] = $check_list->created_at;
		$data['report_by'] = '';
		$data['datalist'] = $data_list;

		return $data;


	}
}

